                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.4 #5595 (Oct 23 2013) (Mac OS X ppc)
                              4 ; This file was generated Wed Oct 23 12:25:44 2013
                              5 ;--------------------------------------------------------
                              6 	.module printf_large
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl __print_format_PARM_4
                             13 	.globl __print_format_PARM_3
                             14 	.globl __print_format_PARM_2
                             15 	.globl __print_format
                             16 ;--------------------------------------------------------
                             17 ; special function registers
                             18 ;--------------------------------------------------------
                             19 	.area RSEG    (ABS,DATA)
   0000                      20 	.org 0x0000
                             21 ;--------------------------------------------------------
                             22 ; special function bits
                             23 ;--------------------------------------------------------
                             24 	.area RSEG    (ABS,DATA)
   0000                      25 	.org 0x0000
                             26 ;--------------------------------------------------------
                             27 ; overlayable register banks
                             28 ;--------------------------------------------------------
                             29 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      30 	.ds 8
                             31 ;--------------------------------------------------------
                             32 ; internal ram data
                             33 ;--------------------------------------------------------
                             34 	.area DSEG    (DATA)
   0000                      35 _output_char:
   0000                      36 	.ds 2
   0002                      37 _p:
   0002                      38 	.ds 3
   0005                      39 _value:
   0005                      40 	.ds 5
   000A                      41 _charsOutputted:
   000A                      42 	.ds 2
   000C                      43 __print_format_PARM_2:
   000C                      44 	.ds 3
   000F                      45 __print_format_PARM_3:
   000F                      46 	.ds 3
   0012                      47 __print_format_PARM_4:
   0012                      48 	.ds 1
   0013                      49 __print_format_radix_1_1:
   0013                      50 	.ds 1
   0014                      51 __print_format_width_1_1:
   0014                      52 	.ds 1
   0015                      53 __print_format_pstore_4_22:
   0015                      54 	.ds 1
   0016                      55 __print_format_sloc0_1_0:
   0016                      56 	.ds 3
                             57 ;--------------------------------------------------------
                             58 ; overlayable items in internal ram 
                             59 ;--------------------------------------------------------
                             60 	.area	OSEG    (OVR,DATA)
   0000                      61 _calculate_digit_radix_1_1::
   0000                      62 	.ds 1
   0001                      63 _calculate_digit_i_1_1::
   0001                      64 	.ds 1
                             65 ;--------------------------------------------------------
                             66 ; indirectly addressable internal ram data
                             67 ;--------------------------------------------------------
                             68 	.area ISEG    (DATA)
   0000                      69 __print_format_store_4_22:
   0000                      70 	.ds 6
                             71 ;--------------------------------------------------------
                             72 ; absolute internal ram data
                             73 ;--------------------------------------------------------
                             74 	.area IABS    (ABS,DATA)
                             75 	.area IABS    (ABS,DATA)
                             76 ;--------------------------------------------------------
                             77 ; bit data
                             78 ;--------------------------------------------------------
                             79 	.area BSEG    (BIT)
   0000                      80 _lower_case:
   0000                      81 	.ds 1
   0001                      82 __print_format_left_justify_1_1:
   0001                      83 	.ds 1
   0002                      84 __print_format_zero_padding_1_1:
   0002                      85 	.ds 1
   0003                      86 __print_format_prefix_sign_1_1:
   0003                      87 	.ds 1
   0004                      88 __print_format_prefix_space_1_1:
   0004                      89 	.ds 1
   0005                      90 __print_format_signed_argument_1_1:
   0005                      91 	.ds 1
   0006                      92 __print_format_char_argument_1_1:
   0006                      93 	.ds 1
   0007                      94 __print_format_long_argument_1_1:
   0007                      95 	.ds 1
   0008                      96 __print_format_float_argument_1_1:
   0008                      97 	.ds 1
   0009                      98 __print_format_lsd_1_1:
   0009                      99 	.ds 1
                            100 ;--------------------------------------------------------
                            101 ; paged external ram data
                            102 ;--------------------------------------------------------
                            103 	.area PSEG    (PAG,XDATA)
                            104 ;--------------------------------------------------------
                            105 ; external ram data
                            106 ;--------------------------------------------------------
                            107 	.area XSEG    (XDATA)
                            108 ;--------------------------------------------------------
                            109 ; absolute external ram data
                            110 ;--------------------------------------------------------
                            111 	.area XABS    (ABS,XDATA)
                            112 ;--------------------------------------------------------
                            113 ; external initialized ram data
                            114 ;--------------------------------------------------------
                            115 	.area XISEG   (XDATA)
                            116 	.area HOME    (CODE)
                            117 	.area GSINIT0 (CODE)
                            118 	.area GSINIT1 (CODE)
                            119 	.area GSINIT2 (CODE)
                            120 	.area GSINIT3 (CODE)
                            121 	.area GSINIT4 (CODE)
                            122 	.area GSINIT5 (CODE)
                            123 	.area GSINIT  (CODE)
                            124 	.area GSFINAL (CODE)
                            125 	.area CSEG    (CODE)
                            126 ;--------------------------------------------------------
                            127 ; global & static initialisations
                            128 ;--------------------------------------------------------
                            129 	.area HOME    (CODE)
                            130 	.area GSINIT  (CODE)
                            131 	.area GSFINAL (CODE)
                            132 	.area GSINIT  (CODE)
                            133 ;--------------------------------------------------------
                            134 ; Home
                            135 ;--------------------------------------------------------
                            136 	.area HOME    (CODE)
                            137 	.area HOME    (CODE)
                            138 ;--------------------------------------------------------
                            139 ; code
                            140 ;--------------------------------------------------------
                            141 	.area CSEG    (CODE)
                            142 ;------------------------------------------------------------
                            143 ;Allocation info for local variables in function '_output_char'
                            144 ;------------------------------------------------------------
                            145 ;c                         Allocated to registers r2 
                            146 ;------------------------------------------------------------
                            147 ;	printf_large.c:100: static void _output_char( unsigned char c )
                            148 ;	-----------------------------------------
                            149 ;	 function _output_char
                            150 ;	-----------------------------------------
   0000                     151 __output_char:
                    0002    152 	ar2 = 0x02
                    0003    153 	ar3 = 0x03
                    0004    154 	ar4 = 0x04
                    0005    155 	ar5 = 0x05
                    0006    156 	ar6 = 0x06
                    0007    157 	ar7 = 0x07
                    0000    158 	ar0 = 0x00
                    0001    159 	ar1 = 0x01
   0000 AA 82               160 	mov	r2,dpl
                            161 ;	printf_large.c:102: output_char( c, p );
   0002 C0*02               162 	push	_p
   0004 C0*03               163 	push	(_p + 1)
   0006 C0*04               164 	push	(_p + 2)
   0008 74r17               165 	mov	a,#00103$
   000A C0 E0               166 	push	acc
   000C 74s00               167 	mov	a,#(00103$ >> 8)
   000E C0 E0               168 	push	acc
   0010 C0*00               169 	push	_output_char
   0012 C0*01               170 	push	(_output_char + 1)
   0014 8A 82               171 	mov	dpl,r2
   0016 22                  172 	ret
   0017                     173 00103$:
   0017 15 81               174 	dec	sp
   0019 15 81               175 	dec	sp
   001B 15 81               176 	dec	sp
                            177 ;	printf_large.c:103: charsOutputted++;
   001D 05*0A               178 	inc	_charsOutputted
   001F E4                  179 	clr	a
   0020 B5*0A 02            180 	cjne	a,_charsOutputted,00104$
   0023 05*0B               181 	inc	(_charsOutputted + 1)
   0025                     182 00104$:
   0025 22                  183 	ret
                            184 ;------------------------------------------------------------
                            185 ;Allocation info for local variables in function 'output_digit'
                            186 ;------------------------------------------------------------
                            187 ;n                         Allocated to registers r2 
                            188 ;c                         Allocated to registers r2 
                            189 ;------------------------------------------------------------
                            190 ;	printf_large.c:123: static void output_digit( unsigned char n )
                            191 ;	-----------------------------------------
                            192 ;	 function output_digit
                            193 ;	-----------------------------------------
   0026                     194 _output_digit:
   0026 AA 82               195 	mov	r2,dpl
                            196 ;	printf_large.c:125: register unsigned char c = n + (unsigned char)'0';
   0028 74 30               197 	mov	a,#0x30
   002A 2A                  198 	add	a,r2
                            199 ;	printf_large.c:127: if (c > (unsigned char)'9')
   002B FA                  200 	mov  r2,a
   002C 24 C6               201 	add	a,#0xff - 0x39
   002E 50 0A               202 	jnc	00104$
                            203 ;	printf_large.c:129: c += (unsigned char)('A' - '0' - 10);
   0030 74 07               204 	mov	a,#0x07
   0032 2A                  205 	add	a,r2
   0033 FA                  206 	mov	r2,a
                            207 ;	printf_large.c:130: if (lower_case)
   0034 30*00 03            208 	jnb	_lower_case,00104$
                            209 ;	printf_large.c:131: c = tolower(c);
   0037 43 02 20            210 	orl	ar2,#0x20
   003A                     211 00104$:
                            212 ;	printf_large.c:133: _output_char( c );
   003A 8A 82               213 	mov	dpl,r2
   003C 02s00r00            214 	ljmp	__output_char
                            215 ;------------------------------------------------------------
                            216 ;Allocation info for local variables in function 'output_2digits'
                            217 ;------------------------------------------------------------
                            218 ;b                         Allocated to registers r2 
                            219 ;------------------------------------------------------------
                            220 ;	printf_large.c:148: static void output_2digits( unsigned char b )
                            221 ;	-----------------------------------------
                            222 ;	 function output_2digits
                            223 ;	-----------------------------------------
   003F                     224 _output_2digits:
                            225 ;	printf_large.c:150: output_digit( b>>4   );
   003F E5 82               226 	mov	a,dpl
   0041 FA                  227 	mov	r2,a
   0042 C4                  228 	swap	a
   0043 54 0F               229 	anl	a,#0x0f
   0045 F5 82               230 	mov	dpl,a
   0047 C0 02               231 	push	ar2
   0049 12s00r26            232 	lcall	_output_digit
   004C D0 02               233 	pop	ar2
                            234 ;	printf_large.c:151: output_digit( b&0x0F );
   004E 74 0F               235 	mov	a,#0x0F
   0050 5A                  236 	anl	a,r2
   0051 F5 82               237 	mov	dpl,a
   0053 02s00r26            238 	ljmp	_output_digit
                            239 ;------------------------------------------------------------
                            240 ;Allocation info for local variables in function 'calculate_digit'
                            241 ;------------------------------------------------------------
                            242 ;radix                     Allocated with name '_calculate_digit_radix_1_1'
                            243 ;ul                        Allocated to registers r3 r4 r5 r6 
                            244 ;b4                        Allocated to registers r7 
                            245 ;i                         Allocated with name '_calculate_digit_i_1_1'
                            246 ;------------------------------------------------------------
                            247 ;	printf_large.c:178: static void calculate_digit( unsigned char radix )
                            248 ;	-----------------------------------------
                            249 ;	 function calculate_digit
                            250 ;	-----------------------------------------
   0056                     251 _calculate_digit:
   0056 85 82*00            252 	mov	_calculate_digit_radix_1_1,dpl
                            253 ;	printf_large.c:180: register unsigned long ul = value.ul;
   0059 AB*05               254 	mov	r3,_value
   005B AC*06               255 	mov	r4,(_value + 1)
   005D AD*07               256 	mov	r5,(_value + 2)
   005F AE*08               257 	mov	r6,(_value + 3)
                            258 ;	printf_large.c:181: register unsigned char b4 = value.byte[4];
   0061 AF*09               259 	mov	r7,(_value + 0x0004)
                            260 ;	printf_large.c:184: do
   0063 75*01 20            261 	mov	_calculate_digit_i_1_1,#0x20
   0066                     262 00103$:
                            263 ;	printf_large.c:186: b4 = (b4 << 1);
   0066 EF                  264 	mov	a,r7
   0067 2F                  265 	add	a,r7
   0068 FF                  266 	mov	r7,a
                            267 ;	printf_large.c:187: b4 |= (ul >> 31) & 0x01;
   0069 EE                  268 	mov	a,r6
   006A 23                  269 	rl	a
   006B 54 01               270 	anl	a,#0x01
   006D FA                  271 	mov	r2,a
   006E 42 07               272 	orl	ar7,a
                            273 ;	printf_large.c:188: ul <<= 1;
   0070 EB                  274 	mov	a,r3
   0071 2B                  275 	add	a,r3
   0072 FB                  276 	mov	r3,a
   0073 EC                  277 	mov	a,r4
   0074 33                  278 	rlc	a
   0075 FC                  279 	mov	r4,a
   0076 ED                  280 	mov	a,r5
   0077 33                  281 	rlc	a
   0078 FD                  282 	mov	r5,a
   0079 EE                  283 	mov	a,r6
   007A 33                  284 	rlc	a
   007B FE                  285 	mov	r6,a
                            286 ;	printf_large.c:190: if (radix <= b4 )
   007C C3                  287 	clr	c
   007D EF                  288 	mov	a,r7
   007E 95*00               289 	subb	a,_calculate_digit_radix_1_1
   0080 40 08               290 	jc	00104$
                            291 ;	printf_large.c:192: b4 -= radix;
   0082 EF                  292 	mov	a,r7
   0083 C3                  293 	clr	c
   0084 95*00               294 	subb	a,_calculate_digit_radix_1_1
   0086 FF                  295 	mov	r7,a
                            296 ;	printf_large.c:193: ul |= 1;
   0087 43 03 01            297 	orl	ar3,#0x01
   008A                     298 00104$:
                            299 ;	printf_large.c:195: } while (--i);
   008A D5*01 D9            300 	djnz	_calculate_digit_i_1_1,00103$
                            301 ;	printf_large.c:196: value.ul = ul;
   008D 8B*05               302 	mov	_value,r3
   008F 8C*06               303 	mov	(_value + 1),r4
   0091 8D*07               304 	mov	(_value + 2),r5
   0093 8E*08               305 	mov	(_value + 3),r6
                            306 ;	printf_large.c:197: value.byte[4] = b4;
   0095 8F*09               307 	mov	(_value + 0x0004),r7
   0097 22                  308 	ret
                            309 ;------------------------------------------------------------
                            310 ;Allocation info for local variables in function '_print_format'
                            311 ;------------------------------------------------------------
                            312 ;pvoid                     Allocated with name '__print_format_PARM_2'
                            313 ;format                    Allocated with name '__print_format_PARM_3'
                            314 ;ap                        Allocated with name '__print_format_PARM_4'
                            315 ;pfn                       Allocated to registers 
                            316 ;radix                     Allocated with name '__print_format_radix_1_1'
                            317 ;width                     Allocated with name '__print_format_width_1_1'
                            318 ;decimals                  Allocated to registers r5 
                            319 ;length                    Allocated to registers r3 
                            320 ;c                         Allocated to registers r2 
                            321 ;memtype                   Allocated to registers r5 
                            322 ;pstore                    Allocated with name '__print_format_pstore_4_22'
                            323 ;sloc0                     Allocated with name '__print_format_sloc0_1_0'
                            324 ;store                     Allocated with name '__print_format_store_4_22'
                            325 ;------------------------------------------------------------
                            326 ;	printf_large.c:402: int _print_format (pfn_outputchar pfn, void* pvoid, const char *format, va_list ap)
                            327 ;	-----------------------------------------
                            328 ;	 function _print_format
                            329 ;	-----------------------------------------
   0098                     330 __print_format:
   0098 85 82*00            331 	mov	_output_char,dpl
   009B 85 83*01            332 	mov	(_output_char + 1),dph
                            333 ;	printf_large.c:430: p = pvoid;
   009E 85*0C*02            334 	mov	_p,__print_format_PARM_2
   00A1 85*0D*03            335 	mov	(_p + 1),(__print_format_PARM_2 + 1)
   00A4 85*0E*04            336 	mov	(_p + 2),(__print_format_PARM_2 + 2)
                            337 ;	printf_large.c:434: charsOutputted = 0;
   00A7 E4                  338 	clr	a
   00A8 F5*0A               339 	mov	_charsOutputted,a
   00AA F5*0B               340 	mov	(_charsOutputted + 1),a
                            341 ;	printf_large.c:442: while( c=*format++ )
   00AC                     342 00239$:
   00AC AA*0F               343 	mov	r2,__print_format_PARM_3
   00AE AB*10               344 	mov	r3,(__print_format_PARM_3 + 1)
   00B0 AC*11               345 	mov	r4,(__print_format_PARM_3 + 2)
   00B2 8A 82               346 	mov	dpl,r2
   00B4 8B 83               347 	mov	dph,r3
   00B6 8C F0               348 	mov	b,r4
   00B8 12s00r00            349 	lcall	__gptrget
   00BB FD                  350 	mov	r5,a
   00BC 74 01               351 	mov	a,#0x01
   00BE 2A                  352 	add	a,r2
   00BF F5*0F               353 	mov	__print_format_PARM_3,a
   00C1 E4                  354 	clr	a
   00C2 3B                  355 	addc	a,r3
   00C3 F5*10               356 	mov	(__print_format_PARM_3 + 1),a
   00C5 8C*11               357 	mov	(__print_format_PARM_3 + 2),r4
   00C7 ED                  358 	mov	a,r5
   00C8 FA                  359 	mov	r2,a
   00C9 70 03               360 	jnz	00328$
   00CB 02s05r7F            361 	ljmp	00241$
   00CE                     362 00328$:
                            363 ;	printf_large.c:444: if ( c=='%' )
   00CE BA 25 02            364 	cjne	r2,#0x25,00329$
   00D1 80 03               365 	sjmp	00330$
   00D3                     366 00329$:
   00D3 02s05r77            367 	ljmp	00237$
   00D6                     368 00330$:
                            369 ;	printf_large.c:446: left_justify    = 0;
   00D6 C2*01               370 	clr	__print_format_left_justify_1_1
                            371 ;	printf_large.c:447: zero_padding    = 0;
   00D8 C2*02               372 	clr	__print_format_zero_padding_1_1
                            373 ;	printf_large.c:448: prefix_sign     = 0;
   00DA C2*03               374 	clr	__print_format_prefix_sign_1_1
                            375 ;	printf_large.c:449: prefix_space    = 0;
   00DC C2*04               376 	clr	__print_format_prefix_space_1_1
                            377 ;	printf_large.c:450: signed_argument = 0;
   00DE C2*05               378 	clr	__print_format_signed_argument_1_1
                            379 ;	printf_large.c:451: char_argument   = 0;
   00E0 C2*06               380 	clr	__print_format_char_argument_1_1
                            381 ;	printf_large.c:452: long_argument   = 0;
   00E2 C2*07               382 	clr	__print_format_long_argument_1_1
                            383 ;	printf_large.c:453: float_argument  = 0;
   00E4 C2*08               384 	clr	__print_format_float_argument_1_1
                            385 ;	printf_large.c:454: radix           = 0;
   00E6 75*13 00            386 	mov	__print_format_radix_1_1,#0x00
                            387 ;	printf_large.c:455: width           = 0;
   00E9 75*14 00            388 	mov	__print_format_width_1_1,#0x00
                            389 ;	printf_large.c:456: decimals        = -1;
   00EC 7D FF               390 	mov	r5,#0xFF
                            391 ;	printf_large.c:458: get_conversion_spec:
   00EE AE*0F               392 	mov	r6,__print_format_PARM_3
   00F0 AF*10               393 	mov	r7,(__print_format_PARM_3 + 1)
   00F2 AB*11               394 	mov	r3,(__print_format_PARM_3 + 2)
   00F4                     395 00101$:
                            396 ;	printf_large.c:460: c = *format++;
   00F4 8E 82               397 	mov	dpl,r6
   00F6 8F 83               398 	mov	dph,r7
   00F8 8B F0               399 	mov	b,r3
   00FA 12s00r00            400 	lcall	__gptrget
   00FD FA                  401 	mov	r2,a
   00FE A3                  402 	inc	dptr
   00FF AE 82               403 	mov	r6,dpl
   0101 AF 83               404 	mov	r7,dph
   0103 8E*0F               405 	mov	__print_format_PARM_3,r6
   0105 8F*10               406 	mov	(__print_format_PARM_3 + 1),r7
   0107 8B*11               407 	mov	(__print_format_PARM_3 + 2),r3
                            408 ;	printf_large.c:462: if (c=='%') {
   0109 BA 25 07            409 	cjne	r2,#0x25,00103$
                            410 ;	printf_large.c:463: OUTPUT_CHAR(c, p);
   010C 8A 82               411 	mov	dpl,r2
   010E 12s00r00            412 	lcall	__output_char
                            413 ;	printf_large.c:464: continue;
   0111 80 99               414 	sjmp	00239$
   0113                     415 00103$:
                            416 ;	printf_large.c:467: if (isdigit(c)) {
   0113 8A 04               417 	mov	ar4,r2
   0115 BC 30 00            418 	cjne	r4,#0x30,00333$
   0118                     419 00333$:
   0118 40 2A               420 	jc	00110$
   011A 8A 04               421 	mov	ar4,r2
   011C EC                  422 	mov	a,r4
   011D 24 C6               423 	add	a,#0xff - 0x39
   011F 40 23               424 	jc	00110$
                            425 ;	printf_large.c:468: if (decimals==-1) {
   0121 BD FF 13            426 	cjne	r5,#0xFF,00107$
                            427 ;	printf_large.c:469: width = 10*width + (c - '0');
   0124 E5*14               428 	mov	a,__print_format_width_1_1
   0126 75 F0 0A            429 	mov	b,#0x0A
   0129 A4                  430 	mul	ab
   012A FC                  431 	mov	r4,a
   012B EA                  432 	mov	a,r2
   012C 24 D0               433 	add	a,#0xd0
   012E 2C                  434 	add	a,r4
                            435 ;	printf_large.c:470: if (width == 0) {
   012F F5*14               436 	mov	__print_format_width_1_1,a
   0131 70 C1               437 	jnz	00101$
                            438 ;	printf_large.c:472: zero_padding = 1;
   0133 D2*02               439 	setb	__print_format_zero_padding_1_1
   0135 80 BD               440 	sjmp	00101$
   0137                     441 00107$:
                            442 ;	printf_large.c:475: decimals = 10*decimals + (c-'0');
   0137 ED                  443 	mov	a,r5
   0138 75 F0 0A            444 	mov	b,#0x0A
   013B A4                  445 	mul	ab
   013C FC                  446 	mov	r4,a
   013D EA                  447 	mov	a,r2
   013E 24 D0               448 	add	a,#0xd0
   0140 2C                  449 	add	a,r4
   0141 FD                  450 	mov	r5,a
                            451 ;	printf_large.c:477: goto get_conversion_spec;
   0142 80 B0               452 	sjmp	00101$
   0144                     453 00110$:
                            454 ;	printf_large.c:480: if (c=='.') {
   0144 BA 2E 07            455 	cjne	r2,#0x2E,00115$
                            456 ;	printf_large.c:481: if (decimals==-1) decimals=0;
   0147 BD FF AA            457 	cjne	r5,#0xFF,00101$
   014A 7D 00               458 	mov	r5,#0x00
                            459 ;	printf_large.c:484: goto get_conversion_spec;
   014C 80 A6               460 	sjmp	00101$
   014E                     461 00115$:
                            462 ;	printf_large.c:487: if (islower(c))
   014E 8A 04               463 	mov	ar4,r2
   0150 BC 61 00            464 	cjne	r4,#0x61,00343$
   0153                     465 00343$:
   0153 40 0E               466 	jc	00117$
   0155 8A 04               467 	mov	ar4,r2
   0157 EC                  468 	mov	a,r4
   0158 24 85               469 	add	a,#0xff - 0x7A
   015A 40 07               470 	jc	00117$
                            471 ;	printf_large.c:489: c = toupper(c);
   015C 53 02 DF            472 	anl	ar2,#0xDF
                            473 ;	printf_large.c:490: lower_case = 1;
   015F D2*00               474 	setb	_lower_case
   0161 80 02               475 	sjmp	00118$
   0163                     476 00117$:
                            477 ;	printf_large.c:493: lower_case = 0;
   0163 C2*00               478 	clr	_lower_case
   0165                     479 00118$:
                            480 ;	printf_large.c:495: switch( c )
   0165 BA 20 02            481 	cjne	r2,#0x20,00346$
   0168 80 55               482 	sjmp	00122$
   016A                     483 00346$:
   016A BA 2B 02            484 	cjne	r2,#0x2B,00347$
   016D 80 4B               485 	sjmp	00121$
   016F                     486 00347$:
   016F BA 2D 02            487 	cjne	r2,#0x2D,00348$
   0172 80 41               488 	sjmp	00120$
   0174                     489 00348$:
   0174 BA 42 02            490 	cjne	r2,#0x42,00349$
   0177 80 4B               491 	sjmp	00123$
   0179                     492 00349$:
   0179 BA 43 02            493 	cjne	r2,#0x43,00350$
   017C 80 50               494 	sjmp	00125$
   017E                     495 00350$:
   017E BA 44 03            496 	cjne	r2,#0x44,00351$
   0181 02s03r26            497 	ljmp	00162$
   0184                     498 00351$:
   0184 BA 46 03            499 	cjne	r2,#0x46,00352$
   0187 02s03r3C            500 	ljmp	00166$
   018A                     501 00352$:
   018A BA 49 03            502 	cjne	r2,#0x49,00353$
   018D 02s03r26            503 	ljmp	00162$
   0190                     504 00353$:
   0190 BA 4C 02            505 	cjne	r2,#0x4C,00354$
   0193 80 34               506 	sjmp	00124$
   0195                     507 00354$:
   0195 BA 4F 03            508 	cjne	r2,#0x4F,00355$
   0198 02s03r2D            509 	ljmp	00163$
   019B                     510 00355$:
   019B BA 50 03            511 	cjne	r2,#0x50,00356$
   019E 02s02rBD            512 	ljmp	00148$
   01A1                     513 00356$:
   01A1 BA 53 02            514 	cjne	r2,#0x53,00357$
   01A4 80 4C               515 	sjmp	00129$
   01A6                     516 00357$:
   01A6 BA 55 03            517 	cjne	r2,#0x55,00358$
   01A9 02s03r32            518 	ljmp	00164$
   01AC                     519 00358$:
   01AC BA 58 03            520 	cjne	r2,#0x58,00359$
   01AF 02s03r37            521 	ljmp	00165$
   01B2                     522 00359$:
   01B2 02s03r40            523 	ljmp	00167$
                            524 ;	printf_large.c:497: case '-':
   01B5                     525 00120$:
                            526 ;	printf_large.c:498: left_justify = 1;
   01B5 D2*01               527 	setb	__print_format_left_justify_1_1
                            528 ;	printf_large.c:499: goto get_conversion_spec;
   01B7 02s00rF4            529 	ljmp	00101$
                            530 ;	printf_large.c:500: case '+':
   01BA                     531 00121$:
                            532 ;	printf_large.c:501: prefix_sign = 1;
   01BA D2*03               533 	setb	__print_format_prefix_sign_1_1
                            534 ;	printf_large.c:502: goto get_conversion_spec;
   01BC 02s00rF4            535 	ljmp	00101$
                            536 ;	printf_large.c:503: case ' ':
   01BF                     537 00122$:
                            538 ;	printf_large.c:504: prefix_space = 1;
   01BF D2*04               539 	setb	__print_format_prefix_space_1_1
                            540 ;	printf_large.c:505: goto get_conversion_spec;
   01C1 02s00rF4            541 	ljmp	00101$
                            542 ;	printf_large.c:506: case 'B':
   01C4                     543 00123$:
                            544 ;	printf_large.c:507: char_argument = 1;
   01C4 D2*06               545 	setb	__print_format_char_argument_1_1
                            546 ;	printf_large.c:508: goto get_conversion_spec;
   01C6 02s00rF4            547 	ljmp	00101$
                            548 ;	printf_large.c:509: case 'L':
   01C9                     549 00124$:
                            550 ;	printf_large.c:510: long_argument = 1;
   01C9 D2*07               551 	setb	__print_format_long_argument_1_1
                            552 ;	printf_large.c:511: goto get_conversion_spec;
   01CB 02s00rF4            553 	ljmp	00101$
                            554 ;	printf_large.c:513: case 'C':
   01CE                     555 00125$:
                            556 ;	printf_large.c:514: if( char_argument )
   01CE 30*06 0A            557 	jnb	__print_format_char_argument_1_1,00127$
                            558 ;	printf_large.c:515: c = va_arg(ap,char);
   01D1 E5*12               559 	mov	a,__print_format_PARM_4
   01D3 14                  560 	dec	a
   01D4 F8                  561 	mov	r0,a
   01D5 88*12               562 	mov	__print_format_PARM_4,r0
   01D7 86 02               563 	mov	ar2,@r0
   01D9 80 0F               564 	sjmp	00128$
   01DB                     565 00127$:
                            566 ;	printf_large.c:517: c = va_arg(ap,int);
   01DB E5*12               567 	mov	a,__print_format_PARM_4
   01DD 24 FE               568 	add	a,#0xfe
   01DF F8                  569 	mov	r0,a
   01E0 88*12               570 	mov	__print_format_PARM_4,r0
   01E2 86 03               571 	mov	ar3,@r0
   01E4 08                  572 	inc	r0
   01E5 86 04               573 	mov	ar4,@r0
   01E7 18                  574 	dec	r0
   01E8 8B 02               575 	mov	ar2,r3
   01EA                     576 00128$:
                            577 ;	printf_large.c:518: OUTPUT_CHAR( c, p );
   01EA 8A 82               578 	mov	dpl,r2
   01EC 12s00r00            579 	lcall	__output_char
                            580 ;	printf_large.c:519: break;
   01EF 02s03r49            581 	ljmp	00168$
                            582 ;	printf_large.c:521: case 'S':
   01F2                     583 00129$:
                            584 ;	printf_large.c:522: PTR = va_arg(ap,ptr_t);
   01F2 E5*12               585 	mov	a,__print_format_PARM_4
   01F4 24 FD               586 	add	a,#0xfd
   01F6 F8                  587 	mov	r0,a
   01F7 88*12               588 	mov	__print_format_PARM_4,r0
   01F9 86 03               589 	mov	ar3,@r0
   01FB 08                  590 	inc	r0
   01FC 86 04               591 	mov	ar4,@r0
   01FE 08                  592 	inc	r0
   01FF 86 06               593 	mov	ar6,@r0
   0201 18                  594 	dec	r0
   0202 18                  595 	dec	r0
   0203 8B*05               596 	mov	_value,r3
   0205 8C*06               597 	mov	(_value + 1),r4
   0207 8E*07               598 	mov	(_value + 2),r6
                            599 ;	printf_large.c:532: length = strlen(PTR);
   0209 8B 82               600 	mov	dpl,r3
   020B 8C 83               601 	mov	dph,r4
   020D 8E F0               602 	mov	b,r6
   020F C0 05               603 	push	ar5
   0211 12s00r00            604 	lcall	_strlen
   0214 AB 82               605 	mov	r3,dpl
   0216 AC 83               606 	mov	r4,dph
   0218 D0 05               607 	pop	ar5
                            608 ;	printf_large.c:534: if ( decimals == -1 )
   021A BD FF 02            609 	cjne	r5,#0xFF,00131$
                            610 ;	printf_large.c:536: decimals = length;
   021D 8B 05               611 	mov	ar5,r3
   021F                     612 00131$:
                            613 ;	printf_large.c:538: if ( ( !left_justify ) && (length < width) )
   021F 20*01 2C            614 	jb	__print_format_left_justify_1_1,00281$
   0222 C3                  615 	clr	c
   0223 EB                  616 	mov	a,r3
   0224 95*14               617 	subb	a,__print_format_width_1_1
   0226 50 26               618 	jnc	00281$
                            619 ;	printf_large.c:540: width -= length;
   0228 E5*14               620 	mov	a,__print_format_width_1_1
   022A C3                  621 	clr	c
   022B 9B                  622 	subb	a,r3
   022C F5*14               623 	mov	__print_format_width_1_1,a
                            624 ;	printf_large.c:541: while( width-- != 0 )
   022E AC*14               625 	mov	r4,__print_format_width_1_1
   0230                     626 00132$:
   0230 8C 06               627 	mov	ar6,r4
   0232 1C                  628 	dec	r4
   0233 8C*14               629 	mov	__print_format_width_1_1,r4
   0235 EE                  630 	mov	a,r6
   0236 60 14               631 	jz	00321$
                            632 ;	printf_large.c:543: OUTPUT_CHAR( ' ', p );
   0238 75 82 20            633 	mov	dpl,#0x20
   023B C0 03               634 	push	ar3
   023D C0 04               635 	push	ar4
   023F C0 05               636 	push	ar5
   0241 12s00r00            637 	lcall	__output_char
   0244 D0 05               638 	pop	ar5
   0246 D0 04               639 	pop	ar4
   0248 D0 03               640 	pop	ar3
                            641 ;	printf_large.c:547: while ( (c = *PTR)  && (decimals-- > 0))
   024A 80 E4               642 	sjmp	00132$
   024C                     643 00321$:
   024C 8C*14               644 	mov	__print_format_width_1_1,r4
   024E                     645 00281$:
   024E 8D 04               646 	mov	ar4,r5
   0250                     647 00139$:
   0250 85*05 82            648 	mov	dpl,_value
   0253 85*06 83            649 	mov	dph,(_value + 1)
   0256 85*07 F0            650 	mov	b,(_value + 2)
   0259 12s00r00            651 	lcall	__gptrget
   025C FD                  652 	mov	r5,a
   025D FA                  653 	mov	r2,a
   025E 60 2F               654 	jz	00141$
   0260 8C 05               655 	mov	ar5,r4
   0262 1C                  656 	dec	r4
   0263 C3                  657 	clr	c
   0264 74 80               658 	mov	a,#(0x00 ^ 0x80)
   0266 8D F0               659 	mov	b,r5
   0268 63 F0 80            660 	xrl	b,#0x80
   026B 95 F0               661 	subb	a,b
   026D 50 20               662 	jnc	00141$
                            663 ;	printf_large.c:549: OUTPUT_CHAR( c, p );
   026F 8A 82               664 	mov	dpl,r2
   0271 C0 03               665 	push	ar3
   0273 C0 04               666 	push	ar4
   0275 12s00r00            667 	lcall	__output_char
   0278 D0 04               668 	pop	ar4
   027A D0 03               669 	pop	ar3
                            670 ;	printf_large.c:550: PTR++;
   027C AD*05               671 	mov	r5,_value
   027E AE*06               672 	mov	r6,(_value + 1)
   0280 AF*07               673 	mov	r7,(_value + 2)
   0282 0D                  674 	inc	r5
   0283 BD 00 01            675 	cjne	r5,#0x00,00368$
   0286 0E                  676 	inc	r6
   0287                     677 00368$:
   0287 8D*05               678 	mov	_value,r5
   0289 8E*06               679 	mov	(_value + 1),r6
   028B 8F*07               680 	mov	(_value + 2),r7
   028D 80 C1               681 	sjmp	00139$
   028F                     682 00141$:
                            683 ;	printf_large.c:553: if ( left_justify && (length < width))
   028F 20*01 03            684 	jb	__print_format_left_justify_1_1,00369$
   0292 02s03r49            685 	ljmp	00168$
   0295                     686 00369$:
   0295 C3                  687 	clr	c
   0296 EB                  688 	mov	a,r3
   0297 95*14               689 	subb	a,__print_format_width_1_1
   0299 40 03               690 	jc	00370$
   029B 02s03r49            691 	ljmp	00168$
   029E                     692 00370$:
                            693 ;	printf_large.c:555: width -= length;
   029E E5*14               694 	mov	a,__print_format_width_1_1
   02A0 C3                  695 	clr	c
   02A1 9B                  696 	subb	a,r3
   02A2 F5*14               697 	mov	__print_format_width_1_1,a
                            698 ;	printf_large.c:556: while( width-- != 0 )
   02A4 AC*14               699 	mov	r4,__print_format_width_1_1
   02A6                     700 00142$:
   02A6 8C 05               701 	mov	ar5,r4
   02A8 1C                  702 	dec	r4
   02A9 8C*14               703 	mov	__print_format_width_1_1,r4
   02AB ED                  704 	mov	a,r5
   02AC 70 03               705 	jnz	00371$
   02AE 02s03r47            706 	ljmp	00323$
   02B1                     707 00371$:
                            708 ;	printf_large.c:558: OUTPUT_CHAR( ' ', p );
   02B1 75 82 20            709 	mov	dpl,#0x20
   02B4 C0 04               710 	push	ar4
   02B6 12s00r00            711 	lcall	__output_char
   02B9 D0 04               712 	pop	ar4
                            713 ;	printf_large.c:563: case 'P':
   02BB 80 E9               714 	sjmp	00142$
   02BD                     715 00148$:
                            716 ;	printf_large.c:564: PTR = va_arg(ap,ptr_t);
   02BD E5*12               717 	mov	a,__print_format_PARM_4
   02BF 24 FD               718 	add	a,#0xfd
   02C1 F8                  719 	mov	r0,a
   02C2 88*12               720 	mov	__print_format_PARM_4,r0
   02C4 86 05               721 	mov	ar5,@r0
   02C6 08                  722 	inc	r0
   02C7 86 06               723 	mov	ar6,@r0
   02C9 08                  724 	inc	r0
   02CA 86 07               725 	mov	ar7,@r0
   02CC 18                  726 	dec	r0
   02CD 18                  727 	dec	r0
   02CE 8D*05               728 	mov	_value,r5
   02D0 8E*06               729 	mov	(_value + 1),r6
   02D2 8F*07               730 	mov	(_value + 2),r7
                            731 ;	printf_large.c:587: unsigned char memtype = value.byte[2];
   02D4 AD*07               732 	mov	r5,(_value + 0x0002)
                            733 ;	printf_large.c:588: if (memtype >= 0x80)
   02D6 BD 80 00            734 	cjne	r5,#0x80,00372$
   02D9                     735 00372$:
   02D9 40 04               736 	jc	00156$
                            737 ;	printf_large.c:589: c = 'C';
   02DB 7A 43               738 	mov	r2,#0x43
   02DD 80 14               739 	sjmp	00157$
   02DF                     740 00156$:
                            741 ;	printf_large.c:590: else if (memtype >= 0x60)
   02DF BD 60 00            742 	cjne	r5,#0x60,00374$
   02E2                     743 00374$:
   02E2 40 04               744 	jc	00153$
                            745 ;	printf_large.c:591: c = 'P';
   02E4 7A 50               746 	mov	r2,#0x50
   02E6 80 0B               747 	sjmp	00157$
   02E8                     748 00153$:
                            749 ;	printf_large.c:592: else if (memtype >= 0x40)
   02E8 BD 40 00            750 	cjne	r5,#0x40,00376$
   02EB                     751 00376$:
   02EB 40 04               752 	jc	00150$
                            753 ;	printf_large.c:593: c = 'I';
   02ED 7A 49               754 	mov	r2,#0x49
   02EF 80 02               755 	sjmp	00157$
   02F1                     756 00150$:
                            757 ;	printf_large.c:595: c = 'X';
   02F1 7A 58               758 	mov	r2,#0x58
   02F3                     759 00157$:
                            760 ;	printf_large.c:597: OUTPUT_CHAR(c, p);
   02F3 8A 82               761 	mov	dpl,r2
   02F5 C0 02               762 	push	ar2
   02F7 12s00r00            763 	lcall	__output_char
                            764 ;	printf_large.c:598: OUTPUT_CHAR(':', p);
   02FA 75 82 3A            765 	mov	dpl,#0x3A
   02FD 12s00r00            766 	lcall	__output_char
                            767 ;	printf_large.c:599: OUTPUT_CHAR('0', p);
   0300 75 82 30            768 	mov	dpl,#0x30
   0303 12s00r00            769 	lcall	__output_char
                            770 ;	printf_large.c:600: OUTPUT_CHAR('x', p);
   0306 75 82 78            771 	mov	dpl,#0x78
   0309 12s00r00            772 	lcall	__output_char
   030C D0 02               773 	pop	ar2
                            774 ;	printf_large.c:601: if ((c != 'I' /* idata */) &&
   030E BA 49 02            775 	cjne	r2,#0x49,00378$
   0311 80 0B               776 	sjmp	00159$
   0313                     777 00378$:
                            778 ;	printf_large.c:602: (c != 'P' /* pdata */))
   0313 BA 50 02            779 	cjne	r2,#0x50,00379$
   0316 80 06               780 	sjmp	00159$
   0318                     781 00379$:
                            782 ;	printf_large.c:604: OUTPUT_2DIGITS( value.byte[1] );
   0318 85*06 82            783 	mov	dpl,(_value + 0x0001)
   031B 12s00r3F            784 	lcall	_output_2digits
   031E                     785 00159$:
                            786 ;	printf_large.c:606: OUTPUT_2DIGITS( value.byte[0] );
   031E 85*05 82            787 	mov	dpl,_value
   0321 12s00r3F            788 	lcall	_output_2digits
                            789 ;	printf_large.c:613: break;
                            790 ;	printf_large.c:616: case 'I':
   0324 80 23               791 	sjmp	00168$
   0326                     792 00162$:
                            793 ;	printf_large.c:617: signed_argument = 1;
   0326 D2*05               794 	setb	__print_format_signed_argument_1_1
                            795 ;	printf_large.c:618: radix = 10;
   0328 75*13 0A            796 	mov	__print_format_radix_1_1,#0x0A
                            797 ;	printf_large.c:619: break;
                            798 ;	printf_large.c:621: case 'O':
   032B 80 1C               799 	sjmp	00168$
   032D                     800 00163$:
                            801 ;	printf_large.c:622: radix = 8;
   032D 75*13 08            802 	mov	__print_format_radix_1_1,#0x08
                            803 ;	printf_large.c:623: break;
                            804 ;	printf_large.c:625: case 'U':
   0330 80 17               805 	sjmp	00168$
   0332                     806 00164$:
                            807 ;	printf_large.c:626: radix = 10;
   0332 75*13 0A            808 	mov	__print_format_radix_1_1,#0x0A
                            809 ;	printf_large.c:627: break;
                            810 ;	printf_large.c:629: case 'X':
   0335 80 12               811 	sjmp	00168$
   0337                     812 00165$:
                            813 ;	printf_large.c:630: radix = 16;
   0337 75*13 10            814 	mov	__print_format_radix_1_1,#0x10
                            815 ;	printf_large.c:631: break;
                            816 ;	printf_large.c:633: case 'F':
   033A 80 0D               817 	sjmp	00168$
   033C                     818 00166$:
                            819 ;	printf_large.c:634: float_argument=1;
   033C D2*08               820 	setb	__print_format_float_argument_1_1
                            821 ;	printf_large.c:635: break;
                            822 ;	printf_large.c:637: default:
   033E 80 09               823 	sjmp	00168$
   0340                     824 00167$:
                            825 ;	printf_large.c:639: OUTPUT_CHAR( c, p );
   0340 8A 82               826 	mov	dpl,r2
   0342 12s00r00            827 	lcall	__output_char
                            828 ;	printf_large.c:816: return charsOutputted;
                            829 ;	printf_large.c:641: }
   0345 80 02               830 	sjmp	00168$
   0347                     831 00323$:
   0347 8C*14               832 	mov	__print_format_width_1_1,r4
   0349                     833 00168$:
                            834 ;	printf_large.c:643: if (float_argument) {
   0349 30*08 5A            835 	jnb	__print_format_float_argument_1_1,00234$
                            836 ;	printf_large.c:644: value.f=va_arg(ap,float);
   034C E5*12               837 	mov	a,__print_format_PARM_4
   034E 24 FC               838 	add	a,#0xfc
   0350 F8                  839 	mov	r0,a
   0351 88*12               840 	mov	__print_format_PARM_4,r0
   0353 86 04               841 	mov	ar4,@r0
   0355 08                  842 	inc	r0
   0356 86 05               843 	mov	ar5,@r0
   0358 08                  844 	inc	r0
   0359 86 06               845 	mov	ar6,@r0
   035B 08                  846 	inc	r0
   035C 86 07               847 	mov	ar7,@r0
   035E 18                  848 	dec	r0
   035F 18                  849 	dec	r0
   0360 18                  850 	dec	r0
   0361 8C*05               851 	mov	_value,r4
   0363 8D*06               852 	mov	(_value + 1),r5
   0365 8E*07               853 	mov	(_value + 2),r6
   0367 8F*08               854 	mov	(_value + 3),r7
                            855 ;	printf_large.c:646: PTR="<NO FLOAT>";
   0369 75*05r00            856 	mov	_value,#__str_0
   036C 75*06s00            857 	mov	(_value + 1),#(__str_0 >> 8)
   036F 75*07 80            858 	mov	(_value + 2),#0x80
                            859 ;	printf_large.c:647: while (c=*PTR++)
   0372                     860 00169$:
   0372 85*05*16            861 	mov	__print_format_sloc0_1_0,_value
   0375 85*06*17            862 	mov	(__print_format_sloc0_1_0 + 1),(_value + 1)
   0378 85*07*18            863 	mov	(__print_format_sloc0_1_0 + 2),(_value + 2)
   037B 74 01               864 	mov	a,#0x01
   037D 25*16               865 	add	a,__print_format_sloc0_1_0
   037F FF                  866 	mov	r7,a
   0380 E4                  867 	clr	a
   0381 35*17               868 	addc	a,(__print_format_sloc0_1_0 + 1)
   0383 FC                  869 	mov	r4,a
   0384 AD*18               870 	mov	r5,(__print_format_sloc0_1_0 + 2)
   0386 8F*05               871 	mov	_value,r7
   0388 8C*06               872 	mov	(_value + 1),r4
   038A 8D*07               873 	mov	(_value + 2),r5
   038C 85*16 82            874 	mov	dpl,__print_format_sloc0_1_0
   038F 85*17 83            875 	mov	dph,(__print_format_sloc0_1_0 + 1)
   0392 85*18 F0            876 	mov	b,(__print_format_sloc0_1_0 + 2)
   0395 12s00r00            877 	lcall	__gptrget
   0398 FC                  878 	mov	r4,a
   0399 FA                  879 	mov	r2,a
   039A 70 03               880 	jnz	00381$
   039C 02s00rAC            881 	ljmp	00239$
   039F                     882 00381$:
                            883 ;	printf_large.c:649: OUTPUT_CHAR (c, p);
   039F 8A 82               884 	mov	dpl,r2
   03A1 12s00r00            885 	lcall	__output_char
   03A4 80 CC               886 	sjmp	00169$
   03A6                     887 00234$:
                            888 ;	printf_large.c:666: } else if (radix != 0)
   03A6 E5*13               889 	mov	a,__print_format_radix_1_1
   03A8 70 03               890 	jnz	00382$
   03AA 02s00rAC            891 	ljmp	00239$
   03AD                     892 00382$:
                            893 ;	printf_large.c:671: unsigned char MEM_SPACE_BUF_PP *pstore = &store[5];
   03AD 75*15r05            894 	mov	__print_format_pstore_4_22,#(__print_format_store_4_22 + 0x0005)
                            895 ;	printf_large.c:674: if (char_argument)
   03B0 30*06 2B            896 	jnb	__print_format_char_argument_1_1,00180$
                            897 ;	printf_large.c:676: value.l = va_arg(ap,char);
   03B3 E5*12               898 	mov	a,__print_format_PARM_4
   03B5 14                  899 	dec	a
   03B6 F8                  900 	mov	r0,a
   03B7 88*12               901 	mov	__print_format_PARM_4,r0
   03B9 E6                  902 	mov	a,@r0
   03BA FD                  903 	mov	r5,a
   03BB 33                  904 	rlc	a
   03BC 95 E0               905 	subb	a,acc
   03BE FE                  906 	mov	r6,a
   03BF FF                  907 	mov	r7,a
   03C0 FC                  908 	mov	r4,a
   03C1 8D*05               909 	mov	_value,r5
   03C3 8E*06               910 	mov	(_value + 1),r6
   03C5 8F*07               911 	mov	(_value + 2),r7
   03C7 8C*08               912 	mov	(_value + 3),r4
                            913 ;	printf_large.c:677: if (!signed_argument)
   03C9 20*05 5E            914 	jb	__print_format_signed_argument_1_1,00181$
                            915 ;	printf_large.c:679: value.l &= 0xFF;
   03CC AC*05               916 	mov	r4,_value
   03CE 7D 00               917 	mov	r5,#0x00
   03D0 7E 00               918 	mov	r6,#0x00
   03D2 7F 00               919 	mov	r7,#0x00
   03D4 8C*05               920 	mov	_value,r4
   03D6 8D*06               921 	mov	(_value + 1),r5
   03D8 8E*07               922 	mov	(_value + 2),r6
   03DA 8F*08               923 	mov	(_value + 3),r7
   03DC 80 4C               924 	sjmp	00181$
   03DE                     925 00180$:
                            926 ;	printf_large.c:682: else if (long_argument)
   03DE 30*07 1F            927 	jnb	__print_format_long_argument_1_1,00177$
                            928 ;	printf_large.c:684: value.l = va_arg(ap,long);
   03E1 E5*12               929 	mov	a,__print_format_PARM_4
   03E3 24 FC               930 	add	a,#0xfc
   03E5 F8                  931 	mov	r0,a
   03E6 88*12               932 	mov	__print_format_PARM_4,r0
   03E8 86 04               933 	mov	ar4,@r0
   03EA 08                  934 	inc	r0
   03EB 86 05               935 	mov	ar5,@r0
   03ED 08                  936 	inc	r0
   03EE 86 06               937 	mov	ar6,@r0
   03F0 08                  938 	inc	r0
   03F1 86 07               939 	mov	ar7,@r0
   03F3 18                  940 	dec	r0
   03F4 18                  941 	dec	r0
   03F5 18                  942 	dec	r0
   03F6 8C*05               943 	mov	_value,r4
   03F8 8D*06               944 	mov	(_value + 1),r5
   03FA 8E*07               945 	mov	(_value + 2),r6
   03FC 8F*08               946 	mov	(_value + 3),r7
   03FE 80 2A               947 	sjmp	00181$
   0400                     948 00177$:
                            949 ;	printf_large.c:688: value.l = va_arg(ap,int);
   0400 E5*12               950 	mov	a,__print_format_PARM_4
   0402 24 FE               951 	add	a,#0xfe
   0404 F8                  952 	mov	r0,a
   0405 88*12               953 	mov	__print_format_PARM_4,r0
   0407 86 04               954 	mov	ar4,@r0
   0409 08                  955 	inc	r0
   040A 86 05               956 	mov	ar5,@r0
   040C 18                  957 	dec	r0
   040D ED                  958 	mov	a,r5
   040E 33                  959 	rlc	a
   040F 95 E0               960 	subb	a,acc
   0411 FE                  961 	mov	r6,a
   0412 FF                  962 	mov	r7,a
   0413 8C*05               963 	mov	_value,r4
   0415 8D*06               964 	mov	(_value + 1),r5
   0417 8E*07               965 	mov	(_value + 2),r6
   0419 8F*08               966 	mov	(_value + 3),r7
                            967 ;	printf_large.c:689: if (!signed_argument)
   041B 20*05 0C            968 	jb	__print_format_signed_argument_1_1,00181$
                            969 ;	printf_large.c:691: value.l &= 0xFFFF;
   041E AC*05               970 	mov	r4,_value
   0420 AD*06               971 	mov	r5,(_value + 1)
   0422 7E 00               972 	mov	r6,#0x00
   0424 7F 00               973 	mov	r7,#0x00
   0426 8E*07               974 	mov	(_value + 2),r6
   0428 8F*08               975 	mov	(_value + 3),r7
   042A                     976 00181$:
                            977 ;	printf_large.c:695: if ( signed_argument )
   042A 30*05 25            978 	jnb	__print_format_signed_argument_1_1,00186$
                            979 ;	printf_large.c:697: if (value.l < 0)
   042D AC*05               980 	mov	r4,_value
   042F AD*06               981 	mov	r5,(_value + 1)
   0431 AE*07               982 	mov	r6,(_value + 2)
   0433 E5*08               983 	mov	a,(_value + 3)
   0435 FF                  984 	mov	r7,a
   0436 30 E7 17            985 	jnb	acc.7,00183$
                            986 ;	printf_large.c:698: value.l = -value.l;
   0439 C3                  987 	clr	c
   043A E4                  988 	clr	a
   043B 9C                  989 	subb	a,r4
   043C FC                  990 	mov	r4,a
   043D E4                  991 	clr	a
   043E 9D                  992 	subb	a,r5
   043F FD                  993 	mov	r5,a
   0440 E4                  994 	clr	a
   0441 9E                  995 	subb	a,r6
   0442 FE                  996 	mov	r6,a
   0443 E4                  997 	clr	a
   0444 9F                  998 	subb	a,r7
   0445 FF                  999 	mov	r7,a
   0446 8C*05              1000 	mov	_value,r4
   0448 8D*06              1001 	mov	(_value + 1),r5
   044A 8E*07              1002 	mov	(_value + 2),r6
   044C 8F*08              1003 	mov	(_value + 3),r7
   044E 80 02              1004 	sjmp	00186$
   0450                    1005 00183$:
                           1006 ;	printf_large.c:700: signed_argument = 0;
   0450 C2*05              1007 	clr	__print_format_signed_argument_1_1
   0452                    1008 00186$:
                           1009 ;	printf_large.c:704: lsd = 1;
   0452 D2*09              1010 	setb	__print_format_lsd_1_1
                           1011 ;	printf_large.c:706: do {
   0454 A8*15              1012 	mov	r0,__print_format_pstore_4_22
   0456 7C 00              1013 	mov	r4,#0x00
   0458                    1014 00190$:
                           1015 ;	printf_large.c:707: value.byte[4] = 0;
   0458 75*09 00           1016 	mov	(_value + 0x0004),#0x00
                           1017 ;	printf_large.c:711: calculate_digit(radix);
   045B 85*13 82           1018 	mov	dpl,__print_format_radix_1_1
   045E C0 04              1019 	push	ar4
   0460 C0 00              1020 	push	ar0
   0462 12s00r56           1021 	lcall	_calculate_digit
   0465 D0 00              1022 	pop	ar0
   0467 D0 04              1023 	pop	ar4
                           1024 ;	printf_large.c:713: if (!lsd)
   0469 20*09 0D           1025 	jb	__print_format_lsd_1_1,00188$
                           1026 ;	printf_large.c:715: *pstore = (value.byte[4] << 4) | (value.byte[4] >> 4) | *pstore;
   046C E5*09              1027 	mov	a,(_value + 0x0004)
   046E C4                 1028 	swap	a
   046F FD                 1029 	mov	r5,a
   0470 E6                 1030 	mov	a,@r0
   0471 FE                 1031 	mov	r6,a
   0472 4D                 1032 	orl	a,r5
   0473 F6                 1033 	mov	@r0,a
                           1034 ;	printf_large.c:716: pstore--;
   0474 18                 1035 	dec	r0
   0475 88*15              1036 	mov	__print_format_pstore_4_22,r0
   0477 80 02              1037 	sjmp	00189$
   0479                    1038 00188$:
                           1039 ;	printf_large.c:720: *pstore = value.byte[4];
   0479 A6*09              1040 	mov	@r0,(_value + 0x0004)
   047B                    1041 00189$:
                           1042 ;	printf_large.c:722: length++;
   047B 0C                 1043 	inc	r4
   047C 8C 03              1044 	mov	ar3,r4
                           1045 ;	printf_large.c:723: lsd = !lsd;
   047E B2*09              1046 	cpl	__print_format_lsd_1_1
                           1047 ;	printf_large.c:724: } while( value.ul );
   0480 E5*05              1048 	mov	a,_value
   0482 45*06              1049 	orl	a,(_value + 1)
   0484 45*07              1050 	orl	a,(_value + 2)
   0486 45*08              1051 	orl	a,(_value + 3)
   0488 70 CE              1052 	jnz	00190$
                           1053 ;	printf_large.c:726: if (width == 0)
   048A 88*15              1054 	mov	__print_format_pstore_4_22,r0
   048C 8C 03              1055 	mov	ar3,r4
   048E E5*14              1056 	mov	a,__print_format_width_1_1
   0490 70 03              1057 	jnz	00194$
                           1058 ;	printf_large.c:731: width=1;
   0492 75*14 01           1059 	mov	__print_format_width_1_1,#0x01
   0495                    1060 00194$:
                           1061 ;	printf_large.c:735: if (!zero_padding && !left_justify)
   0495 20*02 24           1062 	jb	__print_format_zero_padding_1_1,00199$
   0498 20*01 21           1063 	jb	__print_format_left_justify_1_1,00199$
                           1064 ;	printf_large.c:737: while ( width > (unsigned char) (length+1) )
   049B EB                 1065 	mov	a,r3
   049C 04                 1066 	inc	a
   049D FC                 1067 	mov	r4,a
   049E AD*14              1068 	mov	r5,__print_format_width_1_1
   04A0                    1069 00195$:
   04A0 C3                 1070 	clr	c
   04A1 EC                 1071 	mov	a,r4
   04A2 9D                 1072 	subb	a,r5
   04A3 50 15              1073 	jnc	00325$
                           1074 ;	printf_large.c:739: OUTPUT_CHAR( ' ', p );
   04A5 75 82 20           1075 	mov	dpl,#0x20
   04A8 C0 03              1076 	push	ar3
   04AA C0 04              1077 	push	ar4
   04AC C0 05              1078 	push	ar5
   04AE 12s00r00           1079 	lcall	__output_char
   04B1 D0 05              1080 	pop	ar5
   04B3 D0 04              1081 	pop	ar4
   04B5 D0 03              1082 	pop	ar3
                           1083 ;	printf_large.c:740: width--;
   04B7 1D                 1084 	dec	r5
   04B8 80 E6              1085 	sjmp	00195$
   04BA                    1086 00325$:
   04BA 8D*14              1087 	mov	__print_format_width_1_1,r5
   04BC                    1088 00199$:
                           1089 ;	printf_large.c:744: if (signed_argument) // this now means the original value was negative
   04BC 30*05 0E           1090 	jnb	__print_format_signed_argument_1_1,00209$
                           1091 ;	printf_large.c:746: OUTPUT_CHAR( '-', p );
   04BF 75 82 2D           1092 	mov	dpl,#0x2D
   04C2 C0 03              1093 	push	ar3
   04C4 12s00r00           1094 	lcall	__output_char
   04C7 D0 03              1095 	pop	ar3
                           1096 ;	printf_large.c:748: width--;
   04C9 15*14              1097 	dec	__print_format_width_1_1
   04CB 80 23              1098 	sjmp	00210$
   04CD                    1099 00209$:
                           1100 ;	printf_large.c:750: else if (length != 0)
   04CD EB                 1101 	mov	a,r3
   04CE 60 20              1102 	jz	00210$
                           1103 ;	printf_large.c:753: if (prefix_sign)
   04D0 30*03 0E           1104 	jnb	__print_format_prefix_sign_1_1,00204$
                           1105 ;	printf_large.c:755: OUTPUT_CHAR( '+', p );
   04D3 75 82 2B           1106 	mov	dpl,#0x2B
   04D6 C0 03              1107 	push	ar3
   04D8 12s00r00           1108 	lcall	__output_char
   04DB D0 03              1109 	pop	ar3
                           1110 ;	printf_large.c:757: width--;
   04DD 15*14              1111 	dec	__print_format_width_1_1
   04DF 80 0F              1112 	sjmp	00210$
   04E1                    1113 00204$:
                           1114 ;	printf_large.c:759: else if (prefix_space)
   04E1 30*04 0C           1115 	jnb	__print_format_prefix_space_1_1,00210$
                           1116 ;	printf_large.c:761: OUTPUT_CHAR( ' ', p );
   04E4 75 82 20           1117 	mov	dpl,#0x20
   04E7 C0 03              1118 	push	ar3
   04E9 12s00r00           1119 	lcall	__output_char
   04EC D0 03              1120 	pop	ar3
                           1121 ;	printf_large.c:763: width--;
   04EE 15*14              1122 	dec	__print_format_width_1_1
   04F0                    1123 00210$:
                           1124 ;	printf_large.c:768: if (!left_justify)
   04F0 20*01 24           1125 	jb	__print_format_left_justify_1_1,00218$
                           1126 ;	printf_large.c:769: while ( width-- > length )
   04F3 AC*14              1127 	mov	r4,__print_format_width_1_1
   04F5                    1128 00211$:
   04F5 8C 05              1129 	mov	ar5,r4
   04F7 1C                 1130 	dec	r4
   04F8 8C*14              1131 	mov	__print_format_width_1_1,r4
   04FA C3                 1132 	clr	c
   04FB EB                 1133 	mov	a,r3
   04FC 9D                 1134 	subb	a,r5
   04FD 50 2B              1135 	jnc	00326$
                           1136 ;	printf_large.c:771: OUTPUT_CHAR( zero_padding ? '0' : ' ', p );
   04FF 30*02 04           1137 	jnb	__print_format_zero_padding_1_1,00244$
   0502 7D 30              1138 	mov	r5,#0x30
   0504 80 02              1139 	sjmp	00245$
   0506                    1140 00244$:
   0506 7D 20              1141 	mov	r5,#0x20
   0508                    1142 00245$:
   0508 8D 82              1143 	mov	dpl,r5
   050A C0 03              1144 	push	ar3
   050C C0 04              1145 	push	ar4
   050E 12s00r00           1146 	lcall	__output_char
   0511 D0 04              1147 	pop	ar4
   0513 D0 03              1148 	pop	ar3
   0515 80 DE              1149 	sjmp	00211$
   0517                    1150 00218$:
                           1151 ;	printf_large.c:776: if (width > length)
   0517 C3                 1152 	clr	c
   0518 EB                 1153 	mov	a,r3
   0519 95*14              1154 	subb	a,__print_format_width_1_1
   051B 50 08              1155 	jnc	00215$
                           1156 ;	printf_large.c:777: width -= length;
   051D E5*14              1157 	mov	a,__print_format_width_1_1
   051F C3                 1158 	clr	c
   0520 9B                 1159 	subb	a,r3
   0521 F5*14              1160 	mov	__print_format_width_1_1,a
   0523 80 07              1161 	sjmp	00318$
   0525                    1162 00215$:
                           1163 ;	printf_large.c:779: width = 0;
   0525 75*14 00           1164 	mov	__print_format_width_1_1,#0x00
                           1165 ;	printf_large.c:816: return charsOutputted;
                           1166 ;	printf_large.c:783: while( length-- )
   0528 80 02              1167 	sjmp	00318$
   052A                    1168 00326$:
   052A 8C*14              1169 	mov	__print_format_width_1_1,r4
   052C                    1170 00318$:
   052C A8*15              1171 	mov	r0,__print_format_pstore_4_22
   052E                    1172 00223$:
   052E 8B 04              1173 	mov	ar4,r3
   0530 1B                 1174 	dec	r3
   0531 EC                 1175 	mov	a,r4
   0532 60 26              1176 	jz	00225$
                           1177 ;	printf_large.c:785: lsd = !lsd;
   0534 B2*09              1178 	cpl	__print_format_lsd_1_1
                           1179 ;	printf_large.c:786: if (!lsd)
   0536 20*09 0A           1180 	jb	__print_format_lsd_1_1,00221$
                           1181 ;	printf_large.c:788: pstore++;
   0539 08                 1182 	inc	r0
                           1183 ;	printf_large.c:789: value.byte[4] = *pstore >> 4;
   053A E6                 1184 	mov	a,@r0
   053B C4                 1185 	swap	a
   053C 54 0F              1186 	anl	a,#0x0f
   053E FC                 1187 	mov	r4,a
   053F 8C*09              1188 	mov	(_value + 0x0004),r4
   0541 80 07              1189 	sjmp	00222$
   0543                    1190 00221$:
                           1191 ;	printf_large.c:793: value.byte[4] = *pstore & 0x0F;
   0543 86 04              1192 	mov	ar4,@r0
   0545 74 0F              1193 	mov	a,#0x0F
   0547 5C                 1194 	anl	a,r4
   0548 F5*09              1195 	mov	(_value + 0x0004),a
   054A                    1196 00222$:
                           1197 ;	printf_large.c:799: output_digit( value.byte[4] );
   054A 85*09 82           1198 	mov	dpl,(_value + 0x0004)
   054D C0 03              1199 	push	ar3
   054F C0 00              1200 	push	ar0
   0551 12s00r26           1201 	lcall	_output_digit
   0554 D0 00              1202 	pop	ar0
   0556 D0 03              1203 	pop	ar3
   0558 80 D4              1204 	sjmp	00223$
   055A                    1205 00225$:
                           1206 ;	printf_large.c:802: if (left_justify)
   055A 20*01 03           1207 	jb	__print_format_left_justify_1_1,00405$
   055D 02s00rAC           1208 	ljmp	00239$
   0560                    1209 00405$:
                           1210 ;	printf_large.c:803: while (width-- > 0)
   0560 AB*14              1211 	mov	r3,__print_format_width_1_1
   0562                    1212 00226$:
   0562 8B 04              1213 	mov	ar4,r3
   0564 1B                 1214 	dec	r3
   0565 EC                 1215 	mov	a,r4
   0566 70 03              1216 	jnz	00406$
   0568 02s00rAC           1217 	ljmp	00239$
   056B                    1218 00406$:
                           1219 ;	printf_large.c:805: OUTPUT_CHAR(' ', p);
   056B 75 82 20           1220 	mov	dpl,#0x20
   056E C0 03              1221 	push	ar3
   0570 12s00r00           1222 	lcall	__output_char
   0573 D0 03              1223 	pop	ar3
   0575 80 EB              1224 	sjmp	00226$
   0577                    1225 00237$:
                           1226 ;	printf_large.c:812: OUTPUT_CHAR( c, p );
   0577 8A 82              1227 	mov	dpl,r2
   0579 12s00r00           1228 	lcall	__output_char
   057C 02s00rAC           1229 	ljmp	00239$
   057F                    1230 00241$:
                           1231 ;	printf_large.c:816: return charsOutputted;
   057F 85*0A 82           1232 	mov	dpl,_charsOutputted
   0582 85*0B 83           1233 	mov	dph,(_charsOutputted + 1)
   0585 22                 1234 	ret
                           1235 	.area CSEG    (CODE)
                           1236 	.area CONST   (CODE)
   0000                    1237 __str_0:
   0000 3C 4E 4F 20 46 4C  1238 	.ascii "<NO FLOAT>"
        4F 41 54 3E
   000A 00                 1239 	.db 0x00
                           1240 	.area XINIT   (CODE)
                           1241 	.area CABS    (ABS,CODE)
