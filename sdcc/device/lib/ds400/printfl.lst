                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.4 #5595 (Oct 23 2013) (Mac OS X ppc)
                              4 ; This file was generated Wed Oct 23 12:25:36 2013
                              5 ;--------------------------------------------------------
                              6 	.module printfl
                              7 	.optsdcc -mds400 --model-flat24
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; CPU specific extensions
                             11 ;--------------------------------------------------------
                             12 .flat24 on		; 24 bit flat addressing
                    0084     13 dpl1	=	0x84
                    0085     14 dph1	=	0x85
                    0086     15 dps	=	0x86
                    0093     16 dpx	=	0x93
                    0095     17 dpx1	=	0x95
                    009B     18 esp	=	0x9B
                    009C     19 ap	=	0x9C
                    009C     20 _ap	=	0x9C
                    00D1     21 mcnt0	=	0xD1
                    00D2     22 mcnt1	=	0xD2
                    00D3     23 ma	=	0xD3
                    00D4     24 mb	=	0xD4
                    00D5     25 mc	=	0xD5
                    00D1     26 F1	=	0xD1	; user flag
                             27 ;--------------------------------------------------------
                             28 ; Public variables in this module
                             29 ;--------------------------------------------------------
                             30 	.globl _printf_small
                             31 ;--------------------------------------------------------
                             32 ; special function registers
                             33 ;--------------------------------------------------------
                    0080     34 _P4	=	0x0080
                    0081     35 _SP	=	0x0081
                    0082     36 _DPL	=	0x0082
                    0083     37 _DPH	=	0x0083
                    0084     38 _DPL1	=	0x0084
                    0085     39 _DPH1	=	0x0085
                    0086     40 _DPS	=	0x0086
                    0087     41 _PCON	=	0x0087
                    0088     42 _TCON	=	0x0088
                    0089     43 _TMOD	=	0x0089
                    008A     44 _TL0	=	0x008a
                    008B     45 _TL1	=	0x008b
                    008C     46 _TH0	=	0x008c
                    008D     47 _TH1	=	0x008d
                    008E     48 _CKCON	=	0x008e
                    0090     49 _P1	=	0x0090
                    0091     50 _EXIF	=	0x0091
                    0092     51 _P4CNT	=	0x0092
                    0093     52 _DPX	=	0x0093
                    0095     53 _DPX1	=	0x0095
                    0098     54 _SCON0	=	0x0098
                    0099     55 _SBUF0	=	0x0099
                    009B     56 _ESP	=	0x009b
                    009C     57 _AP	=	0x009c
                    009D     58 _ACON	=	0x009d
                    00A0     59 _P2	=	0x00a0
                    00A1     60 _P5	=	0x00a1
                    00A2     61 _P5CNT	=	0x00a2
                    00A8     62 _IE	=	0x00a8
                    00B0     63 _P3	=	0x00b0
                    00B8     64 _IP	=	0x00b8
                    00C0     65 _SCON1	=	0x00c0
                    00C1     66 _SBUF1	=	0x00c1
                    00C4     67 _PMR	=	0x00c4
                    00C6     68 _MCON	=	0x00c6
                    00C7     69 _TA	=	0x00c7
                    00C8     70 _T2CON	=	0x00c8
                    00C9     71 _T2MOD	=	0x00c9
                    00CA     72 _RCAP2L	=	0x00ca
                    00CA     73 _RTL2	=	0x00ca
                    00CB     74 _RCAP2H	=	0x00cb
                    00CB     75 _RTH2	=	0x00cb
                    00CC     76 _TL2	=	0x00cc
                    00CD     77 _TH2	=	0x00cd
                    00D0     78 _PSW	=	0x00d0
                    00D1     79 _MCNT0	=	0x00d1
                    00D2     80 _MCNT1	=	0x00d2
                    00D3     81 _MA	=	0x00d3
                    00D4     82 _MB	=	0x00d4
                    00D5     83 _MC	=	0x00d5
                    00D8     84 _WDCON	=	0x00d8
                    00E0     85 _ACC	=	0x00e0
                    00E8     86 _EIE	=	0x00e8
                    00EA     87 _MXAX	=	0x00ea
                    00F0     88 _B	=	0x00f0
                    00F8     89 _EIP	=	0x00f8
                    8C8A     90 _TMR0	=	0x8c8a
                    8D8B     91 _TMR1	=	0x8d8b
                    CDCC     92 _TMR2	=	0xcdcc
                    CBCA     93 _RCAP2	=	0xcbca
                             94 ;--------------------------------------------------------
                             95 ; special function bits
                             96 ;--------------------------------------------------------
                    0088     97 _IT0	=	0x0088
                    0089     98 _IE0	=	0x0089
                    008A     99 _IT1	=	0x008a
                    008B    100 _IE1	=	0x008b
                    008C    101 _TR0	=	0x008c
                    008D    102 _TF0	=	0x008d
                    008E    103 _TR1	=	0x008e
                    008F    104 _TF1	=	0x008f
                    0090    105 _T2	=	0x0090
                    0091    106 _T2EX	=	0x0091
                    0092    107 _RXD1	=	0x0092
                    0093    108 _TXD1	=	0x0093
                    0094    109 _INT2	=	0x0094
                    0095    110 _INT3	=	0x0095
                    0096    111 _INT4	=	0x0096
                    0097    112 _INT5	=	0x0097
                    0098    113 _RI_0	=	0x0098
                    0099    114 _TI_0	=	0x0099
                    009A    115 _RB8_0	=	0x009a
                    009B    116 _TB8_0	=	0x009b
                    009C    117 _REN_0	=	0x009c
                    009D    118 _SM2_0	=	0x009d
                    009E    119 _SM1_0	=	0x009e
                    009F    120 _SM0_0	=	0x009f
                    009F    121 _FE_0	=	0x009f
                    00A8    122 _EX0	=	0x00a8
                    00A9    123 _ET0	=	0x00a9
                    00AA    124 _EX1	=	0x00aa
                    00AB    125 _ET1	=	0x00ab
                    00AC    126 _ES0	=	0x00ac
                    00AD    127 _ET2	=	0x00ad
                    00AE    128 _ES1	=	0x00ae
                    00AF    129 _EA	=	0x00af
                    00B0    130 _RXD0	=	0x00b0
                    00B1    131 _TXD0	=	0x00b1
                    00B2    132 _INT0	=	0x00b2
                    00B3    133 _INT1	=	0x00b3
                    00B4    134 _T0	=	0x00b4
                    00B5    135 _T1	=	0x00b5
                    00B6    136 _WR	=	0x00b6
                    00B7    137 _RD	=	0x00b7
                    00B8    138 _PX0	=	0x00b8
                    00B9    139 _PT0	=	0x00b9
                    00BA    140 _PX1	=	0x00ba
                    00BB    141 _PT1	=	0x00bb
                    00BC    142 _PS0	=	0x00bc
                    00BD    143 _PT2	=	0x00bd
                    00BE    144 _PS1	=	0x00be
                    00C0    145 _RI_1	=	0x00c0
                    00C1    146 _TI_1	=	0x00c1
                    00C2    147 _RB8_1	=	0x00c2
                    00C3    148 _TB8_1	=	0x00c3
                    00C4    149 _REN_1	=	0x00c4
                    00C5    150 _SM2_1	=	0x00c5
                    00C6    151 _SM1_1	=	0x00c6
                    00C7    152 _SM0_1	=	0x00c7
                    00C7    153 _FE_1	=	0x00c7
                    00C8    154 _CP_RL	=	0x00c8
                    00C9    155 _C_T	=	0x00c9
                    00CA    156 _TR2	=	0x00ca
                    00CB    157 _EXEN2	=	0x00cb
                    00CC    158 _TCLK	=	0x00cc
                    00CD    159 _RCLK	=	0x00cd
                    00CE    160 _EXF2	=	0x00ce
                    00CF    161 _TF2	=	0x00cf
                    00D0    162 _P	=	0x00d0
                    00D1    163 _F1	=	0x00d1
                    00D2    164 _OV	=	0x00d2
                    00D3    165 _RS0	=	0x00d3
                    00D4    166 _RS1	=	0x00d4
                    00D5    167 _F0	=	0x00d5
                    00D6    168 _AC	=	0x00d6
                    00D7    169 _CY	=	0x00d7
                    00D8    170 _RWT	=	0x00d8
                    00D9    171 _EWT	=	0x00d9
                    00DA    172 _WDRF	=	0x00da
                    00DB    173 _WDIF	=	0x00db
                    00DC    174 _PFI	=	0x00dc
                    00DD    175 _EPFI	=	0x00dd
                    00DE    176 _POR	=	0x00de
                    00DF    177 _SMOD_1	=	0x00df
                    00E8    178 _EX2	=	0x00e8
                    00E9    179 _EX3	=	0x00e9
                    00EA    180 _EX4	=	0x00ea
                    00EB    181 _EX5	=	0x00eb
                    00EC    182 _EWDI	=	0x00ec
                    00ED    183 _C1IE	=	0x00ed
                    00EE    184 _C0IE	=	0x00ee
                    00EF    185 _CANBIE	=	0x00ef
                    00F8    186 _PX2	=	0x00f8
                    00F9    187 _PX3	=	0x00f9
                    00FA    188 _PX4	=	0x00fa
                    00FB    189 _PX5	=	0x00fb
                    00FC    190 _PWDI	=	0x00fc
                    00FD    191 _C1IP	=	0x00fd
                    00FE    192 _C0IP	=	0x00fe
                    00FF    193 _CANBIP	=	0x00ff
                            194 ;--------------------------------------------------------
                            195 ; overlayable register banks
                            196 ;--------------------------------------------------------
                            197 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     198 	.ds 8
                            199 	.area REG_BANK_3	(REL,OVR,DATA)
   0000                     200 	.ds 8
                            201 ;--------------------------------------------------------
                            202 ; internal ram data
                            203 ;--------------------------------------------------------
                            204 	.area DSEG    (DATA)
   0000                     205 _radix:
   0000                     206 	.ds 1
   0001                     207 _str:
   0001                     208 	.ds 4
   0005                     209 _val:
   0005                     210 	.ds 4
                            211 ;--------------------------------------------------------
                            212 ; overlayable items in internal ram 
                            213 ;--------------------------------------------------------
                            214 	.area OSEG    (OVR,DATA)
                            215 ;--------------------------------------------------------
                            216 ; indirectly addressable internal ram data
                            217 ;--------------------------------------------------------
                            218 	.area ISEG    (DATA)
   0000                     219 _printf_small_buffer_4_8:
   0000                     220 	.ds 12
                            221 ;--------------------------------------------------------
                            222 ; absolute internal ram data
                            223 ;--------------------------------------------------------
                            224 	.area IABS    (ABS,DATA)
                            225 	.area IABS    (ABS,DATA)
                            226 ;--------------------------------------------------------
                            227 ; bit data
                            228 ;--------------------------------------------------------
                            229 	.area BSEG    (BIT)
   0000                     230 _long_flag:
   0000                     231 	.ds 1
   0001                     232 _string_flag:
   0001                     233 	.ds 1
   0002                     234 _char_flag:
   0002                     235 	.ds 1
                            236 ;--------------------------------------------------------
                            237 ; paged external ram data
                            238 ;--------------------------------------------------------
                            239 	.area PSEG    (PAG,XDATA)
                            240 ;--------------------------------------------------------
                            241 ; external ram data
                            242 ;--------------------------------------------------------
                            243 	.area XSEG    (XDATA)
                            244 ;--------------------------------------------------------
                            245 ; absolute external ram data
                            246 ;--------------------------------------------------------
                            247 	.area XABS    (ABS,XDATA)
                            248 ;--------------------------------------------------------
                            249 ; external initialized ram data
                            250 ;--------------------------------------------------------
                            251 	.area XISEG   (XDATA)
                            252 ;--------------------------------------------------------
                            253 ; global & static initialisations
                            254 ;--------------------------------------------------------
                            255 	.area HOME    (CODE)
                            256 	.area GSINIT  (CODE)
                            257 	.area GSFINAL (CODE)
                            258 	.area GSINIT  (CODE)
                            259 ;	printfl.c:52: static __bit  long_flag = 0;
                            260 ;	genAssign: resultIsFar = FALSE
   0000 C2*00               261 	clr	_long_flag
                            262 ;	printfl.c:53: static __bit  string_flag =0;
                            263 ;	genAssign: resultIsFar = FALSE
   0002 C2*01               264 	clr	_string_flag
                            265 ;	printfl.c:54: static __bit  char_flag = 0;
                            266 ;	genAssign: resultIsFar = FALSE
   0004 C2*02               267 	clr	_char_flag
                            268 ;--------------------------------------------------------
                            269 ; Home
                            270 ;--------------------------------------------------------
                            271 	.area HOME    (CODE)
                            272 	.area HOME    (CODE)
                            273 ;--------------------------------------------------------
                            274 ; code
                            275 ;--------------------------------------------------------
                            276 	.area CSEG    (CODE)
                            277 ;------------------------------------------------------------
                            278 ;Allocation info for local variables in function 'printf_small'
                            279 ;------------------------------------------------------------
                            280 ;fmt                       Allocated to stack - offset -8
                            281 ;ap                        Allocated to stack - offset 1
                            282 ;stri                      Allocated to registers 
                            283 ;buffer                    Allocated with name '_printf_small_buffer_4_8'
                            284 ;------------------------------------------------------------
                            285 ;	printfl.c:123: void printf_small (char * fmt, ... ) __reentrant
                            286 ;	-----------------------------------------
                            287 ;	 function printf_small
                            288 ;	-----------------------------------------
   0000                     289 _printf_small:
                    0002    290 	ar2 = 0x02
                    0003    291 	ar3 = 0x03
                    0004    292 	ar4 = 0x04
                    0005    293 	ar5 = 0x05
                    0006    294 	ar6 = 0x06
                    0007    295 	ar7 = 0x07
                    0000    296 	ar0 = 0x00
                    0001    297 	ar1 = 0x01
   0000 C0*00               298 	push	_bpx
   0002 C0*01               299 	push	_bpx+1
   0004 85 81*00            300 	mov	_bpx,sp
   0007 85 9B*01            301 	mov	_bpx+1,esp
   000A 53*01 03            302 	anl	_bpx+1,#3
   000D 43*01 DC            303 	orl	_bpx+1,#0xDC
   0010 C0 E0               304 	push	acc
   0012 C0 E0               305 	push	acc
   0014 C0 E0               306 	push	acc
   0016 C0 E0               307 	push	acc
                            308 ;	printfl.c:127: va_start(ap,fmt);
   0018 E5*00               309 	mov	a,_bpx
   001A 24 F8               310 	add	a,#0xF8
   001C F5 F0               311 	mov	b,a
   001E E5*01               312 	mov	a,_bpx+1
   0020 34 FF               313 	addc	a,#0xFF
   0022 AA F0               314 	mov	r2,b
   0024 FB                  315 	mov	r3,a
   0025 7C FF               316 	mov	r4,#0xFF
   0027 75 93 FF            317 	mov	dpx,#0xFF
   002A 85*01 83            318 	mov	dph,_bpx+1
   002D 85*00 82            319 	mov	dpl,_bpx
   0030 A3                  320 	inc	dptr
   0031 EA                  321 	mov	a,r2
   0032 F0                  322 	movx	@dptr,a
   0033 A3                  323 	inc	dptr
   0034 EB                  324 	mov	a,r3
   0035 F0                  325 	movx	@dptr,a
   0036 A3                  326 	inc	dptr
   0037 EC                  327 	mov	a,r4
   0038 F0                  328 	movx	@dptr,a
   0039 A3                  329 	inc	dptr
   003A 74 00               330 	mov	a,#0x0
   003C F0                  331 	movx	@dptr,a
   003D                     332 00130$:
                            333 ;	printfl.c:129: for (; *fmt ; fmt++ ) {
   003D E5*00               334 	mov	a,_bpx
   003F C3                  335 	clr	c
   0040 94 08               336 	subb	a,#0x08
   0042 F5 82               337 	mov	dpl,a
   0044 E5*01               338 	mov	a,_bpx+1
   0046 94 00               339 	subb	a,#0x00
   0048 F5 83               340 	mov	dph,a
   004A 75 93 FF            341 	mov	dpx,#0xFF
                            342 ;	genAssign: resultIsFar = FALSE
   004D E0                  343 	movx	a,@dptr
   004E FE                  344 	mov	r6,a
   004F A3                  345 	inc	dptr
   0050 E0                  346 	movx	a,@dptr
   0051 FF                  347 	mov	r7,a
   0052 A3                  348 	inc	dptr
   0053 E0                  349 	movx	a,@dptr
   0054 FA                  350 	mov	r2,a
   0055 A3                  351 	inc	dptr
   0056 E0                  352 	movx	a,@dptr
   0057 FB                  353 	mov	r3,a
   0058 8E 82               354 	mov	dpl,r6
   005A 8F 83               355 	mov	dph,r7
   005C 8A 93               356 	mov	dpx,r2
   005E 8B F0               357 	mov	b,r3
   0060 12s00r00r00         358 	lcall	__gptrget
   0064 FC                  359 	mov  r4,a
   0065 70 04               360 	jnz	00155$
   0067 02s00r03r5B         361 	ljmp	00134$
   006B                     362 00155$:
                            363 ;	printfl.c:130: if (*fmt == '%') {
   006B EC                  364 	mov	a,r4
   006C B4 25 02            365 	cjne	a,#0x25,00156$
   006F 80 04               366 	sjmp	00157$
   0071                     367 00156$:
   0071 02s00r03r30         368 	ljmp	00128$
   0075                     369 00157$:
                            370 ;	printfl.c:131: long_flag = string_flag = char_flag = 0;
                            371 ;	genAssign: resultIsFar = FALSE
   0075 C2*02               372 	clr	_char_flag
                            373 ;	genAssign: resultIsFar = FALSE
   0077 C2*01               374 	clr	_string_flag
                            375 ;	genAssign: resultIsFar = FALSE
   0079 C2*00               376 	clr	_long_flag
                            377 ;	printfl.c:132: fmt++ ;
   007B E5*00               378 	mov	a,_bpx
   007D C3                  379 	clr	c
   007E 94 08               380 	subb	a,#0x08
   0080 F5 82               381 	mov	dpl,a
   0082 E5*01               382 	mov	a,_bpx+1
   0084 94 00               383 	subb	a,#0x00
   0086 F5 83               384 	mov	dph,a
   0088 75 93 FF            385 	mov	dpx,#0xFF
   008B 74 01               386 	mov	a,#0x01
   008D 2E                  387 	add	a,r6
   008E F0                  388 	movx	@dptr,a
   008F E4                  389 	clr  a
   0090 3F                  390 	addc	a,r7
   0091 A3                  391 	inc	dptr
   0092 F0                  392 	movx	@dptr,a
   0093 E4                  393 	clr  a
   0094 3A                  394 	addc	a,r2
   0095 A3                  395 	inc	dptr
   0096 F0                  396 	movx	@dptr,a
   0097 A3                  397 	inc	dptr
   0098 EB                  398 	mov	a,r3
   0099 F0                  399 	movx	@dptr,a
                            400 ;	printfl.c:133: switch (*fmt) {
   009A E5*00               401 	mov	a,_bpx
   009C C3                  402 	clr	c
   009D 94 08               403 	subb	a,#0x08
   009F F5 82               404 	mov	dpl,a
   00A1 E5*01               405 	mov	a,_bpx+1
   00A3 94 00               406 	subb	a,#0x00
   00A5 F5 83               407 	mov	dph,a
   00A7 75 93 FF            408 	mov	dpx,#0xFF
                            409 ;	genAssign: resultIsFar = FALSE
   00AA E0                  410 	movx	a,@dptr
   00AB FA                  411 	mov	r2,a
   00AC A3                  412 	inc	dptr
   00AD E0                  413 	movx	a,@dptr
   00AE FB                  414 	mov	r3,a
   00AF A3                  415 	inc	dptr
   00B0 E0                  416 	movx	a,@dptr
   00B1 FD                  417 	mov	r5,a
   00B2 A3                  418 	inc	dptr
   00B3 E0                  419 	movx	a,@dptr
   00B4 FE                  420 	mov	r6,a
   00B5 8A 82               421 	mov	dpl,r2
   00B7 8B 83               422 	mov	dph,r3
   00B9 8D 93               423 	mov	dpx,r5
   00BB 8E F0               424 	mov	b,r6
   00BD 12s00r00r00         425 	lcall	__gptrget
   00C1 FF                  426 	mov  r7,a
   00C2 B4 68 02            427 	cjne	a,#0x68,00158$
   00C5 80 27               428 	sjmp 00102$
   00C7                     429 00158$:
   00C7 EF                  430 	mov	a,r7
   00C8 B4 6C 44            431 	cjne a,#0x6C,00103$
   00CB                     432 00160$:
                            433 ;	printfl.c:135: long_flag = 1;
                            434 ;	genAssign: resultIsFar = FALSE
   00CB D2*00               435 	setb	_long_flag
                            436 ;	printfl.c:136: fmt++;
   00CD E5*00               437 	mov	a,_bpx
   00CF C3                  438 	clr	c
   00D0 94 08               439 	subb	a,#0x08
   00D2 F5 82               440 	mov	dpl,a
   00D4 E5*01               441 	mov	a,_bpx+1
   00D6 94 00               442 	subb	a,#0x00
   00D8 F5 83               443 	mov	dph,a
   00DA 75 93 FF            444 	mov	dpx,#0xFF
   00DD 74 01               445 	mov	a,#0x01
   00DF 2A                  446 	add	a,r2
   00E0 F0                  447 	movx	@dptr,a
   00E1 E4                  448 	clr  a
   00E2 3B                  449 	addc	a,r3
   00E3 A3                  450 	inc	dptr
   00E4 F0                  451 	movx	@dptr,a
   00E5 E4                  452 	clr  a
   00E6 3D                  453 	addc	a,r5
   00E7 A3                  454 	inc	dptr
   00E8 F0                  455 	movx	@dptr,a
   00E9 A3                  456 	inc	dptr
   00EA EE                  457 	mov	a,r6
   00EB F0                  458 	movx	@dptr,a
                            459 ;	printfl.c:137: break;
                            460 ;	printfl.c:138: case 'h':
   00EC 80 21               461 	sjmp 00103$
   00EE                     462 00102$:
                            463 ;	printfl.c:139: char_flag = 1;
                            464 ;	genAssign: resultIsFar = FALSE
   00EE D2*02               465 	setb	_char_flag
                            466 ;	printfl.c:140: fmt++;
   00F0 E5*00               467 	mov	a,_bpx
   00F2 C3                  468 	clr	c
   00F3 94 08               469 	subb	a,#0x08
   00F5 F5 82               470 	mov	dpl,a
   00F7 E5*01               471 	mov	a,_bpx+1
   00F9 94 00               472 	subb	a,#0x00
   00FB F5 83               473 	mov	dph,a
   00FD 75 93 FF            474 	mov	dpx,#0xFF
   0100 74 01               475 	mov	a,#0x01
   0102 2A                  476 	add	a,r2
   0103 F0                  477 	movx	@dptr,a
   0104 E4                  478 	clr  a
   0105 3B                  479 	addc	a,r3
   0106 A3                  480 	inc	dptr
   0107 F0                  481 	movx	@dptr,a
   0108 E4                  482 	clr  a
   0109 3D                  483 	addc	a,r5
   010A A3                  484 	inc	dptr
   010B F0                  485 	movx	@dptr,a
   010C A3                  486 	inc	dptr
   010D EE                  487 	mov	a,r6
   010E F0                  488 	movx	@dptr,a
                            489 ;	printfl.c:141: }
   010F                     490 00103$:
                            491 ;	printfl.c:143: switch (*fmt) {
   010F E5*00               492 	mov	a,_bpx
   0111 C3                  493 	clr	c
   0112 94 08               494 	subb	a,#0x08
   0114 F5 82               495 	mov	dpl,a
   0116 E5*01               496 	mov	a,_bpx+1
   0118 94 00               497 	subb	a,#0x00
   011A F5 83               498 	mov	dph,a
   011C 75 93 FF            499 	mov	dpx,#0xFF
                            500 ;	genAssign: resultIsFar = FALSE
   011F E0                  501 	movx	a,@dptr
   0120 FA                  502 	mov	r2,a
   0121 A3                  503 	inc	dptr
   0122 E0                  504 	movx	a,@dptr
   0123 FB                  505 	mov	r3,a
   0124 A3                  506 	inc	dptr
   0125 E0                  507 	movx	a,@dptr
   0126 FD                  508 	mov	r5,a
   0127 A3                  509 	inc	dptr
   0128 E0                  510 	movx	a,@dptr
   0129 FE                  511 	mov	r6,a
   012A 8A 82               512 	mov	dpl,r2
   012C 8B 83               513 	mov	dph,r3
   012E 8D 93               514 	mov	dpx,r5
   0130 8E F0               515 	mov	b,r6
   0132 12s00r00r00         516 	lcall	__gptrget
   0136 FA                  517 	mov  r2,a
   0137 B4 63 02            518 	cjne	a,#0x63,00161$
   013A 80 26               519 	sjmp 00107$
   013C                     520 00161$:
   013C EA                  521 	mov	a,r2
   013D B4 64 02            522 	cjne	a,#0x64,00162$
   0140 80 16               523 	sjmp 00105$
   0142                     524 00162$:
   0142 EA                  525 	mov	a,r2
   0143 B4 6F 02            526 	cjne	a,#0x6F,00163$
   0146 80 1F               527 	sjmp 00108$
   0148                     528 00163$:
   0148 EA                  529 	mov	a,r2
   0149 B4 73 02            530 	cjne	a,#0x73,00164$
   014C 80 06               531 	sjmp 00104$
   014E                     532 00164$:
   014E EA                  533 	mov	a,r2
                            534 ;	printfl.c:144: case 's':
   014F B4 78 18            535 	cjne a,#0x78,00109$
   0152 80 09               536 	sjmp 00106$
   0154                     537 00104$:
                            538 ;	printfl.c:145: string_flag = 1;
                            539 ;	genAssign: resultIsFar = FALSE
   0154 D2*01               540 	setb	_string_flag
                            541 ;	printfl.c:146: break;
                            542 ;	printfl.c:147: case 'd':
   0156 80 12               543 	sjmp 00109$
   0158                     544 00105$:
                            545 ;	printfl.c:148: radix = 10;
                            546 ;	genAssign: resultIsFar = FALSE
   0158 75*00 0A            547 	mov	_radix,#0x0A
                            548 ;	printfl.c:149: break;
                            549 ;	printfl.c:150: case 'x':
   015B 80 0D               550 	sjmp 00109$
   015D                     551 00106$:
                            552 ;	printfl.c:151: radix = 16;
                            553 ;	genAssign: resultIsFar = FALSE
   015D 75*00 10            554 	mov	_radix,#0x10
                            555 ;	printfl.c:152: break;
                            556 ;	printfl.c:153: case 'c':
   0160 80 08               557 	sjmp 00109$
   0162                     558 00107$:
                            559 ;	printfl.c:154: radix = 0;
                            560 ;	genAssign: resultIsFar = FALSE
   0162 75*00 00            561 	mov	_radix,#0x00
                            562 ;	printfl.c:155: break;
                            563 ;	printfl.c:156: case 'o':
   0165 80 03               564 	sjmp 00109$
   0167                     565 00108$:
                            566 ;	printfl.c:157: radix = 8;
                            567 ;	genAssign: resultIsFar = FALSE
   0167 75*00 08            568 	mov	_radix,#0x08
                            569 ;	printfl.c:159: }
   016A                     570 00109$:
                            571 ;	printfl.c:161: if (string_flag) {
   016A 20*01 04            572 	jb	_string_flag,00166$
   016D 02s00r01rFC         573 	ljmp	00114$
   0171                     574 00166$:
                            575 ;	printfl.c:162: str = va_arg(ap, char *);
   0171 75 93 FF            576 	mov	dpx,#0xFF
   0174 85*01 83            577 	mov	dph,_bpx+1
   0177 85*00 82            578 	mov	dpl,_bpx
   017A A3                  579 	inc	dptr
   017B E0                  580 	movx	a,@dptr
   017C 24 FC               581 	add	a,#0xFC
   017E FA                  582 	mov	r2,a
   017F A3                  583 	inc	dptr
   0180 E0                  584 	movx	a,@dptr
   0181 34 FF               585 	addc	a,#0xFF
   0183 FB                  586 	mov	r3,a
   0184 A3                  587 	inc	dptr
   0185 E0                  588 	movx	a,@dptr
   0186 34 FF               589 	addc	a,#0xFF
   0188 FD                  590 	mov	r5,a
   0189 A3                  591 	inc	dptr
   018A E0                  592 	movx	a,@dptr
   018B FE                  593 	mov	r6,a
                            594 ;	genAssign: resultIsFar = TRUE
   018C 75 93 FF            595 	mov	dpx,#0xFF
   018F 85*01 83            596 	mov	dph,_bpx+1
   0192 85*00 82            597 	mov	dpl,_bpx
   0195 A3                  598 	inc	dptr
   0196 EA                  599 	mov	a,r2
   0197 F0                  600 	movx	@dptr,a
   0198 A3                  601 	inc	dptr
   0199 EB                  602 	mov	a,r3
   019A F0                  603 	movx	@dptr,a
   019B A3                  604 	inc	dptr
   019C ED                  605 	mov	a,r5
   019D F0                  606 	movx	@dptr,a
   019E A3                  607 	inc	dptr
   019F EE                  608 	mov	a,r6
   01A0 F0                  609 	movx	@dptr,a
   01A1 8A 82               610 	mov	dpl,r2
   01A3 8B 83               611 	mov	dph,r3
   01A5 8D 93               612 	mov	dpx,r5
   01A7 8E F0               613 	mov	b,r6
   01A9 12s00r00r00         614 	lcall	__gptrgetWord
   01AD F5*01               615 	mov	_str,a
   01AF 85 9C*02            616 	mov	(_str + 1),_ap
   01B2 A3                  617 	inc	dptr
   01B3 12s00r00r00         618 	lcall	__gptrgetWord
   01B7 F5*03               619 	mov	(_str + 2),a
   01B9 85 9C*04            620 	mov	(_str + 3),_ap
                            621 ;	printfl.c:163: while (*str) putchar(*str++);
   01BC                     622 00110$:
                            623 ;	genAssign: resultIsFar = FALSE
   01BC 85*01 82            624 	mov	dpl,_str
   01BF 85*02 83            625 	mov	dph,(_str + 1)
   01C2 85*03 93            626 	mov	dpx,(_str + 2)
   01C5 85*04 F0            627 	mov	b,(_str + 3)
   01C8 12s00r00r00         628 	lcall	__gptrget
   01CC FA                  629 	mov  r2,a
   01CD 70 04               630 	jnz	00167$
   01CF 02s00r03r36         631 	ljmp	00132$
   01D3                     632 00167$:
                            633 ;	genAssign: resultIsFar = FALSE
   01D3 85*01 82            634 	mov	dpl,_str
   01D6 85*02 83            635 	mov	dph,(_str + 1)
   01D9 85*03 93            636 	mov	dpx,(_str + 2)
   01DC 85*04 F0            637 	mov	b,(_str + 3)
   01DF 12s00r00r00         638 	lcall	__gptrget
   01E3 FA                  639 	mov	r2,a
   01E4 74 01               640 	mov	a,#0x01
   01E6 25*01               641 	add	a,_str
   01E8 F5*01               642 	mov	_str,a
   01EA E4                  643 	clr  a
   01EB 35*02               644 	addc	a,(_str + 1)
   01ED F5*02               645 	mov	(_str + 1),a
   01EF E4                  646 	clr  a
   01F0 35*03               647 	addc	a,(_str + 2)
   01F2 F5*03               648 	mov	(_str + 2),a
   01F4 8A 82               649 	mov	dpl,r2
   01F6 12s00r00r00         650 	lcall	_putchar
                            651 ;	printfl.c:164: continue ;
   01FA 80 C0               652 	sjmp 00110$
   01FC                     653 00114$:
                            654 ;	printfl.c:167: if (long_flag)
   01FC 30*00 4F            655 	jnb  _long_flag,00119$
   01FF                     656 00168$:
                            657 ;	printfl.c:168: val = va_arg(ap,long);
   01FF 75 93 FF            658 	mov	dpx,#0xFF
   0202 85*01 83            659 	mov	dph,_bpx+1
   0205 85*00 82            660 	mov	dpl,_bpx
   0208 A3                  661 	inc	dptr
   0209 E0                  662 	movx	a,@dptr
   020A 24 FC               663 	add	a,#0xFC
   020C FA                  664 	mov	r2,a
   020D A3                  665 	inc	dptr
   020E E0                  666 	movx	a,@dptr
   020F 34 FF               667 	addc	a,#0xFF
   0211 FB                  668 	mov	r3,a
   0212 A3                  669 	inc	dptr
   0213 E0                  670 	movx	a,@dptr
   0214 34 FF               671 	addc	a,#0xFF
   0216 FD                  672 	mov	r5,a
   0217 A3                  673 	inc	dptr
   0218 E0                  674 	movx	a,@dptr
   0219 FE                  675 	mov	r6,a
                            676 ;	genAssign: resultIsFar = TRUE
   021A 75 93 FF            677 	mov	dpx,#0xFF
   021D 85*01 83            678 	mov	dph,_bpx+1
   0220 85*00 82            679 	mov	dpl,_bpx
   0223 A3                  680 	inc	dptr
   0224 EA                  681 	mov	a,r2
   0225 F0                  682 	movx	@dptr,a
   0226 A3                  683 	inc	dptr
   0227 EB                  684 	mov	a,r3
   0228 F0                  685 	movx	@dptr,a
   0229 A3                  686 	inc	dptr
   022A ED                  687 	mov	a,r5
   022B F0                  688 	movx	@dptr,a
   022C A3                  689 	inc	dptr
   022D EE                  690 	mov	a,r6
   022E F0                  691 	movx	@dptr,a
   022F 8A 82               692 	mov	dpl,r2
   0231 8B 83               693 	mov	dph,r3
   0233 8D 93               694 	mov	dpx,r5
   0235 8E F0               695 	mov	b,r6
   0237 12s00r00r00         696 	lcall	__gptrgetWord
   023B F5*05               697 	mov	_val,a
   023D 85 9C*06            698 	mov	(_val + 1),_ap
   0240 A3                  699 	inc	dptr
   0241 12s00r00r00         700 	lcall	__gptrgetWord
   0245 F5*07               701 	mov	(_val + 2),a
   0247 85 9C*08            702 	mov	(_val + 3),_ap
   024A 02s00r02rE6         703 	ljmp	00120$
   024E                     704 00119$:
                            705 ;	printfl.c:170: if (char_flag)
   024E 30*02 4A            706 	jnb  _char_flag,00116$
   0251                     707 00169$:
                            708 ;	printfl.c:171: val = va_arg(ap,char);
   0251 75 93 FF            709 	mov	dpx,#0xFF
   0254 85*01 83            710 	mov	dph,_bpx+1
   0257 85*00 82            711 	mov	dpl,_bpx
   025A A3                  712 	inc	dptr
   025B E0                  713 	movx	a,@dptr
   025C 24 FF               714 	add	a,#0xFF
   025E FA                  715 	mov	r2,a
   025F A3                  716 	inc	dptr
   0260 E0                  717 	movx	a,@dptr
   0261 34 FF               718 	addc	a,#0xFF
   0263 FB                  719 	mov	r3,a
   0264 A3                  720 	inc	dptr
   0265 E0                  721 	movx	a,@dptr
   0266 34 FF               722 	addc	a,#0xFF
   0268 FD                  723 	mov	r5,a
   0269 A3                  724 	inc	dptr
   026A E0                  725 	movx	a,@dptr
   026B FE                  726 	mov	r6,a
                            727 ;	genAssign: resultIsFar = TRUE
   026C 75 93 FF            728 	mov	dpx,#0xFF
   026F 85*01 83            729 	mov	dph,_bpx+1
   0272 85*00 82            730 	mov	dpl,_bpx
   0275 A3                  731 	inc	dptr
   0276 EA                  732 	mov	a,r2
   0277 F0                  733 	movx	@dptr,a
   0278 A3                  734 	inc	dptr
   0279 EB                  735 	mov	a,r3
   027A F0                  736 	movx	@dptr,a
   027B A3                  737 	inc	dptr
   027C ED                  738 	mov	a,r5
   027D F0                  739 	movx	@dptr,a
   027E A3                  740 	inc	dptr
   027F EE                  741 	mov	a,r6
   0280 F0                  742 	movx	@dptr,a
   0281 8A 82               743 	mov	dpl,r2
   0283 8B 83               744 	mov	dph,r3
   0285 8D 93               745 	mov	dpx,r5
   0287 8E F0               746 	mov	b,r6
   0289 12s00r00r00         747 	lcall	__gptrget
   028D FA                  748 	mov  r2,a
   028E 8A*05               749 	mov  _val,r2 
   0290 33                  750 	rlc	a
   0291 95 E0               751 	subb	a,acc
   0293 F5*06               752 	mov	(_val + 1),a
   0295 F5*07               753 	mov	(_val + 2),a
   0297 F5*08               754 	mov	(_val + 3),a
   0299 80 4B               755 	sjmp 00120$
   029B                     756 00116$:
                            757 ;	printfl.c:173: val = va_arg(ap,int);
   029B 75 93 FF            758 	mov	dpx,#0xFF
   029E 85*01 83            759 	mov	dph,_bpx+1
   02A1 85*00 82            760 	mov	dpl,_bpx
   02A4 A3                  761 	inc	dptr
   02A5 E0                  762 	movx	a,@dptr
   02A6 24 FE               763 	add	a,#0xFE
   02A8 FA                  764 	mov	r2,a
   02A9 A3                  765 	inc	dptr
   02AA E0                  766 	movx	a,@dptr
   02AB 34 FF               767 	addc	a,#0xFF
   02AD FB                  768 	mov	r3,a
   02AE A3                  769 	inc	dptr
   02AF E0                  770 	movx	a,@dptr
   02B0 34 FF               771 	addc	a,#0xFF
   02B2 FD                  772 	mov	r5,a
   02B3 A3                  773 	inc	dptr
   02B4 E0                  774 	movx	a,@dptr
   02B5 FE                  775 	mov	r6,a
                            776 ;	genAssign: resultIsFar = TRUE
   02B6 75 93 FF            777 	mov	dpx,#0xFF
   02B9 85*01 83            778 	mov	dph,_bpx+1
   02BC 85*00 82            779 	mov	dpl,_bpx
   02BF A3                  780 	inc	dptr
   02C0 EA                  781 	mov	a,r2
   02C1 F0                  782 	movx	@dptr,a
   02C2 A3                  783 	inc	dptr
   02C3 EB                  784 	mov	a,r3
   02C4 F0                  785 	movx	@dptr,a
   02C5 A3                  786 	inc	dptr
   02C6 ED                  787 	mov	a,r5
   02C7 F0                  788 	movx	@dptr,a
   02C8 A3                  789 	inc	dptr
   02C9 EE                  790 	mov	a,r6
   02CA F0                  791 	movx	@dptr,a
   02CB 8A 82               792 	mov	dpl,r2
   02CD 8B 83               793 	mov	dph,r3
   02CF 8D 93               794 	mov	dpx,r5
   02D1 8E F0               795 	mov	b,r6
   02D3 12s00r00r00         796 	lcall	__gptrgetWord
   02D7 FA                  797 	mov	r2,a
   02D8 AB 9C               798 	mov	r3,_ap
   02DA 8A*05               799 	mov	_val,r2
   02DC 8B*06               800 	mov	(_val + 1),r3
   02DE EB                  801 	mov	a,r3
   02DF 33                  802 	rlc	a
   02E0 95 E0               803 	subb	a,acc
   02E2 F5*07               804 	mov	(_val + 2),a
   02E4 F5*08               805 	mov	(_val + 3),a
   02E6                     806 00120$:
                            807 ;	printfl.c:178: if (radix)
   02E6 E5*00               808 	mov	a,_radix
   02E8 60 3C               809 	jz  00125$
   02EA                     810 00170$:
                            811 ;	printfl.c:183: _ltoa (val, buffer, radix);
   02EA 90s00r00r00         812 	mov	dptr,#__ltoa_PARM_2
   02EE 74r00               813 	mov	a,#_printf_small_buffer_4_8
   02F0 F0                  814 	movx	@dptr,a
   02F1 A3                  815 	inc	dptr
   02F2 E4                  816 	clr	a
   02F3 F0                  817 	movx	@dptr,a
   02F4 A3                  818 	inc	dptr
   02F5 E4                  819 	clr	a
   02F6 F0                  820 	movx	@dptr,a
   02F7 A3                  821 	inc	dptr
   02F8 74 40               822 	mov	a,#0x40
   02FA F0                  823 	movx	@dptr,a
                            824 ;	genAssign: resultIsFar = TRUE
   02FB 90s00r00r00         825 	mov	dptr,#__ltoa_PARM_3
   02FF E5*00               826 	mov	a,_radix
   0301 F0                  827 	movx	@dptr,a
   0302 85*05 82            828 	mov	dpl,_val
   0305 85*06 83            829 	mov	dph,(_val + 1)
   0308 85*07 93            830 	mov	dpx,(_val + 2)
   030B 85*08 F0            831 	mov	b,(_val + 3)
   030E 12s00r00r00         832 	lcall	__ltoa
                            833 ;	printfl.c:184: stri = buffer;
                            834 ;	printfl.c:185: while (*stri)
                            835 ;	genAssign: resultIsFar = FALSE
   0312 78r00               836 	mov	r0,#_printf_small_buffer_4_8
   0314                     837 00121$:
   0314 86 02               838 	mov	ar2,@r0
   0316 EA                  839 	mov	a,r2
   0317 60 1D               840 	jz  00132$
   0319                     841 00171$:
                            842 ;	printfl.c:187: putchar (*stri);
   0319 C0 00               843 	push	ar0
   031B 8A 82               844 	mov	dpl,r2
   031D 12s00r00r00         845 	lcall	_putchar
   0321 D0 00               846 	pop	ar0
                            847 ;	printfl.c:188: stri++;
   0323 08                  848 	inc	r0
   0324 80 EE               849 	sjmp 00121$
   0326                     850 00125$:
                            851 ;	printfl.c:193: putchar((char)val);
   0326 AA*05               852 	mov	r2,_val
   0328 8A 82               853 	mov	dpl,r2
   032A 12s00r00r00         854 	lcall	_putchar
   032E 80 06               855 	sjmp 00132$
   0330                     856 00128$:
                            857 ;	printfl.c:196: putchar(*fmt);
   0330 8C 82               858 	mov	dpl,r4
   0332 12s00r00r00         859 	lcall	_putchar
   0336                     860 00132$:
                            861 ;	printfl.c:129: for (; *fmt ; fmt++ ) {
   0336 E5*00               862 	mov	a,_bpx
   0338 C3                  863 	clr	c
   0339 94 08               864 	subb	a,#0x08
   033B F5 82               865 	mov	dpl,a
   033D E5*01               866 	mov	a,_bpx+1
   033F 94 00               867 	subb	a,#0x00
   0341 F5 83               868 	mov	dph,a
   0343 75 93 FF            869 	mov	dpx,#0xFF
   0346 E0                  870 	movx	a,@dptr
   0347 24 01               871 	add	a,#0x01
   0349 F0                  872 	movx	@dptr,a
   034A A3                  873 	inc	dptr
   034B E0                  874 	movx	a,@dptr
   034C 34 00               875 	addc	a,#0x00
   034E F0                  876 	movx	@dptr,a
   034F A3                  877 	inc	dptr
   0350 E0                  878 	movx	a,@dptr
   0351 34 00               879 	addc	a,#0x00
   0353 F0                  880 	movx	@dptr,a
   0354 A3                  881 	inc	dptr
   0355 E0                  882 	movx	a,@dptr
   0356 F0                  883 	movx	@dptr,a
   0357 02s00r00r3D         884 	ljmp	00130$
   035B                     885 00134$:
   035B 85*00 81            886 	mov	sp,_bpx
   035E 85*01 9B            887 	mov	esp,_bpx+1
   0361 D0*01               888 	pop	_bpx+1
   0363 D0*00               889 	pop	_bpx
   0365 22                  890 	ret
                            891 	.area CSEG    (CODE)
                            892 	.area CONST   (CODE)
                            893 	.area XINIT   (CODE)
                            894 	.area CABS    (ABS,CODE)
