                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.4 #5595 (Oct 23 2013) (Mac OS X ppc)
                              4 ; This file was generated Wed Oct 23 12:25:31 2013
                              5 ;--------------------------------------------------------
                              6 	.module printfl
                              7 	.optsdcc -mds390 --model-flat24
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; CPU specific extensions
                             11 ;--------------------------------------------------------
                             12 .flat24 on		; 24 bit flat addressing
                    0084     13 dpl1	=	0x84
                    0085     14 dph1	=	0x85
                    0086     15 dps	=	0x86
                    0093     16 dpx	=	0x93
                    0095     17 dpx1	=	0x95
                    009B     18 esp	=	0x9B
                    009C     19 ap	=	0x9C
                    009C     20 _ap	=	0x9C
                    00D1     21 mcnt0	=	0xD1
                    00D2     22 mcnt1	=	0xD2
                    00D3     23 ma	=	0xD3
                    00D4     24 mb	=	0xD4
                    00D5     25 mc	=	0xD5
                    00D1     26 F1	=	0xD1	; user flag
                             27 ;--------------------------------------------------------
                             28 ; Public variables in this module
                             29 ;--------------------------------------------------------
                             30 	.globl _printf_small
                             31 ;--------------------------------------------------------
                             32 ; special function registers
                             33 ;--------------------------------------------------------
                    0080     34 _P4	=	0x0080
                    0081     35 _SP	=	0x0081
                    0082     36 _DPL	=	0x0082
                    0083     37 _DPH	=	0x0083
                    0084     38 _DPL1	=	0x0084
                    0085     39 _DPH1	=	0x0085
                    0086     40 _DPS	=	0x0086
                    0087     41 _PCON	=	0x0087
                    0088     42 _TCON	=	0x0088
                    0089     43 _TMOD	=	0x0089
                    008A     44 _TL0	=	0x008a
                    008B     45 _TL1	=	0x008b
                    008C     46 _TH0	=	0x008c
                    008D     47 _TH1	=	0x008d
                    008E     48 _CKCON	=	0x008e
                    0090     49 _P1	=	0x0090
                    0091     50 _EXIF	=	0x0091
                    0092     51 _P4CNT	=	0x0092
                    0093     52 _DPX	=	0x0093
                    0095     53 _DPX1	=	0x0095
                    0098     54 _SCON0	=	0x0098
                    0099     55 _SBUF0	=	0x0099
                    009B     56 _ESP	=	0x009b
                    009C     57 _AP	=	0x009c
                    009D     58 _ACON	=	0x009d
                    00A0     59 _P2	=	0x00a0
                    00A1     60 _P5	=	0x00a1
                    00A2     61 _P5CNT	=	0x00a2
                    00A8     62 _IE	=	0x00a8
                    00B0     63 _P3	=	0x00b0
                    00B8     64 _IP	=	0x00b8
                    00C0     65 _SCON1	=	0x00c0
                    00C1     66 _SBUF1	=	0x00c1
                    00C4     67 _PMR	=	0x00c4
                    00C6     68 _MCON	=	0x00c6
                    00C7     69 _TA	=	0x00c7
                    00C8     70 _T2CON	=	0x00c8
                    00C9     71 _T2MOD	=	0x00c9
                    00CA     72 _RCAP2L	=	0x00ca
                    00CA     73 _RTL2	=	0x00ca
                    00CB     74 _RCAP2H	=	0x00cb
                    00CB     75 _RTH2	=	0x00cb
                    00CC     76 _TL2	=	0x00cc
                    00CD     77 _TH2	=	0x00cd
                    00D0     78 _PSW	=	0x00d0
                    00D1     79 _MCNT0	=	0x00d1
                    00D2     80 _MCNT1	=	0x00d2
                    00D3     81 _MA	=	0x00d3
                    00D4     82 _MB	=	0x00d4
                    00D5     83 _MC	=	0x00d5
                    00D8     84 _WDCON	=	0x00d8
                    00E0     85 _ACC	=	0x00e0
                    00E8     86 _EIE	=	0x00e8
                    00EA     87 _MXAX	=	0x00ea
                    00F0     88 _B	=	0x00f0
                    00F8     89 _EIP	=	0x00f8
                    8C8A     90 _TMR0	=	0x8c8a
                    8D8B     91 _TMR1	=	0x8d8b
                    CDCC     92 _TMR2	=	0xcdcc
                    CBCA     93 _RCAP2	=	0xcbca
                             94 ;--------------------------------------------------------
                             95 ; special function bits
                             96 ;--------------------------------------------------------
                    0088     97 _IT0	=	0x0088
                    0089     98 _IE0	=	0x0089
                    008A     99 _IT1	=	0x008a
                    008B    100 _IE1	=	0x008b
                    008C    101 _TR0	=	0x008c
                    008D    102 _TF0	=	0x008d
                    008E    103 _TR1	=	0x008e
                    008F    104 _TF1	=	0x008f
                    0090    105 _T2	=	0x0090
                    0091    106 _T2EX	=	0x0091
                    0092    107 _RXD1	=	0x0092
                    0093    108 _TXD1	=	0x0093
                    0094    109 _INT2	=	0x0094
                    0095    110 _INT3	=	0x0095
                    0096    111 _INT4	=	0x0096
                    0097    112 _INT5	=	0x0097
                    0098    113 _RI_0	=	0x0098
                    0099    114 _TI_0	=	0x0099
                    009A    115 _RB8_0	=	0x009a
                    009B    116 _TB8_0	=	0x009b
                    009C    117 _REN_0	=	0x009c
                    009D    118 _SM2_0	=	0x009d
                    009E    119 _SM1_0	=	0x009e
                    009F    120 _SM0_0	=	0x009f
                    009F    121 _FE_0	=	0x009f
                    00A8    122 _EX0	=	0x00a8
                    00A9    123 _ET0	=	0x00a9
                    00AA    124 _EX1	=	0x00aa
                    00AB    125 _ET1	=	0x00ab
                    00AC    126 _ES0	=	0x00ac
                    00AD    127 _ET2	=	0x00ad
                    00AE    128 _ES1	=	0x00ae
                    00AF    129 _EA	=	0x00af
                    00B0    130 _RXD0	=	0x00b0
                    00B1    131 _TXD0	=	0x00b1
                    00B2    132 _INT0	=	0x00b2
                    00B3    133 _INT1	=	0x00b3
                    00B4    134 _T0	=	0x00b4
                    00B5    135 _T1	=	0x00b5
                    00B6    136 _WR	=	0x00b6
                    00B7    137 _RD	=	0x00b7
                    00B8    138 _PX0	=	0x00b8
                    00B9    139 _PT0	=	0x00b9
                    00BA    140 _PX1	=	0x00ba
                    00BB    141 _PT1	=	0x00bb
                    00BC    142 _PS0	=	0x00bc
                    00BD    143 _PT2	=	0x00bd
                    00BE    144 _PS1	=	0x00be
                    00C0    145 _RI_1	=	0x00c0
                    00C1    146 _TI_1	=	0x00c1
                    00C2    147 _RB8_1	=	0x00c2
                    00C3    148 _TB8_1	=	0x00c3
                    00C4    149 _REN_1	=	0x00c4
                    00C5    150 _SM2_1	=	0x00c5
                    00C6    151 _SM1_1	=	0x00c6
                    00C7    152 _SM0_1	=	0x00c7
                    00C7    153 _FE_1	=	0x00c7
                    00C8    154 _CP_RL	=	0x00c8
                    00C9    155 _C_T	=	0x00c9
                    00CA    156 _TR2	=	0x00ca
                    00CB    157 _EXEN2	=	0x00cb
                    00CC    158 _TCLK	=	0x00cc
                    00CD    159 _RCLK	=	0x00cd
                    00CE    160 _EXF2	=	0x00ce
                    00CF    161 _TF2	=	0x00cf
                    00D0    162 _P	=	0x00d0
                    00D1    163 _F1	=	0x00d1
                    00D2    164 _OV	=	0x00d2
                    00D3    165 _RS0	=	0x00d3
                    00D4    166 _RS1	=	0x00d4
                    00D5    167 _F0	=	0x00d5
                    00D6    168 _AC	=	0x00d6
                    00D7    169 _CY	=	0x00d7
                    00D8    170 _RWT	=	0x00d8
                    00D9    171 _EWT	=	0x00d9
                    00DA    172 _WDRF	=	0x00da
                    00DB    173 _WDIF	=	0x00db
                    00DC    174 _PFI	=	0x00dc
                    00DD    175 _EPFI	=	0x00dd
                    00DE    176 _POR	=	0x00de
                    00DF    177 _SMOD_1	=	0x00df
                    00E8    178 _EX2	=	0x00e8
                    00E9    179 _EX3	=	0x00e9
                    00EA    180 _EX4	=	0x00ea
                    00EB    181 _EX5	=	0x00eb
                    00EC    182 _EWDI	=	0x00ec
                    00ED    183 _C1IE	=	0x00ed
                    00EE    184 _C0IE	=	0x00ee
                    00EF    185 _CANBIE	=	0x00ef
                    00F8    186 _PX2	=	0x00f8
                    00F9    187 _PX3	=	0x00f9
                    00FA    188 _PX4	=	0x00fa
                    00FB    189 _PX5	=	0x00fb
                    00FC    190 _PWDI	=	0x00fc
                    00FD    191 _C1IP	=	0x00fd
                    00FE    192 _C0IP	=	0x00fe
                    00FF    193 _CANBIP	=	0x00ff
                            194 ;--------------------------------------------------------
                            195 ; overlayable register banks
                            196 ;--------------------------------------------------------
                            197 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     198 	.ds 8
                            199 ;--------------------------------------------------------
                            200 ; internal ram data
                            201 ;--------------------------------------------------------
                            202 	.area DSEG    (DATA)
   0000                     203 _radix:
   0000                     204 	.ds 1
   0001                     205 _str:
   0001                     206 	.ds 4
   0005                     207 _val:
   0005                     208 	.ds 4
                            209 ;--------------------------------------------------------
                            210 ; overlayable items in internal ram 
                            211 ;--------------------------------------------------------
                            212 	.area OSEG    (OVR,DATA)
                            213 ;--------------------------------------------------------
                            214 ; indirectly addressable internal ram data
                            215 ;--------------------------------------------------------
                            216 	.area ISEG    (DATA)
   0000                     217 _printf_small_buffer_4_8:
   0000                     218 	.ds 12
                            219 ;--------------------------------------------------------
                            220 ; absolute internal ram data
                            221 ;--------------------------------------------------------
                            222 	.area IABS    (ABS,DATA)
                            223 	.area IABS    (ABS,DATA)
                            224 ;--------------------------------------------------------
                            225 ; bit data
                            226 ;--------------------------------------------------------
                            227 	.area BSEG    (BIT)
   0000                     228 _long_flag:
   0000                     229 	.ds 1
   0001                     230 _string_flag:
   0001                     231 	.ds 1
   0002                     232 _char_flag:
   0002                     233 	.ds 1
                            234 ;--------------------------------------------------------
                            235 ; paged external ram data
                            236 ;--------------------------------------------------------
                            237 	.area PSEG    (PAG,XDATA)
                            238 ;--------------------------------------------------------
                            239 ; external ram data
                            240 ;--------------------------------------------------------
                            241 	.area XSEG    (XDATA)
                            242 ;--------------------------------------------------------
                            243 ; absolute external ram data
                            244 ;--------------------------------------------------------
                            245 	.area XABS    (ABS,XDATA)
                            246 ;--------------------------------------------------------
                            247 ; external initialized ram data
                            248 ;--------------------------------------------------------
                            249 	.area XISEG   (XDATA)
                            250 ;--------------------------------------------------------
                            251 ; global & static initialisations
                            252 ;--------------------------------------------------------
                            253 	.area HOME    (CODE)
                            254 	.area GSINIT  (CODE)
                            255 	.area GSFINAL (CODE)
                            256 	.area GSINIT  (CODE)
                            257 ;	printfl.c:52: static __bit  long_flag = 0;
                            258 ;	genAssign: resultIsFar = FALSE
   0000 C2*00               259 	clr	_long_flag
                            260 ;	printfl.c:53: static __bit  string_flag =0;
                            261 ;	genAssign: resultIsFar = FALSE
   0002 C2*01               262 	clr	_string_flag
                            263 ;	printfl.c:54: static __bit  char_flag = 0;
                            264 ;	genAssign: resultIsFar = FALSE
   0004 C2*02               265 	clr	_char_flag
                            266 ;--------------------------------------------------------
                            267 ; Home
                            268 ;--------------------------------------------------------
                            269 	.area HOME    (CODE)
                            270 	.area HOME    (CODE)
                            271 ;--------------------------------------------------------
                            272 ; code
                            273 ;--------------------------------------------------------
                            274 	.area CSEG    (CODE)
                            275 ;------------------------------------------------------------
                            276 ;Allocation info for local variables in function 'printf_small'
                            277 ;------------------------------------------------------------
                            278 ;fmt                       Allocated to stack - offset -8
                            279 ;ap                        Allocated to stack - offset 1
                            280 ;stri                      Allocated to registers 
                            281 ;buffer                    Allocated with name '_printf_small_buffer_4_8'
                            282 ;------------------------------------------------------------
                            283 ;	printfl.c:123: void printf_small (char * fmt, ... ) __reentrant
                            284 ;	-----------------------------------------
                            285 ;	 function printf_small
                            286 ;	-----------------------------------------
   0000                     287 _printf_small:
                    0002    288 	ar2 = 0x02
                    0003    289 	ar3 = 0x03
                    0004    290 	ar4 = 0x04
                    0005    291 	ar5 = 0x05
                    0006    292 	ar6 = 0x06
                    0007    293 	ar7 = 0x07
                    0000    294 	ar0 = 0x00
                    0001    295 	ar1 = 0x01
   0000 C0*00               296 	push	_bpx
   0002 C0*01               297 	push	_bpx+1
   0004 85 81*00            298 	mov	_bpx,sp
   0007 85 9B*01            299 	mov	_bpx+1,esp
   000A 53*01 03            300 	anl	_bpx+1,#3
   000D C0 E0               301 	push	acc
   000F C0 E0               302 	push	acc
   0011 C0 E0               303 	push	acc
   0013 C0 E0               304 	push	acc
                            305 ;	printfl.c:127: va_start(ap,fmt);
   0015 E5*00               306 	mov	a,_bpx
   0017 24 F8               307 	add	a,#0xF8
   0019 F5 F0               308 	mov	b,a
   001B E5*01               309 	mov	a,_bpx+1
   001D 34 FF               310 	addc	a,#0xFF
   001F AA F0               311 	mov	r2,b
   0021 FB                  312 	mov	r3,a
   0022 7C 40               313 	mov	r4,#0x40
   0024 75 93 40            314 	mov	dpx,#0x40
   0027 85*01 83            315 	mov	dph,_bpx+1
   002A 85*00 82            316 	mov	dpl,_bpx
   002D A3                  317 	inc	dptr
   002E EA                  318 	mov	a,r2
   002F F0                  319 	movx	@dptr,a
   0030 A3                  320 	inc	dptr
   0031 EB                  321 	mov	a,r3
   0032 F0                  322 	movx	@dptr,a
   0033 A3                  323 	inc	dptr
   0034 EC                  324 	mov	a,r4
   0035 F0                  325 	movx	@dptr,a
   0036 A3                  326 	inc	dptr
   0037 74 00               327 	mov	a,#0x0
   0039 F0                  328 	movx	@dptr,a
   003A                     329 00130$:
                            330 ;	printfl.c:129: for (; *fmt ; fmt++ ) {
   003A E5*00               331 	mov	a,_bpx
   003C C3                  332 	clr	c
   003D 94 08               333 	subb	a,#0x08
   003F F5 82               334 	mov	dpl,a
   0041 E5*01               335 	mov	a,_bpx+1
   0043 94 00               336 	subb	a,#0x00
   0045 F5 83               337 	mov	dph,a
   0047 75 93 40            338 	mov	dpx,#0x40
                            339 ;	genAssign: resultIsFar = FALSE
   004A E0                  340 	movx	a,@dptr
   004B FE                  341 	mov	r6,a
   004C A3                  342 	inc	dptr
   004D E0                  343 	movx	a,@dptr
   004E FF                  344 	mov	r7,a
   004F A3                  345 	inc	dptr
   0050 E0                  346 	movx	a,@dptr
   0051 FA                  347 	mov	r2,a
   0052 A3                  348 	inc	dptr
   0053 E0                  349 	movx	a,@dptr
   0054 FB                  350 	mov	r3,a
   0055 8E 82               351 	mov	dpl,r6
   0057 8F 83               352 	mov	dph,r7
   0059 8A 93               353 	mov	dpx,r2
   005B 8B F0               354 	mov	b,r3
   005D 12s00r00r00         355 	lcall	__gptrget
   0061 FC                  356 	mov  r4,a
   0062 70 04               357 	jnz	00155$
   0064 02s00r03r58         358 	ljmp	00134$
   0068                     359 00155$:
                            360 ;	printfl.c:130: if (*fmt == '%') {
   0068 EC                  361 	mov	a,r4
   0069 B4 25 02            362 	cjne	a,#0x25,00156$
   006C 80 04               363 	sjmp	00157$
   006E                     364 00156$:
   006E 02s00r03r2D         365 	ljmp	00128$
   0072                     366 00157$:
                            367 ;	printfl.c:131: long_flag = string_flag = char_flag = 0;
                            368 ;	genAssign: resultIsFar = FALSE
   0072 C2*02               369 	clr	_char_flag
                            370 ;	genAssign: resultIsFar = FALSE
   0074 C2*01               371 	clr	_string_flag
                            372 ;	genAssign: resultIsFar = FALSE
   0076 C2*00               373 	clr	_long_flag
                            374 ;	printfl.c:132: fmt++ ;
   0078 E5*00               375 	mov	a,_bpx
   007A C3                  376 	clr	c
   007B 94 08               377 	subb	a,#0x08
   007D F5 82               378 	mov	dpl,a
   007F E5*01               379 	mov	a,_bpx+1
   0081 94 00               380 	subb	a,#0x00
   0083 F5 83               381 	mov	dph,a
   0085 75 93 40            382 	mov	dpx,#0x40
   0088 74 01               383 	mov	a,#0x01
   008A 2E                  384 	add	a,r6
   008B F0                  385 	movx	@dptr,a
   008C E4                  386 	clr  a
   008D 3F                  387 	addc	a,r7
   008E A3                  388 	inc	dptr
   008F F0                  389 	movx	@dptr,a
   0090 E4                  390 	clr  a
   0091 3A                  391 	addc	a,r2
   0092 A3                  392 	inc	dptr
   0093 F0                  393 	movx	@dptr,a
   0094 A3                  394 	inc	dptr
   0095 EB                  395 	mov	a,r3
   0096 F0                  396 	movx	@dptr,a
                            397 ;	printfl.c:133: switch (*fmt) {
   0097 E5*00               398 	mov	a,_bpx
   0099 C3                  399 	clr	c
   009A 94 08               400 	subb	a,#0x08
   009C F5 82               401 	mov	dpl,a
   009E E5*01               402 	mov	a,_bpx+1
   00A0 94 00               403 	subb	a,#0x00
   00A2 F5 83               404 	mov	dph,a
   00A4 75 93 40            405 	mov	dpx,#0x40
                            406 ;	genAssign: resultIsFar = FALSE
   00A7 E0                  407 	movx	a,@dptr
   00A8 FA                  408 	mov	r2,a
   00A9 A3                  409 	inc	dptr
   00AA E0                  410 	movx	a,@dptr
   00AB FB                  411 	mov	r3,a
   00AC A3                  412 	inc	dptr
   00AD E0                  413 	movx	a,@dptr
   00AE FD                  414 	mov	r5,a
   00AF A3                  415 	inc	dptr
   00B0 E0                  416 	movx	a,@dptr
   00B1 FE                  417 	mov	r6,a
   00B2 8A 82               418 	mov	dpl,r2
   00B4 8B 83               419 	mov	dph,r3
   00B6 8D 93               420 	mov	dpx,r5
   00B8 8E F0               421 	mov	b,r6
   00BA 12s00r00r00         422 	lcall	__gptrget
   00BE FF                  423 	mov  r7,a
   00BF B4 68 02            424 	cjne	a,#0x68,00158$
   00C2 80 27               425 	sjmp 00102$
   00C4                     426 00158$:
   00C4 EF                  427 	mov	a,r7
   00C5 B4 6C 44            428 	cjne a,#0x6C,00103$
   00C8                     429 00160$:
                            430 ;	printfl.c:135: long_flag = 1;
                            431 ;	genAssign: resultIsFar = FALSE
   00C8 D2*00               432 	setb	_long_flag
                            433 ;	printfl.c:136: fmt++;
   00CA E5*00               434 	mov	a,_bpx
   00CC C3                  435 	clr	c
   00CD 94 08               436 	subb	a,#0x08
   00CF F5 82               437 	mov	dpl,a
   00D1 E5*01               438 	mov	a,_bpx+1
   00D3 94 00               439 	subb	a,#0x00
   00D5 F5 83               440 	mov	dph,a
   00D7 75 93 40            441 	mov	dpx,#0x40
   00DA 74 01               442 	mov	a,#0x01
   00DC 2A                  443 	add	a,r2
   00DD F0                  444 	movx	@dptr,a
   00DE E4                  445 	clr  a
   00DF 3B                  446 	addc	a,r3
   00E0 A3                  447 	inc	dptr
   00E1 F0                  448 	movx	@dptr,a
   00E2 E4                  449 	clr  a
   00E3 3D                  450 	addc	a,r5
   00E4 A3                  451 	inc	dptr
   00E5 F0                  452 	movx	@dptr,a
   00E6 A3                  453 	inc	dptr
   00E7 EE                  454 	mov	a,r6
   00E8 F0                  455 	movx	@dptr,a
                            456 ;	printfl.c:137: break;
                            457 ;	printfl.c:138: case 'h':
   00E9 80 21               458 	sjmp 00103$
   00EB                     459 00102$:
                            460 ;	printfl.c:139: char_flag = 1;
                            461 ;	genAssign: resultIsFar = FALSE
   00EB D2*02               462 	setb	_char_flag
                            463 ;	printfl.c:140: fmt++;
   00ED E5*00               464 	mov	a,_bpx
   00EF C3                  465 	clr	c
   00F0 94 08               466 	subb	a,#0x08
   00F2 F5 82               467 	mov	dpl,a
   00F4 E5*01               468 	mov	a,_bpx+1
   00F6 94 00               469 	subb	a,#0x00
   00F8 F5 83               470 	mov	dph,a
   00FA 75 93 40            471 	mov	dpx,#0x40
   00FD 74 01               472 	mov	a,#0x01
   00FF 2A                  473 	add	a,r2
   0100 F0                  474 	movx	@dptr,a
   0101 E4                  475 	clr  a
   0102 3B                  476 	addc	a,r3
   0103 A3                  477 	inc	dptr
   0104 F0                  478 	movx	@dptr,a
   0105 E4                  479 	clr  a
   0106 3D                  480 	addc	a,r5
   0107 A3                  481 	inc	dptr
   0108 F0                  482 	movx	@dptr,a
   0109 A3                  483 	inc	dptr
   010A EE                  484 	mov	a,r6
   010B F0                  485 	movx	@dptr,a
                            486 ;	printfl.c:141: }
   010C                     487 00103$:
                            488 ;	printfl.c:143: switch (*fmt) {
   010C E5*00               489 	mov	a,_bpx
   010E C3                  490 	clr	c
   010F 94 08               491 	subb	a,#0x08
   0111 F5 82               492 	mov	dpl,a
   0113 E5*01               493 	mov	a,_bpx+1
   0115 94 00               494 	subb	a,#0x00
   0117 F5 83               495 	mov	dph,a
   0119 75 93 40            496 	mov	dpx,#0x40
                            497 ;	genAssign: resultIsFar = FALSE
   011C E0                  498 	movx	a,@dptr
   011D FA                  499 	mov	r2,a
   011E A3                  500 	inc	dptr
   011F E0                  501 	movx	a,@dptr
   0120 FB                  502 	mov	r3,a
   0121 A3                  503 	inc	dptr
   0122 E0                  504 	movx	a,@dptr
   0123 FD                  505 	mov	r5,a
   0124 A3                  506 	inc	dptr
   0125 E0                  507 	movx	a,@dptr
   0126 FE                  508 	mov	r6,a
   0127 8A 82               509 	mov	dpl,r2
   0129 8B 83               510 	mov	dph,r3
   012B 8D 93               511 	mov	dpx,r5
   012D 8E F0               512 	mov	b,r6
   012F 12s00r00r00         513 	lcall	__gptrget
   0133 FA                  514 	mov  r2,a
   0134 B4 63 02            515 	cjne	a,#0x63,00161$
   0137 80 26               516 	sjmp 00107$
   0139                     517 00161$:
   0139 EA                  518 	mov	a,r2
   013A B4 64 02            519 	cjne	a,#0x64,00162$
   013D 80 16               520 	sjmp 00105$
   013F                     521 00162$:
   013F EA                  522 	mov	a,r2
   0140 B4 6F 02            523 	cjne	a,#0x6F,00163$
   0143 80 1F               524 	sjmp 00108$
   0145                     525 00163$:
   0145 EA                  526 	mov	a,r2
   0146 B4 73 02            527 	cjne	a,#0x73,00164$
   0149 80 06               528 	sjmp 00104$
   014B                     529 00164$:
   014B EA                  530 	mov	a,r2
                            531 ;	printfl.c:144: case 's':
   014C B4 78 18            532 	cjne a,#0x78,00109$
   014F 80 09               533 	sjmp 00106$
   0151                     534 00104$:
                            535 ;	printfl.c:145: string_flag = 1;
                            536 ;	genAssign: resultIsFar = FALSE
   0151 D2*01               537 	setb	_string_flag
                            538 ;	printfl.c:146: break;
                            539 ;	printfl.c:147: case 'd':
   0153 80 12               540 	sjmp 00109$
   0155                     541 00105$:
                            542 ;	printfl.c:148: radix = 10;
                            543 ;	genAssign: resultIsFar = FALSE
   0155 75*00 0A            544 	mov	_radix,#0x0A
                            545 ;	printfl.c:149: break;
                            546 ;	printfl.c:150: case 'x':
   0158 80 0D               547 	sjmp 00109$
   015A                     548 00106$:
                            549 ;	printfl.c:151: radix = 16;
                            550 ;	genAssign: resultIsFar = FALSE
   015A 75*00 10            551 	mov	_radix,#0x10
                            552 ;	printfl.c:152: break;
                            553 ;	printfl.c:153: case 'c':
   015D 80 08               554 	sjmp 00109$
   015F                     555 00107$:
                            556 ;	printfl.c:154: radix = 0;
                            557 ;	genAssign: resultIsFar = FALSE
   015F 75*00 00            558 	mov	_radix,#0x00
                            559 ;	printfl.c:155: break;
                            560 ;	printfl.c:156: case 'o':
   0162 80 03               561 	sjmp 00109$
   0164                     562 00108$:
                            563 ;	printfl.c:157: radix = 8;
                            564 ;	genAssign: resultIsFar = FALSE
   0164 75*00 08            565 	mov	_radix,#0x08
                            566 ;	printfl.c:159: }
   0167                     567 00109$:
                            568 ;	printfl.c:161: if (string_flag) {
   0167 20*01 04            569 	jb	_string_flag,00166$
   016A 02s00r01rF9         570 	ljmp	00114$
   016E                     571 00166$:
                            572 ;	printfl.c:162: str = va_arg(ap, char *);
   016E 75 93 40            573 	mov	dpx,#0x40
   0171 85*01 83            574 	mov	dph,_bpx+1
   0174 85*00 82            575 	mov	dpl,_bpx
   0177 A3                  576 	inc	dptr
   0178 E0                  577 	movx	a,@dptr
   0179 24 FC               578 	add	a,#0xFC
   017B FA                  579 	mov	r2,a
   017C A3                  580 	inc	dptr
   017D E0                  581 	movx	a,@dptr
   017E 34 FF               582 	addc	a,#0xFF
   0180 FB                  583 	mov	r3,a
   0181 A3                  584 	inc	dptr
   0182 E0                  585 	movx	a,@dptr
   0183 34 FF               586 	addc	a,#0xFF
   0185 FD                  587 	mov	r5,a
   0186 A3                  588 	inc	dptr
   0187 E0                  589 	movx	a,@dptr
   0188 FE                  590 	mov	r6,a
                            591 ;	genAssign: resultIsFar = TRUE
   0189 75 93 40            592 	mov	dpx,#0x40
   018C 85*01 83            593 	mov	dph,_bpx+1
   018F 85*00 82            594 	mov	dpl,_bpx
   0192 A3                  595 	inc	dptr
   0193 EA                  596 	mov	a,r2
   0194 F0                  597 	movx	@dptr,a
   0195 A3                  598 	inc	dptr
   0196 EB                  599 	mov	a,r3
   0197 F0                  600 	movx	@dptr,a
   0198 A3                  601 	inc	dptr
   0199 ED                  602 	mov	a,r5
   019A F0                  603 	movx	@dptr,a
   019B A3                  604 	inc	dptr
   019C EE                  605 	mov	a,r6
   019D F0                  606 	movx	@dptr,a
   019E 8A 82               607 	mov	dpl,r2
   01A0 8B 83               608 	mov	dph,r3
   01A2 8D 93               609 	mov	dpx,r5
   01A4 8E F0               610 	mov	b,r6
   01A6 12s00r00r00         611 	lcall	__gptrgetWord
   01AA F5*01               612 	mov	_str,a
   01AC 85 9C*02            613 	mov	(_str + 1),_ap
   01AF A3                  614 	inc	dptr
   01B0 12s00r00r00         615 	lcall	__gptrgetWord
   01B4 F5*03               616 	mov	(_str + 2),a
   01B6 85 9C*04            617 	mov	(_str + 3),_ap
                            618 ;	printfl.c:163: while (*str) putchar(*str++);
   01B9                     619 00110$:
                            620 ;	genAssign: resultIsFar = FALSE
   01B9 85*01 82            621 	mov	dpl,_str
   01BC 85*02 83            622 	mov	dph,(_str + 1)
   01BF 85*03 93            623 	mov	dpx,(_str + 2)
   01C2 85*04 F0            624 	mov	b,(_str + 3)
   01C5 12s00r00r00         625 	lcall	__gptrget
   01C9 FA                  626 	mov  r2,a
   01CA 70 04               627 	jnz	00167$
   01CC 02s00r03r33         628 	ljmp	00132$
   01D0                     629 00167$:
                            630 ;	genAssign: resultIsFar = FALSE
   01D0 85*01 82            631 	mov	dpl,_str
   01D3 85*02 83            632 	mov	dph,(_str + 1)
   01D6 85*03 93            633 	mov	dpx,(_str + 2)
   01D9 85*04 F0            634 	mov	b,(_str + 3)
   01DC 12s00r00r00         635 	lcall	__gptrget
   01E0 FA                  636 	mov	r2,a
   01E1 74 01               637 	mov	a,#0x01
   01E3 25*01               638 	add	a,_str
   01E5 F5*01               639 	mov	_str,a
   01E7 E4                  640 	clr  a
   01E8 35*02               641 	addc	a,(_str + 1)
   01EA F5*02               642 	mov	(_str + 1),a
   01EC E4                  643 	clr  a
   01ED 35*03               644 	addc	a,(_str + 2)
   01EF F5*03               645 	mov	(_str + 2),a
   01F1 8A 82               646 	mov	dpl,r2
   01F3 12s00r00r00         647 	lcall	_putchar
                            648 ;	printfl.c:164: continue ;
   01F7 80 C0               649 	sjmp 00110$
   01F9                     650 00114$:
                            651 ;	printfl.c:167: if (long_flag)
   01F9 30*00 4F            652 	jnb  _long_flag,00119$
   01FC                     653 00168$:
                            654 ;	printfl.c:168: val = va_arg(ap,long);
   01FC 75 93 40            655 	mov	dpx,#0x40
   01FF 85*01 83            656 	mov	dph,_bpx+1
   0202 85*00 82            657 	mov	dpl,_bpx
   0205 A3                  658 	inc	dptr
   0206 E0                  659 	movx	a,@dptr
   0207 24 FC               660 	add	a,#0xFC
   0209 FA                  661 	mov	r2,a
   020A A3                  662 	inc	dptr
   020B E0                  663 	movx	a,@dptr
   020C 34 FF               664 	addc	a,#0xFF
   020E FB                  665 	mov	r3,a
   020F A3                  666 	inc	dptr
   0210 E0                  667 	movx	a,@dptr
   0211 34 FF               668 	addc	a,#0xFF
   0213 FD                  669 	mov	r5,a
   0214 A3                  670 	inc	dptr
   0215 E0                  671 	movx	a,@dptr
   0216 FE                  672 	mov	r6,a
                            673 ;	genAssign: resultIsFar = TRUE
   0217 75 93 40            674 	mov	dpx,#0x40
   021A 85*01 83            675 	mov	dph,_bpx+1
   021D 85*00 82            676 	mov	dpl,_bpx
   0220 A3                  677 	inc	dptr
   0221 EA                  678 	mov	a,r2
   0222 F0                  679 	movx	@dptr,a
   0223 A3                  680 	inc	dptr
   0224 EB                  681 	mov	a,r3
   0225 F0                  682 	movx	@dptr,a
   0226 A3                  683 	inc	dptr
   0227 ED                  684 	mov	a,r5
   0228 F0                  685 	movx	@dptr,a
   0229 A3                  686 	inc	dptr
   022A EE                  687 	mov	a,r6
   022B F0                  688 	movx	@dptr,a
   022C 8A 82               689 	mov	dpl,r2
   022E 8B 83               690 	mov	dph,r3
   0230 8D 93               691 	mov	dpx,r5
   0232 8E F0               692 	mov	b,r6
   0234 12s00r00r00         693 	lcall	__gptrgetWord
   0238 F5*05               694 	mov	_val,a
   023A 85 9C*06            695 	mov	(_val + 1),_ap
   023D A3                  696 	inc	dptr
   023E 12s00r00r00         697 	lcall	__gptrgetWord
   0242 F5*07               698 	mov	(_val + 2),a
   0244 85 9C*08            699 	mov	(_val + 3),_ap
   0247 02s00r02rE3         700 	ljmp	00120$
   024B                     701 00119$:
                            702 ;	printfl.c:170: if (char_flag)
   024B 30*02 4A            703 	jnb  _char_flag,00116$
   024E                     704 00169$:
                            705 ;	printfl.c:171: val = va_arg(ap,char);
   024E 75 93 40            706 	mov	dpx,#0x40
   0251 85*01 83            707 	mov	dph,_bpx+1
   0254 85*00 82            708 	mov	dpl,_bpx
   0257 A3                  709 	inc	dptr
   0258 E0                  710 	movx	a,@dptr
   0259 24 FF               711 	add	a,#0xFF
   025B FA                  712 	mov	r2,a
   025C A3                  713 	inc	dptr
   025D E0                  714 	movx	a,@dptr
   025E 34 FF               715 	addc	a,#0xFF
   0260 FB                  716 	mov	r3,a
   0261 A3                  717 	inc	dptr
   0262 E0                  718 	movx	a,@dptr
   0263 34 FF               719 	addc	a,#0xFF
   0265 FD                  720 	mov	r5,a
   0266 A3                  721 	inc	dptr
   0267 E0                  722 	movx	a,@dptr
   0268 FE                  723 	mov	r6,a
                            724 ;	genAssign: resultIsFar = TRUE
   0269 75 93 40            725 	mov	dpx,#0x40
   026C 85*01 83            726 	mov	dph,_bpx+1
   026F 85*00 82            727 	mov	dpl,_bpx
   0272 A3                  728 	inc	dptr
   0273 EA                  729 	mov	a,r2
   0274 F0                  730 	movx	@dptr,a
   0275 A3                  731 	inc	dptr
   0276 EB                  732 	mov	a,r3
   0277 F0                  733 	movx	@dptr,a
   0278 A3                  734 	inc	dptr
   0279 ED                  735 	mov	a,r5
   027A F0                  736 	movx	@dptr,a
   027B A3                  737 	inc	dptr
   027C EE                  738 	mov	a,r6
   027D F0                  739 	movx	@dptr,a
   027E 8A 82               740 	mov	dpl,r2
   0280 8B 83               741 	mov	dph,r3
   0282 8D 93               742 	mov	dpx,r5
   0284 8E F0               743 	mov	b,r6
   0286 12s00r00r00         744 	lcall	__gptrget
   028A FA                  745 	mov  r2,a
   028B 8A*05               746 	mov  _val,r2 
   028D 33                  747 	rlc	a
   028E 95 E0               748 	subb	a,acc
   0290 F5*06               749 	mov	(_val + 1),a
   0292 F5*07               750 	mov	(_val + 2),a
   0294 F5*08               751 	mov	(_val + 3),a
   0296 80 4B               752 	sjmp 00120$
   0298                     753 00116$:
                            754 ;	printfl.c:173: val = va_arg(ap,int);
   0298 75 93 40            755 	mov	dpx,#0x40
   029B 85*01 83            756 	mov	dph,_bpx+1
   029E 85*00 82            757 	mov	dpl,_bpx
   02A1 A3                  758 	inc	dptr
   02A2 E0                  759 	movx	a,@dptr
   02A3 24 FE               760 	add	a,#0xFE
   02A5 FA                  761 	mov	r2,a
   02A6 A3                  762 	inc	dptr
   02A7 E0                  763 	movx	a,@dptr
   02A8 34 FF               764 	addc	a,#0xFF
   02AA FB                  765 	mov	r3,a
   02AB A3                  766 	inc	dptr
   02AC E0                  767 	movx	a,@dptr
   02AD 34 FF               768 	addc	a,#0xFF
   02AF FD                  769 	mov	r5,a
   02B0 A3                  770 	inc	dptr
   02B1 E0                  771 	movx	a,@dptr
   02B2 FE                  772 	mov	r6,a
                            773 ;	genAssign: resultIsFar = TRUE
   02B3 75 93 40            774 	mov	dpx,#0x40
   02B6 85*01 83            775 	mov	dph,_bpx+1
   02B9 85*00 82            776 	mov	dpl,_bpx
   02BC A3                  777 	inc	dptr
   02BD EA                  778 	mov	a,r2
   02BE F0                  779 	movx	@dptr,a
   02BF A3                  780 	inc	dptr
   02C0 EB                  781 	mov	a,r3
   02C1 F0                  782 	movx	@dptr,a
   02C2 A3                  783 	inc	dptr
   02C3 ED                  784 	mov	a,r5
   02C4 F0                  785 	movx	@dptr,a
   02C5 A3                  786 	inc	dptr
   02C6 EE                  787 	mov	a,r6
   02C7 F0                  788 	movx	@dptr,a
   02C8 8A 82               789 	mov	dpl,r2
   02CA 8B 83               790 	mov	dph,r3
   02CC 8D 93               791 	mov	dpx,r5
   02CE 8E F0               792 	mov	b,r6
   02D0 12s00r00r00         793 	lcall	__gptrgetWord
   02D4 FA                  794 	mov	r2,a
   02D5 AB 9C               795 	mov	r3,_ap
   02D7 8A*05               796 	mov	_val,r2
   02D9 8B*06               797 	mov	(_val + 1),r3
   02DB EB                  798 	mov	a,r3
   02DC 33                  799 	rlc	a
   02DD 95 E0               800 	subb	a,acc
   02DF F5*07               801 	mov	(_val + 2),a
   02E1 F5*08               802 	mov	(_val + 3),a
   02E3                     803 00120$:
                            804 ;	printfl.c:178: if (radix)
   02E3 E5*00               805 	mov	a,_radix
   02E5 60 3C               806 	jz  00125$
   02E7                     807 00170$:
                            808 ;	printfl.c:183: _ltoa (val, buffer, radix);
   02E7 90s00r00r00         809 	mov	dptr,#__ltoa_PARM_2
   02EB 74r00               810 	mov	a,#_printf_small_buffer_4_8
   02ED F0                  811 	movx	@dptr,a
   02EE A3                  812 	inc	dptr
   02EF E4                  813 	clr	a
   02F0 F0                  814 	movx	@dptr,a
   02F1 A3                  815 	inc	dptr
   02F2 E4                  816 	clr	a
   02F3 F0                  817 	movx	@dptr,a
   02F4 A3                  818 	inc	dptr
   02F5 74 40               819 	mov	a,#0x40
   02F7 F0                  820 	movx	@dptr,a
                            821 ;	genAssign: resultIsFar = TRUE
   02F8 90s00r00r00         822 	mov	dptr,#__ltoa_PARM_3
   02FC E5*00               823 	mov	a,_radix
   02FE F0                  824 	movx	@dptr,a
   02FF 85*05 82            825 	mov	dpl,_val
   0302 85*06 83            826 	mov	dph,(_val + 1)
   0305 85*07 93            827 	mov	dpx,(_val + 2)
   0308 85*08 F0            828 	mov	b,(_val + 3)
   030B 12s00r00r00         829 	lcall	__ltoa
                            830 ;	printfl.c:184: stri = buffer;
                            831 ;	printfl.c:185: while (*stri)
                            832 ;	genAssign: resultIsFar = FALSE
   030F 78r00               833 	mov	r0,#_printf_small_buffer_4_8
   0311                     834 00121$:
   0311 86 02               835 	mov	ar2,@r0
   0313 EA                  836 	mov	a,r2
   0314 60 1D               837 	jz  00132$
   0316                     838 00171$:
                            839 ;	printfl.c:187: putchar (*stri);
   0316 C0 00               840 	push	ar0
   0318 8A 82               841 	mov	dpl,r2
   031A 12s00r00r00         842 	lcall	_putchar
   031E D0 00               843 	pop	ar0
                            844 ;	printfl.c:188: stri++;
   0320 08                  845 	inc	r0
   0321 80 EE               846 	sjmp 00121$
   0323                     847 00125$:
                            848 ;	printfl.c:193: putchar((char)val);
   0323 AA*05               849 	mov	r2,_val
   0325 8A 82               850 	mov	dpl,r2
   0327 12s00r00r00         851 	lcall	_putchar
   032B 80 06               852 	sjmp 00132$
   032D                     853 00128$:
                            854 ;	printfl.c:196: putchar(*fmt);
   032D 8C 82               855 	mov	dpl,r4
   032F 12s00r00r00         856 	lcall	_putchar
   0333                     857 00132$:
                            858 ;	printfl.c:129: for (; *fmt ; fmt++ ) {
   0333 E5*00               859 	mov	a,_bpx
   0335 C3                  860 	clr	c
   0336 94 08               861 	subb	a,#0x08
   0338 F5 82               862 	mov	dpl,a
   033A E5*01               863 	mov	a,_bpx+1
   033C 94 00               864 	subb	a,#0x00
   033E F5 83               865 	mov	dph,a
   0340 75 93 40            866 	mov	dpx,#0x40
   0343 E0                  867 	movx	a,@dptr
   0344 24 01               868 	add	a,#0x01
   0346 F0                  869 	movx	@dptr,a
   0347 A3                  870 	inc	dptr
   0348 E0                  871 	movx	a,@dptr
   0349 34 00               872 	addc	a,#0x00
   034B F0                  873 	movx	@dptr,a
   034C A3                  874 	inc	dptr
   034D E0                  875 	movx	a,@dptr
   034E 34 00               876 	addc	a,#0x00
   0350 F0                  877 	movx	@dptr,a
   0351 A3                  878 	inc	dptr
   0352 E0                  879 	movx	a,@dptr
   0353 F0                  880 	movx	@dptr,a
   0354 02s00r00r3A         881 	ljmp	00130$
   0358                     882 00134$:
   0358 85*00 81            883 	mov	sp,_bpx
   035B 85*01 9B            884 	mov	esp,_bpx+1
   035E D0*01               885 	pop	_bpx+1
   0360 D0*00               886 	pop	_bpx
   0362 22                  887 	ret
                            888 	.area CSEG    (CODE)
                            889 	.area CONST   (CODE)
                            890 	.area XINIT   (CODE)
                            891 	.area CABS    (ABS,CODE)
