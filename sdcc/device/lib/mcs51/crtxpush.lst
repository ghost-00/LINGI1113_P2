                              1 ; /*-------------------------------------------------------------------------
                              2 ;
                              3 ;   crtxpush.asm :- C run-time: push registers (not R0) to xstack
                              4 ;
                              5 ;    This library is free software; you can redistribute it and/or modify it
                              6 ;    under the terms of the GNU Library General Public License as published by the
                              7 ;    Free Software Foundation; either version 2, or (at your option) any
                              8 ;    later version.
                              9 ;
                             10 ;    This library is distributed in the hope that it will be useful,
                             11 ;    but WITHOUT ANY WARRANTY; without even the implied warranty of
                             12 ;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                             13 ;    GNU Library General Public License for more details.
                             14 ;
                             15 ;    You should have received a copy of the GNU Library General Public License
                             16 ;    along with this program; if not, write to the Free Software
                             17 ;    Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
                             18 ;
                             19 ;    In other words, you are welcome to use, share and improve this program.
                             20 ;    You are forbidden to forbid anyone else to use, share and improve
                             21 ;    what you give them.   Help stamp out software-hoarding!
                             22 ; -------------------------------------------------------------------------*/
                             23 
                             24 ;--------------------------------------------------------
                             25 ; overlayable bit register bank
                             26 ;--------------------------------------------------------
                             27 	.area BIT_BANK	(REL,OVR,DATA)
   0000                      28 bits:
   0000                      29 	.ds 1
                             30 
                    0000     31 	ar0 = 0x00
                    0001     32 	ar1 = 0x01
                             33 
                             34 	.area HOME    (CODE)
                             35 
                             36 ; Push registers r1..r7 & bits on xstack
                             37 ; Expect allocation size in ACC and mask in B
   0000                      38 __sdcc_xpush_regs::
   0000 A8*00                39 	mov	r0,_spx
   0002 25*00                40 	add	a,_spx
   0004 F5*00                41 	mov	_spx,a
   0006 C0 01                42 	push	ar1
   0008 10 F0 04             43 	jbc	B.0,00100$	;if B(0)=0 then
   000B E5*00                44 	mov	a,bits		;push bits
   000D F2                   45 	movx	@r0,a
   000E 08                   46 	inc	r0
   000F                      47 00100$:
   000F 10 F1 03             48 	jbc	B.1,00101$	;if B(1)=0 then
   0012 E9                   49 	mov	a,r1		;push R1
   0013 F2                   50 	movx	@r0,a
   0014 08                   51 	inc	r0
   0015                      52 00101$:
   0015 79 01                53 	mov	r1,#0x01
   0017                      54 00102$:
   0017 E5 F0                55 	mov	a,B
   0019                      56 00103$:
   0019 60 0C                57 	jz	00104$		;if B=0 we are done
   001B 09                   58 	inc	r1
   001C 25 E0                59 	add	a,acc		;if B(9-n)=1 then
   001E 50 F9                60 	jnc	00103$
   0020 F5 F0                61 	mov	B,a
   0022 E7                   62 	mov	a,@r1		;push Rn
   0023 F2                   63 	movx	@r0,a
   0024 08                   64 	inc	r0
   0025 80 F0                65 	sjmp	00102$
   0027                      66 00104$:
   0027 D0 01                67 	pop	ar1
   0029 22                   68 	ret
