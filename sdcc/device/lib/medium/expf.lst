                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.4 #5595 (Oct 23 2013) (Mac OS X ppc)
                              4 ; This file was generated Wed Oct 23 12:25:46 2013
                              5 ;--------------------------------------------------------
                              6 	.module expf
                              7 	.optsdcc -mmcs51 --model-medium
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _expf
                             13 ;--------------------------------------------------------
                             14 ; special function registers
                             15 ;--------------------------------------------------------
                             16 	.area RSEG    (ABS,DATA)
   0000                      17 	.org 0x0000
                             18 ;--------------------------------------------------------
                             19 ; special function bits
                             20 ;--------------------------------------------------------
                             21 	.area RSEG    (ABS,DATA)
   0000                      22 	.org 0x0000
                             23 ;--------------------------------------------------------
                             24 ; overlayable register banks
                             25 ;--------------------------------------------------------
                             26 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      27 	.ds 8
                             28 ;--------------------------------------------------------
                             29 ; internal ram data
                             30 ;--------------------------------------------------------
                             31 	.area DSEG    (DATA)
   0000                      32 _expf_y:
   0000                      33 	.ds 4
   0004                      34 _n:
   0004                      35 	.ds 1
                             36 ;--------------------------------------------------------
                             37 ; overlayable items in internal ram 
                             38 ;--------------------------------------------------------
                             39 	.area OSEG    (OVR,DATA)
                             40 ;--------------------------------------------------------
                             41 ; indirectly addressable internal ram data
                             42 ;--------------------------------------------------------
                             43 	.area ISEG    (DATA)
                             44 ;--------------------------------------------------------
                             45 ; absolute internal ram data
                             46 ;--------------------------------------------------------
                             47 	.area IABS    (ABS,DATA)
                             48 	.area IABS    (ABS,DATA)
                             49 ;--------------------------------------------------------
                             50 ; bit data
                             51 ;--------------------------------------------------------
                             52 	.area BSEG    (BIT)
   0000                      53 _sign_bit:
   0000                      54 	.ds 1
                             55 ;--------------------------------------------------------
                             56 ; paged external ram data
                             57 ;--------------------------------------------------------
                             58 	.area PSEG    (PAG,XDATA)
                             59 ;--------------------------------------------------------
                             60 ; external ram data
                             61 ;--------------------------------------------------------
                             62 	.area XSEG    (XDATA)
                             63 ;--------------------------------------------------------
                             64 ; absolute external ram data
                             65 ;--------------------------------------------------------
                             66 	.area XABS    (ABS,XDATA)
                             67 ;--------------------------------------------------------
                             68 ; external initialized ram data
                             69 ;--------------------------------------------------------
                             70 	.area XISEG   (XDATA)
                             71 	.area HOME    (CODE)
                             72 	.area GSINIT0 (CODE)
                             73 	.area GSINIT1 (CODE)
                             74 	.area GSINIT2 (CODE)
                             75 	.area GSINIT3 (CODE)
                             76 	.area GSINIT4 (CODE)
                             77 	.area GSINIT5 (CODE)
                             78 	.area GSINIT  (CODE)
                             79 	.area GSFINAL (CODE)
                             80 	.area CSEG    (CODE)
                             81 ;--------------------------------------------------------
                             82 ; global & static initialisations
                             83 ;--------------------------------------------------------
                             84 	.area HOME    (CODE)
                             85 	.area GSINIT  (CODE)
                             86 	.area GSFINAL (CODE)
                             87 	.area GSINIT  (CODE)
                             88 ;--------------------------------------------------------
                             89 ; Home
                             90 ;--------------------------------------------------------
                             91 	.area HOME    (CODE)
                             92 	.area HOME    (CODE)
                             93 ;--------------------------------------------------------
                             94 ; code
                             95 ;--------------------------------------------------------
                             96 	.area CSEG    (CODE)
                             97 ;------------------------------------------------------------
                             98 ;Allocation info for local variables in function 'expf'
                             99 ;------------------------------------------------------------
                            100 ;------------------------------------------------------------
                            101 ;	expf.c:41: float expf(float x)
                            102 ;	-----------------------------------------
                            103 ;	 function expf
                            104 ;	-----------------------------------------
   0000                     105 _expf:
                    0002    106 	ar2 = 0x02
                    0003    107 	ar3 = 0x03
                    0004    108 	ar4 = 0x04
                    0005    109 	ar5 = 0x05
                    0006    110 	ar6 = 0x06
                    0007    111 	ar7 = 0x07
                    0000    112 	ar0 = 0x00
                    0001    113 	ar1 = 0x01
                            114 ;	expf.c:230: lcall	___fsdiv		// 1.0 / x
                            115 	
   0000 A2 E7               116 	 mov c, acc.7
   0002 92*00               117 	 mov _sign_bit, c
   0004 C2 E7               118 	 clr acc.7
   0006 F8                  119 	 mov r0, a
   0007 A2 F7               120 	 mov c, b.7
   0009 33                  121 	 rlc a
   000A 24 99               122 	 add a, #153
   000C 40 09               123 	 jc expf_not_zero
                            124 	
   000E 90 00 00            125 	 mov dptr, #0
   0011 75 F0 80            126 	 mov b, #0x80
   0014 74 3F               127 	 mov a, #0x3F
   0016 22                  128 	 ret
   0017                     129 	expf_not_zero:
                            130 	
   0017 75*04 00            131 	 mov _n, #0
   001A E5 82               132 	 mov a, dpl
   001C 24 E8               133 	 add a, #0xE8
   001E E5 83               134 	 mov a, dph
   0020 34 8D               135 	 addc a, #0x8D
   0022 E5 F0               136 	 mov a, b
   0024 34 CE               137 	 addc a, #0xCE
   0026 E8                  138 	 mov a, r0
   0027 34 C0               139 	 addc a, #0xC0
   0029 E8                  140 	 mov a, r0
   002A 50 55               141 	 jnc expf_no_range_reduction
   002C                     142 	expf_range_reduction:
   002C 85 82*00            143 	 mov (_expf_y + 0), dpl
   002F 85 83*01            144 	 mov (_expf_y + 1), dph
   0032 85 F0*02            145 	 mov (_expf_y + 2), b
   0035 F5*03               146 	 mov (_expf_y + 3), a
   0037 78 3B               147 	 mov r0, #0x3B
   0039 C0 00               148 	 push ar0
   003B 78 AA               149 	 mov r0, #0xAA
   003D C0 00               150 	 push ar0
   003F 78 B8               151 	 mov r0, #0xB8
   0041 C0 00               152 	 push ar0
   0043 78 3F               153 	 mov r0, #0x3F
   0045 C0 00               154 	 push ar0
   0047 12s00r00            155 	 lcall ___fsmul
   004A 15 81               156 	 dec sp
   004C 15 81               157 	 dec sp
   004E 15 81               158 	 dec sp
   0050 15 81               159 	 dec sp
   0052 12s00r00            160 	 lcall ___fs2uchar
   0055 E5 82               161 	 mov a, dpl
   0057 F5*04               162 	 mov _n, a
   0059 24 80               163 	 add a, #128
   005B 50 03               164 	 jnc expf_range_ok
   005D 02s00r00            165 	 ljmp fs_return_inf
   0060                     166 	expf_range_ok:
   0060 78 00               167 	 mov r0,#0x00
   0062 79 80               168 	 mov r1,#0x80
   0064 7A 31               169 	 mov r2,#0x31
   0066 7B BF               170 	 mov r3,#0xBF
   0068 12s01r36            171 	 lcall expf_scale_and_add
   006B 85 82*00            172 	 mov (_expf_y + 0), dpl
   006E 85 83*01            173 	 mov (_expf_y + 1), dph
   0071 85 F0*02            174 	 mov (_expf_y + 2), b
   0074 F5*03               175 	 mov (_expf_y + 3), a
   0076 78 83               176 	 mov r0,#0x83
   0078 79 80               177 	 mov r1,#0x80
   007A 7A 5E               178 	 mov r2,#0x5E
   007C 7B 39               179 	 mov r3,#0x39
   007E 12s01r36            180 	 lcall expf_scale_and_add
   0081                     181 	expf_no_range_reduction:
                            182 ;	# 119 "expf.c"
   0081                     183 	expf_cordic_begin:
   0081 A2 F7               184 	 mov c, b.7
   0083 33                  185 	 rlc a
   0084 D2 F7               186 	 setb b.7
   0086 A9 82               187 	 mov r1, dpl
   0088 AA 83               188 	 mov r2, dph
   008A AB F0               189 	 mov r3, b
   008C 7C 00               190 	 mov r4, #0
                            191 	
                            192 	
   008E B4 79 02            193 	 cjne a, #121, exp_lshift
   0091 80 0F               194 	 sjmp exp_noshift
   0093                     195 	exp_lshift:
   0093 40 07               196 	 jc exp_rshift
                            197 	
   0095 24 87               198 	 add a, #135
   0097 12s01r6E            199 	 lcall fs_lshift_a
   009A 80 06               200 	 sjmp exp_noshift
   009C                     201 	exp_rshift:
                            202 	
   009C F4                  203 	 cpl a
   009D 24 7A               204 	 add a, #122
   009F 12s00r00            205 	 lcall fs_rshift_a
   00A2                     206 	exp_noshift:
   00A2 E4                  207 	 clr a
   00A3 F5*00               208 	 mov (_expf_y + 0), a
   00A5 F5*01               209 	 mov (_expf_y + 1), a
   00A7 F5*02               210 	 mov (_expf_y + 2), a
   00A9 75*03 20            211 	 mov (_expf_y + 3), #0x20
   00AC 90s00r00            212 	 mov dptr, #__fs_natural_log_table
   00AF F8                  213 	 mov r0, a
   00B0                     214 	exp_cordic_loop:
   00B0 E4                  215 	 clr a
   00B1 93                  216 	 movc a, @a+dptr
   00B2 F5 F0               217 	 mov b, a
   00B4 A3                  218 	 inc dptr
   00B5 E4                  219 	 clr a
   00B6 93                  220 	 movc a, @a+dptr
   00B7 FD                  221 	 mov r5, a
   00B8 A3                  222 	 inc dptr
   00B9 E4                  223 	 clr a
   00BA 93                  224 	 movc a, @a+dptr
   00BB FE                  225 	 mov r6, a
   00BC A3                  226 	 inc dptr
   00BD E4                  227 	 clr a
   00BE 93                  228 	 movc a, @a+dptr
   00BF FF                  229 	 mov r7, a
   00C0 A3                  230 	 inc dptr
   00C1 C3                  231 	 clr c
   00C2 E9                  232 	 mov a, r1
   00C3 95 F0               233 	 subb a, b
   00C5 EA                  234 	 mov a, r2
   00C6 9D                  235 	 subb a, r5
   00C7 EB                  236 	 mov a, r3
   00C8 9E                  237 	 subb a, r6
   00C9 EC                  238 	 mov a, r4
   00CA 9F                  239 	 subb a, r7
   00CB 40 30               240 	 jc exp_cordic_skip
   00CD C3                  241 	 clr c
   00CE E9                  242 	 mov a, r1
   00CF 95 F0               243 	 subb a, b
   00D1 F9                  244 	 mov r1, a
   00D2 EA                  245 	 mov a, r2
   00D3 9D                  246 	 subb a, r5
   00D4 FA                  247 	 mov r2, a
   00D5 EB                  248 	 mov a, r3
   00D6 9E                  249 	 subb a, r6
   00D7 FB                  250 	 mov r3, a
   00D8 EC                  251 	 mov a, r4
   00D9 9F                  252 	 subb a, r7
   00DA FC                  253 	 mov r4, a
   00DB 85*00 F0            254 	 mov b, (_expf_y + 0)
   00DE AD*01               255 	 mov r5, (_expf_y + 1)
   00E0 AE*02               256 	 mov r6, (_expf_y + 2)
   00E2 AF*03               257 	 mov r7, (_expf_y + 3)
   00E4 E8                  258 	 mov a, r0
   00E5 12s00r00            259 	 lcall __fs_cordic_rshift_r765_unsigned
   00E8 E5*00               260 	 mov a, (_expf_y + 0)
   00EA 25 F0               261 	 add a, b
   00EC F5*00               262 	 mov (_expf_y + 0), a
   00EE E5*01               263 	 mov a, (_expf_y + 1)
   00F0 3D                  264 	 addc a, r5
   00F1 F5*01               265 	 mov (_expf_y + 1), a
   00F3 E5*02               266 	 mov a, (_expf_y + 2)
   00F5 3E                  267 	 addc a, r6
   00F6 F5*02               268 	 mov (_expf_y + 2), a
   00F8 E5*03               269 	 mov a, (_expf_y + 3)
   00FA 3F                  270 	 addc a, r7
   00FB F5*03               271 	 mov (_expf_y + 3), a
   00FD                     272 	exp_cordic_skip:
   00FD 08                  273 	 inc r0
   00FE B8 1B AF            274 	 cjne r0, #27, exp_cordic_loop
   0101 AC*03               275 	 mov r4, (_expf_y + 3)
   0103 AB*02               276 	 mov r3, (_expf_y + 2)
   0105 AA*01               277 	 mov r2, (_expf_y + 1)
   0107 A9*00               278 	 mov r1, (_expf_y + 0)
   0109 12s00r00            279 	 lcall fs_normalize_a
                            280 	
   010C 74 7F               281 	 mov a, #127
   010E 25*04               282 	 add a, _n
   0110 F5 82               283 	 mov dpl, a
   0112 12s00r00            284 	 lcall fs_round_and_return
                            285 	
   0115 30*00 1B            286 	 jnb _sign_bit, expf_done
   0118 C0 82               287 	 push dpl
   011A C0 83               288 	 push dph
   011C C0 F0               289 	 push b
   011E C0 E0               290 	 push acc
   0120 90 00 00            291 	 mov dptr, #0
   0123 75 F0 80            292 	 mov b, #0x80
   0126 74 3F               293 	 mov a, #0x3F
   0128 12s00r00            294 	 lcall ___fsdiv
   012B 15 81               295 	 dec sp
   012D 15 81               296 	 dec sp
   012F 15 81               297 	 dec sp
   0131 15 81               298 	 dec sp
   0133                     299 	expf_done:
   0133 C2 E7               300 	 clr acc.7
                            301 	 
   0135 22                  302 	ret
                            303 ;------------------------------------------------------------
                            304 ;Allocation info for local variables in function 'dummy1'
                            305 ;------------------------------------------------------------
                            306 ;------------------------------------------------------------
                            307 ;	expf.c:234: dec	sp
                            308 ;	-----------------------------------------
                            309 ;	 function dummy1
                            310 ;	-----------------------------------------
   0136                     311 _dummy1:
                            312 ;	naked function: no prologue.
                            313 ;	expf.c:264: mov	a,   (_expf_y + 3)
                            314 	
                            315 	 .globl fs_lshift_a
   0136                     316 	expf_scale_and_add:
   0136 C0 00               317 	 push ar0
   0138 C0 01               318 	 push ar1
   013A C0 02               319 	 push ar2
   013C C0 03               320 	 push ar3
   013E 85*04 82            321 	 mov dpl, _n
   0141 12s00r00            322 	 lcall ___uchar2fs
   0144 12s00r00            323 	 lcall ___fsmul
   0147 15 81               324 	 dec sp
   0149 15 81               325 	 dec sp
   014B 15 81               326 	 dec sp
   014D 15 81               327 	 dec sp
   014F C0 82               328 	 push dpl
   0151 C0 83               329 	 push dph
   0153 C0 F0               330 	 push b
   0155 C0 E0               331 	 push acc
   0157 85*00 82            332 	 mov dpl, (_expf_y + 0)
   015A 85*01 83            333 	 mov dph, (_expf_y + 1)
   015D 85*02 F0            334 	 mov b, (_expf_y + 2)
   0160 E5*03               335 	 mov a, (_expf_y + 3)
   0162 12s00r00            336 	 lcall ___fsadd
   0165 15 81               337 	 dec sp
   0167 15 81               338 	 dec sp
   0169 15 81               339 	 dec sp
   016B 15 81               340 	 dec sp
   016D 22                  341 	 ret
                            342 	 
                            343 ;	naked function: no epilogue.
                            344 ;------------------------------------------------------------
                            345 ;Allocation info for local variables in function 'dummy'
                            346 ;------------------------------------------------------------
                            347 ;------------------------------------------------------------
                            348 ;	expf.c:267: dec	sp
                            349 ;	-----------------------------------------
                            350 ;	 function dummy
                            351 ;	-----------------------------------------
   016E                     352 _dummy:
                            353 ;	naked function: no prologue.
                            354 ;	expf.c:293: mov	a, r4
                            355 	
                            356 	 .globl fs_lshift_a
   016E                     357 	fs_lshift_a:
   016E 60 14               358 	 jz fs_lshift_done
   0170 C0 00               359 	 push ar0
   0172 F8                  360 	 mov r0, a
   0173                     361 	fs_lshift_loop:
   0173 C3                  362 	 clr c
   0174 E9                  363 	 mov a, r1
   0175 33                  364 	 rlc a
   0176 F9                  365 	 mov r1, a
   0177 EA                  366 	 mov a, r2
   0178 33                  367 	 rlc a
   0179 FA                  368 	 mov r2, a
   017A EB                  369 	 mov a, r3
   017B 33                  370 	 rlc a
   017C FB                  371 	 mov r3, a
   017D EC                  372 	 mov a, r4
   017E 33                  373 	 rlc a
   017F FC                  374 	 mov r4, a
   0180 D8 F1               375 	 djnz r0, fs_lshift_loop
   0182 D0 00               376 	 pop ar0
   0184                     377 	fs_lshift_done:
   0184 22                  378 	 ret
                            379 	 
                            380 ;	naked function: no epilogue.
                            381 	.area CSEG    (CODE)
                            382 	.area CONST   (CODE)
                            383 	.area XINIT   (CODE)
                            384 	.area CABS    (ABS,CODE)
