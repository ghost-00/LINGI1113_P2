                              1         ;; Originally from GBDK by Pascal Felber.
                              2         .area   _CODE
                              3 
   0000                       4 __divschar_rrx_s::
   0000 21 03 00              5         ld      hl,#2+1
   0003 39                    6         add     hl,sp
                              7 
   0004 5E                    8         ld      e,(hl)
   0005 2B                    9         dec     hl
   0006 6E                   10         ld      l,(hl)
                             11 
                             12         ;; Fall through
   0007                      13 __divschar_rrx_hds::
   0007 4D                   14         ld      c,l
                             15 
   0008 CDr80s00             16         call    .div8
                             17 
   000B 59                   18         ld      e,c
   000C 50                   19         ld      d,b
                             20 
   000D C9                   21         ret
                             22 
   000E                      23 __modschar_rrx_s::
   000E 21 03 00             24         ld      hl,#2+1
   0011 39                   25         add     hl,sp
                             26 
   0012 5E                   27         ld      e,(hl)
   0013 2B                   28         dec     hl
   0014 6E                   29         ld      l,(hl)
                             30 
                             31         ;; Fall through
   0015                      32 __modschar_rrx_hds::
   0015 4D                   33         ld      c,l
                             34 
   0016 CDr80s00             35         call    .div8
                             36 
                             37         ;; Already in DE
                             38 
   0019 C9                   39         ret
                             40 
   001A                      41 __divsint_rrx_s::
   001A 21 05 00             42         ld      hl,#2+3
   001D 39                   43         add     hl,sp
                             44 
   001E 56                   45         ld      d,(hl)
   001F 2B                   46         dec     hl
   0020 5E                   47         ld      e,(hl)
   0021 2B                   48         dec     hl
   0022 7E                   49         ld      a,(hl)
   0023 2B                   50         dec     hl
   0024 6E                   51         ld      l,(hl)
   0025 67                   52         ld      h,a
                             53 
                             54         ;; Fall through
   0026                      55 __divsint_rrx_hds::
   0026 44                   56         ld      b,h
   0027 4D                   57         ld      c,l
                             58 
   0028 CDr88s00             59         call    .div16
                             60 
   002B 59                   61         ld      e,c
   002C 50                   62         ld      d,b
                             63 
   002D C9                   64         ret
                             65 
   002E                      66 __modsint_rrx_s::
   002E 21 05 00             67         ld      hl,#2+3
   0031 39                   68         add     hl,sp
                             69 
   0032 56                   70         ld      d,(hl)
   0033 2B                   71         dec     hl
   0034 5E                   72         ld      e,(hl)
   0035 2B                   73         dec     hl
   0036 7E                   74         ld      a,(hl)
   0037 2B                   75         dec     hl
   0038 6E                   76         ld      l,(hl)
   0039 67                   77         ld      h,a
                             78 
                             79         ;; Fall through
   003A                      80 __modsint_rrx_hds::
   003A 44                   81         ld      b,h
   003B 4D                   82         ld      c,l
                             83 
   003C CDr88s00             84         call    .div16
                             85 
                             86         ;; Already in DE
                             87 
   003F C9                   88         ret
                             89 
                             90         ;; Unsigned
   0040                      91 __divuchar_rrx_s::
   0040 21 03 00             92         ld      hl,#2+1
   0043 39                   93         add     hl,sp
                             94 
   0044 5E                   95         ld      e,(hl)
   0045 2B                   96         dec     hl
   0046 6E                   97         ld      l,(hl)
                             98 
                             99         ;; Fall through
   0047                     100 __divuchar_rrx_hds::
   0047 4D                  101         ld      c,l
   0048 CDrBEs00            102         call    .divu8
                            103 
   004B 59                  104         ld      e,c
   004C 50                  105         ld      d,b
                            106 
   004D C9                  107         ret
                            108 
   004E                     109 __moduchar_rrx_s::
   004E 21 03 00            110         ld      hl,#2+1
   0051 39                  111         add     hl,sp
                            112 
   0052 5E                  113         ld      e,(hl)
   0053 2B                  114         dec     hl
   0054 6E                  115         ld      l,(hl)
                            116 
                            117         ;; Fall through
   0055                     118 __moduchar_rrx_hds::
   0055 4D                  119         ld      c,l
   0056 CDrBEs00            120         call    .divu8
                            121 
                            122         ;; Already in DE
                            123 
   0059 C9                  124         ret
                            125 
   005A                     126 __divuint_rrx_s::
   005A 21 05 00            127         ld      hl,#2+3
   005D 39                  128         add     hl,sp
                            129 
   005E 56                  130         ld      d,(hl)
   005F 2B                  131         dec     hl
   0060 5E                  132         ld      e,(hl)
   0061 2B                  133         dec     hl
   0062 7E                  134         ld      a,(hl)
   0063 2B                  135         dec     hl
   0064 6E                  136         ld      l,(hl)
   0065 67                  137         ld      h,a
                            138 
                            139         ;; Fall through
   0066                     140 __divuint_rrx_hds::
   0066 44                  141         ld      b,h
   0067 4D                  142         ld      c,l
   0068 CDrC1s00            143         call    .divu16
                            144 
   006B 59                  145         ld      e,c
   006C 50                  146         ld      d,b
                            147 
   006D C9                  148         ret
                            149 
   006E                     150 __moduint_rrx_s::
   006E 21 05 00            151         ld      hl,#2+3
   0071 39                  152         add     hl,sp
                            153 
   0072 56                  154         ld      d,(hl)
   0073 2B                  155         dec     hl
   0074 5E                  156         ld      e,(hl)
   0075 2B                  157         dec     hl
   0076 7E                  158         ld      a,(hl)
   0077 2B                  159         dec     hl
   0078 6E                  160         ld      l,(hl)
   0079 67                  161         ld      h,a
                            162         ;; Fall through
                            163 
   007A                     164 __moduint_rrx_hds::
   007A 44                  165         ld      b,h
   007B 4D                  166         ld      c,l
                            167 
   007C CDrC1s00            168         call    .divu16
                            169 
                            170         ;; Already in DE
                            171 
   007F C9                  172         ret
                            173 
   0080                     174 .div8::
   0080                     175 .mod8::
   0080 79                  176         ld      a,c             ; Sign extend
   0081 07                  177         rlca
   0082 9F                  178         sbc     a
   0083 47                  179         ld      b,a
   0084 7B                  180         ld      a,e             ; Sign extend
   0085 07                  181         rlca
   0086 9F                  182         sbc     a
   0087 57                  183         ld      d,a
                            184 
                            185         ; Fall through to .div16
                            186 
                            187         ;; 16-bit division
                            188         ;;
                            189         ;; Entry conditions
                            190         ;;   BC = dividend
                            191         ;;   DE = divisor
                            192         ;;
                            193         ;; Exit conditions
                            194         ;;   BC = quotient
                            195         ;;   DE = remainder
                            196         ;;   If divisor is non-zero, carry=0
                            197         ;;   If divisor is 0, carry=1 and both quotient and remainder are 0
                            198         ;;
                            199         ;; Register used: AF,BC,DE,HL
   0088                     200 .div16::
   0088                     201 .mod16::
                            202         ;; Determine sign of quotient by xor-ing high bytes of dividend
                            203         ;;  and divisor. Quotient is positive if signs are the same, negative
                            204         ;;  if signs are different
                            205         ;; Remainder has same sign as dividend
   0088 78                  206         ld      a,b             ; Get high byte of dividend
   0089 F5                  207         push    af              ; Save as sign of remainder
   008A AA                  208         xor     d               ; Xor with high byte of divisor
   008B F5                  209         push    af              ; Save sign of quotient
                            210 
                            211         ;; Take absolute value of divisor
   008C CB 7A               212         bit     7,d
   008E 28 06               213         jr      Z,.chkde        ; Jump if divisor is positive
   0090 97                  214         sub     a               ; Substract divisor from 0
   0091 93                  215         sub     e
   0092 5F                  216         ld      e,a
   0093 9F                  217         sbc     a               ; Propagate borrow (A=0xFF if borrow)
   0094 92                  218         sub     d
   0095 57                  219         ld      d,a
                            220         ;; Take absolute value of dividend
   0096                     221 .chkde:
   0096 CB 78               222         bit     7,b
   0098 28 06               223         jr      Z,.dodiv        ; Jump if dividend is positive
   009A 97                  224         sub     a               ; Substract dividend from 0
   009B 91                  225         sub     c
   009C 4F                  226         ld      c,a
   009D 9F                  227         sbc     a               ; Propagate borrow (A=0xFF if borrow)
   009E 90                  228         sub     b
   009F 47                  229         ld      b,a
                            230         ;; Divide absolute values
   00A0                     231 .dodiv:
   00A0 CDrC1s00            232         call    .divu16
   00A3 38 16               233         jr      C,.exit         ; Exit if divide by zero
                            234         ;; Negate quotient if it is negative
   00A5 F1                  235         pop     af              ; recover sign of quotient
   00A6 E6 80               236         and     #0x80
   00A8 28 06               237         jr      Z,.dorem        ; Jump if quotient is positive
   00AA 97                  238         sub     a               ; Substract quotient from 0
   00AB 91                  239         sub     c
   00AC 4F                  240         ld      c,a
   00AD 9F                  241         sbc     a               ; Propagate borrow (A=0xFF if borrow)
   00AE 90                  242         sub     b
   00AF 47                  243         ld      b,a
   00B0                     244 .dorem:
                            245         ;; Negate remainder if it is negative
   00B0 F1                  246         pop     af              ; recover sign of remainder
   00B1 E6 80               247         and     #0x80
   00B3 C8                  248         ret     Z               ; Return if remainder is positive
   00B4 97                  249         sub     a               ; Substract remainder from 0
   00B5 93                  250         sub     e
   00B6 5F                  251         ld      e,a
   00B7 9F                  252         sbc     a               ; Propagate remainder (A=0xFF if borrow)
   00B8 92                  253         sub     d
   00B9 57                  254         ld      d,a
   00BA C9                  255         ret
   00BB                     256 .exit:
   00BB F1                  257         pop     af
   00BC F1                  258         pop     af
   00BD C9                  259         ret
                            260 
   00BE                     261 .divu8::
   00BE                     262 .modu8::
   00BE 06 00               263         ld      b,#0x00
   00C0 50                  264         ld      d,b
                            265         ; Fall through to divu16
                            266 
   00C1                     267 .divu16::
   00C1                     268 .modu16::
                            269         ;; Check for division by zero
   00C1 7B                  270         ld      a,e
   00C2 B2                  271         or      d
   00C3 20 07               272         jr      NZ,.divide      ; Branch if divisor is non-zero
   00C5 01 00 00            273         ld      bc,#0x00        ; Divide by zero error
   00C8 50                  274         ld      d,b
   00C9 59                  275         ld      e,c
   00CA 37                  276         scf                     ; Set carry, invalid result
   00CB C9                  277         ret
   00CC                     278 .divide:
   00CC 69                  279         ld      l,c             ; L = low byte of dividend/quotient
   00CD 60                  280         ld      h,b             ; H = high byte of dividend/quotient
   00CE 01 00 00            281         ld      bc,#0x00        ; BC = remainder
   00D1 B7                  282         or      a               ; Clear carry to start
   00D2 3E 10               283         ld      a,#16           ; 16 bits in dividend
   00D4                     284 .dvloop:
                            285         ;; Shift next bit of quotient into bit 0 of dividend
                            286         ;; Shift next MSB of dividend into LSB of remainder
                            287         ;; BC holds both dividend and quotient. While we shift a bit from
                            288         ;;  MSB of dividend, we shift next bit of quotient in from carry
                            289         ;; HL holds remainder
                            290         ;; Do a 32-bit left shift, shifting carry to L, L to H,
                            291         ;;  H to C, C to B
   00D4 F5                  292         push    af              ; save number of bits remaining
   00D5 CB 15               293         rl      l               ; Carry (next bit of quotient) to bit 0
   00D7 CB 14               294         rl      h               ; Shift remaining bytes
   00D9 CB 11               295         rl      c
   00DB CB 10               296         rl      b               ; Clears carry since BC was 0
                            297         ;; If remainder is >= divisor, next bit of quotient is 1. This
                            298         ;;  bit goes to carry
   00DD C5                  299         push    bc              ; Save current remainder
   00DE 79                  300         ld      a,c             ; Substract divisor from remainder
   00DF 9B                  301         sbc     e
   00E0 4F                  302         ld      c,a
   00E1 78                  303         ld      a,b
   00E2 9A                  304         sbc     d
   00E3 47                  305         ld      b,a
   00E4 3F                  306         ccf                     ; Complement borrow so 1 indicates a
                            307                                 ;  successful substraction (this is the
                            308                                 ;  next bit of quotient)
   00E5 38 08               309         jr      C,.drop         ; Jump if remainder is >= dividend
   00E7 C1                  310         pop     bc              ; Otherwise, restore remainder
   00E8 F1                  311         pop     af              ; recover # bits remaining, carry flag destroyed
   00E9 3D                  312         dec     a
   00EA B7                  313         or      a               ; restore (clear) the carry flag
   00EB 20 E7               314         jr      NZ,.dvloop
   00ED 18 09               315         jr      .nodrop
   00EF                     316 .drop:
   00EF 33                  317         inc     sp
   00F0 33                  318         inc     sp
   00F1 F1                  319         pop     af              ; recover # bits remaining, carry flag destroyed
   00F2 3D                  320         dec     a
   00F3 37                  321         scf                     ; restore (set) the carry flag
   00F4 20 DE               322         jr      NZ,.dvloop
   00F6 18 00               323         jr      .nodrop
   00F8                     324 .nodrop:
                            325         ;; Shift last carry bit into quotient
   00F8 50                  326         ld      d,b             ; DE = remainder
   00F9 59                  327         ld      e,c
   00FA CB 15               328         rl      l               ; Carry to L
   00FC 4D                  329         ld      c,l             ; C = low byte of quotient
   00FD CB 14               330         rl      h
   00FF 44                  331         ld      b,h             ; B = high byte of quotient
   0100 B7                  332         or      a               ; Clear carry, valid result
   0101 C9                  333         ret
