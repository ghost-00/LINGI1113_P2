                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.4 #5595 (Oct 23 2013) (Mac OS X ppc)
                              4 ; This file was generated Wed Oct 23 12:25:59 2013
                              5 ;--------------------------------------------------------
                              6 	.module sincoshf
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _sincoshf
                             13 ;--------------------------------------------------------
                             14 ; special function registers
                             15 ;--------------------------------------------------------
                             16 	.area RSEG    (ABS,DATA)
   0000                      17 	.org 0x0000
                             18 ;--------------------------------------------------------
                             19 ; special function bits
                             20 ;--------------------------------------------------------
                             21 	.area RSEG    (ABS,DATA)
   0000                      22 	.org 0x0000
                             23 ;--------------------------------------------------------
                             24 ; overlayable register banks
                             25 ;--------------------------------------------------------
                             26 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      27 	.ds 8
                             28 ;--------------------------------------------------------
                             29 ; overlayable bit register bank
                             30 ;--------------------------------------------------------
                             31 	.area BIT_BANK	(REL,OVR,DATA)
   0000                      32 bits:
   0000                      33 	.ds 1
                    8000     34 	b0 = bits[0]
                    8100     35 	b1 = bits[1]
                    8200     36 	b2 = bits[2]
                    8300     37 	b3 = bits[3]
                    8400     38 	b4 = bits[4]
                    8500     39 	b5 = bits[5]
                    8600     40 	b6 = bits[6]
                    8700     41 	b7 = bits[7]
                             42 ;--------------------------------------------------------
                             43 ; internal ram data
                             44 ;--------------------------------------------------------
                             45 	.area DSEG    (DATA)
                             46 ;--------------------------------------------------------
                             47 ; overlayable items in internal ram 
                             48 ;--------------------------------------------------------
                             49 	.area OSEG    (OVR,DATA)
                             50 ;--------------------------------------------------------
                             51 ; indirectly addressable internal ram data
                             52 ;--------------------------------------------------------
                             53 	.area ISEG    (DATA)
                             54 ;--------------------------------------------------------
                             55 ; absolute internal ram data
                             56 ;--------------------------------------------------------
                             57 	.area IABS    (ABS,DATA)
                             58 	.area IABS    (ABS,DATA)
                             59 ;--------------------------------------------------------
                             60 ; bit data
                             61 ;--------------------------------------------------------
                             62 	.area BSEG    (BIT)
                             63 ;--------------------------------------------------------
                             64 ; paged external ram data
                             65 ;--------------------------------------------------------
                             66 	.area PSEG    (PAG,XDATA)
                             67 ;--------------------------------------------------------
                             68 ; external ram data
                             69 ;--------------------------------------------------------
                             70 	.area XSEG    (XDATA)
                             71 ;--------------------------------------------------------
                             72 ; absolute external ram data
                             73 ;--------------------------------------------------------
                             74 	.area XABS    (ABS,XDATA)
                             75 ;--------------------------------------------------------
                             76 ; external initialized ram data
                             77 ;--------------------------------------------------------
                             78 	.area XISEG   (XDATA)
                             79 	.area HOME    (CODE)
                             80 	.area GSINIT0 (CODE)
                             81 	.area GSINIT1 (CODE)
                             82 	.area GSINIT2 (CODE)
                             83 	.area GSINIT3 (CODE)
                             84 	.area GSINIT4 (CODE)
                             85 	.area GSINIT5 (CODE)
                             86 	.area GSINIT  (CODE)
                             87 	.area GSFINAL (CODE)
                             88 	.area CSEG    (CODE)
                             89 ;--------------------------------------------------------
                             90 ; global & static initialisations
                             91 ;--------------------------------------------------------
                             92 	.area HOME    (CODE)
                             93 	.area GSINIT  (CODE)
                             94 	.area GSFINAL (CODE)
                             95 	.area GSINIT  (CODE)
                             96 ;--------------------------------------------------------
                             97 ; Home
                             98 ;--------------------------------------------------------
                             99 	.area HOME    (CODE)
                            100 	.area HOME    (CODE)
                            101 ;--------------------------------------------------------
                            102 ; code
                            103 ;--------------------------------------------------------
                            104 	.area CSEG    (CODE)
                            105 ;------------------------------------------------------------
                            106 ;Allocation info for local variables in function 'sincoshf'
                            107 ;------------------------------------------------------------
                            108 ;iscosh                    Allocated to stack - offset -4
                            109 ;x                         Allocated to stack - offset 1
                            110 ;y                         Allocated to registers r2 r3 r4 r5 
                            111 ;w                         Allocated to registers r2 r3 r4 r5 
                            112 ;z                         Allocated to stack - offset 5
                            113 ;sign                      Allocated to registers b0 
                            114 ;sloc0                     Allocated to stack - offset 9
                            115 ;------------------------------------------------------------
                            116 ;	sincoshf.c:46: float sincoshf(const float x, const int iscosh)
                            117 ;	-----------------------------------------
                            118 ;	 function sincoshf
                            119 ;	-----------------------------------------
   0000                     120 _sincoshf:
                    0002    121 	ar2 = 0x02
                    0003    122 	ar3 = 0x03
                    0004    123 	ar4 = 0x04
                    0005    124 	ar5 = 0x05
                    0006    125 	ar6 = 0x06
                    0007    126 	ar7 = 0x07
                    0000    127 	ar0 = 0x00
                    0001    128 	ar1 = 0x01
   0000 C0*00               129 	push	_bp
   0002 85 81*00            130 	mov	_bp,sp
   0005 C0 82               131 	push	dpl
   0007 C0 83               132 	push	dph
   0009 C0 F0               133 	push	b
   000B C0 E0               134 	push	acc
   000D E5 81               135 	mov	a,sp
   000F 24 0C               136 	add	a,#0x0c
   0011 F5 81               137 	mov	sp,a
                            138 ;	sincoshf.c:51: if (x<0.0) { y=-x; sign=1; }
   0013 E4                  139 	clr	a
   0014 C0 E0               140 	push	acc
   0016 C0 E0               141 	push	acc
   0018 C0 E0               142 	push	acc
   001A C0 E0               143 	push	acc
   001C A8*00               144 	mov	r0,_bp
   001E 08                  145 	inc	r0
   001F 86 82               146 	mov	dpl,@r0
   0021 08                  147 	inc	r0
   0022 86 83               148 	mov	dph,@r0
   0024 08                  149 	inc	r0
   0025 86 F0               150 	mov	b,@r0
   0027 08                  151 	inc	r0
   0028 E6                  152 	mov	a,@r0
   0029 12s00r00            153 	lcall	___fslt
   002C AE 82               154 	mov	r6,dpl
   002E E5 81               155 	mov	a,sp
   0030 24 FC               156 	add	a,#0xfc
   0032 F5 81               157 	mov	sp,a
   0034 EE                  158 	mov	a,r6
   0035 60 14               159 	jz	00102$
   0037 A8*00               160 	mov	r0,_bp
   0039 08                  161 	inc	r0
   003A 86 02               162 	mov	ar2,@r0
   003C 08                  163 	inc	r0
   003D 86 03               164 	mov	ar3,@r0
   003F 08                  165 	inc	r0
   0040 86 04               166 	mov	ar4,@r0
   0042 08                  167 	inc	r0
   0043 E6                  168 	mov	a,@r0
   0044 B2 E7               169 	cpl	acc.7
   0046 FD                  170 	mov	r5,a
   0047 D2*00               171 	setb	b0
   0049 80 10               172 	sjmp	00103$
   004B                     173 00102$:
                            174 ;	sincoshf.c:52: else { y=x;  sign=0; }
   004B A8*00               175 	mov	r0,_bp
   004D 08                  176 	inc	r0
   004E 86 02               177 	mov	ar2,@r0
   0050 08                  178 	inc	r0
   0051 86 03               179 	mov	ar3,@r0
   0053 08                  180 	inc	r0
   0054 86 04               181 	mov	ar4,@r0
   0056 08                  182 	inc	r0
   0057 86 05               183 	mov	ar5,@r0
   0059 C2*00               184 	clr	b0
   005B                     185 00103$:
                            186 ;	sincoshf.c:54: if ((y>1.0) || iscosh)
   005B C0 02               187 	push	ar2
   005D C0 03               188 	push	ar3
   005F C0 04               189 	push	ar4
   0061 C0 05               190 	push	ar5
   0063 C0*00               191 	push	bits
   0065 E4                  192 	clr	a
   0066 C0 E0               193 	push	acc
   0068 C0 E0               194 	push	acc
   006A 74 80               195 	mov	a,#0x80
   006C C0 E0               196 	push	acc
   006E 74 3F               197 	mov	a,#0x3F
   0070 C0 E0               198 	push	acc
   0072 8A 82               199 	mov	dpl,r2
   0074 8B 83               200 	mov	dph,r3
   0076 8C F0               201 	mov	b,r4
   0078 ED                  202 	mov	a,r5
   0079 12s00r00            203 	lcall	___fsgt
   007C AE 82               204 	mov	r6,dpl
   007E E5 81               205 	mov	a,sp
   0080 24 FC               206 	add	a,#0xfc
   0082 F5 81               207 	mov	sp,a
   0084 D0*00               208 	pop	bits
   0086 D0 05               209 	pop	ar5
   0088 D0 04               210 	pop	ar4
   008A D0 03               211 	pop	ar3
   008C D0 02               212 	pop	ar2
   008E EE                  213 	mov	a,r6
   008F 70 0D               214 	jnz	00117$
   0091 E5*00               215 	mov	a,_bp
   0093 24 FC               216 	add	a,#0xfc
   0095 F8                  217 	mov	r0,a
   0096 E6                  218 	mov	a,@r0
   0097 08                  219 	inc	r0
   0098 46                  220 	orl	a,@r0
   0099 70 03               221 	jnz	00132$
   009B 02s02rDC            222 	ljmp	00118$
   009E                     223 00132$:
   009E                     224 00117$:
                            225 ;	sincoshf.c:56: if(y>YBAR)
   009E C0 02               226 	push	ar2
   00A0 C0 03               227 	push	ar3
   00A2 C0 04               228 	push	ar4
   00A4 C0 05               229 	push	ar5
   00A6 C0*00               230 	push	bits
   00A8 E4                  231 	clr	a
   00A9 C0 E0               232 	push	acc
   00AB C0 E0               233 	push	acc
   00AD 74 10               234 	mov	a,#0x10
   00AF C0 E0               235 	push	acc
   00B1 74 41               236 	mov	a,#0x41
   00B3 C0 E0               237 	push	acc
   00B5 8A 82               238 	mov	dpl,r2
   00B7 8B 83               239 	mov	dph,r3
   00B9 8C F0               240 	mov	b,r4
   00BB ED                  241 	mov	a,r5
   00BC 12s00r00            242 	lcall	___fsgt
   00BF AE 82               243 	mov	r6,dpl
   00C1 E5 81               244 	mov	a,sp
   00C3 24 FC               245 	add	a,#0xfc
   00C5 F5 81               246 	mov	sp,a
   00C7 D0*00               247 	pop	bits
   00C9 D0 05               248 	pop	ar5
   00CB D0 04               249 	pop	ar4
   00CD D0 03               250 	pop	ar3
   00CF D0 02               251 	pop	ar2
   00D1 EE                  252 	mov	a,r6
   00D2 70 03               253 	jnz	00133$
   00D4 02s01rE6            254 	ljmp	00110$
   00D7                     255 00133$:
                            256 ;	sincoshf.c:58: w=y-K1;
   00D7 C0*00               257 	push	bits
   00D9 E4                  258 	clr	a
   00DA C0 E0               259 	push	acc
   00DC 74 73               260 	mov	a,#0x73
   00DE C0 E0               261 	push	acc
   00E0 74 31               262 	mov	a,#0x31
   00E2 C0 E0               263 	push	acc
   00E4 74 3F               264 	mov	a,#0x3F
   00E6 C0 E0               265 	push	acc
   00E8 8A 82               266 	mov	dpl,r2
   00EA 8B 83               267 	mov	dph,r3
   00EC 8C F0               268 	mov	b,r4
   00EE ED                  269 	mov	a,r5
   00EF 12s00r00            270 	lcall	___fssub
   00F2 AA 82               271 	mov	r2,dpl
   00F4 AB 83               272 	mov	r3,dph
   00F6 AC F0               273 	mov	r4,b
   00F8 FD                  274 	mov	r5,a
   00F9 E5 81               275 	mov	a,sp
   00FB 24 FC               276 	add	a,#0xfc
   00FD F5 81               277 	mov	sp,a
   00FF D0*00               278 	pop	bits
                            279 ;	sincoshf.c:59: if (w>WMAX)
   0101 C0 02               280 	push	ar2
   0103 C0 03               281 	push	ar3
   0105 C0 04               282 	push	ar4
   0107 C0 05               283 	push	ar5
   0109 C0*00               284 	push	bits
   010B 74 CF               285 	mov	a,#0xCF
   010D C0 E0               286 	push	acc
   010F 74 BD               287 	mov	a,#0xBD
   0111 C0 E0               288 	push	acc
   0113 74 33               289 	mov	a,#0x33
   0115 C0 E0               290 	push	acc
   0117 74 42               291 	mov	a,#0x42
   0119 C0 E0               292 	push	acc
   011B 8A 82               293 	mov	dpl,r2
   011D 8B 83               294 	mov	dph,r3
   011F 8C F0               295 	mov	b,r4
   0121 ED                  296 	mov	a,r5
   0122 12s00r00            297 	lcall	___fsgt
   0125 AE 82               298 	mov	r6,dpl
   0127 E5 81               299 	mov	a,sp
   0129 24 FC               300 	add	a,#0xfc
   012B F5 81               301 	mov	sp,a
   012D D0*00               302 	pop	bits
   012F D0 05               303 	pop	ar5
   0131 D0 04               304 	pop	ar4
   0133 D0 03               305 	pop	ar3
   0135 D0 02               306 	pop	ar2
   0137 EE                  307 	mov	a,r6
   0138 60 19               308 	jz	00105$
                            309 ;	sincoshf.c:61: errno=ERANGE;
   013A 75*00 22            310 	mov	_errno,#0x22
   013D E4                  311 	clr	a
   013E F5*01               312 	mov	(_errno + 1),a
                            313 ;	sincoshf.c:62: z=HUGE_VALF;
   0140 E5*00               314 	mov	a,_bp
   0142 24 05               315 	add	a,#0x05
   0144 F8                  316 	mov	r0,a
   0145 76 FF               317 	mov	@r0,#0xFF
   0147 08                  318 	inc	r0
   0148 76 FF               319 	mov	@r0,#0xFF
   014A 08                  320 	inc	r0
   014B 76 7F               321 	mov	@r0,#0x7F
   014D 08                  322 	inc	r0
   014E 76 7F               323 	mov	@r0,#0x7F
   0150 02s02rC1            324 	ljmp	00111$
   0153                     325 00105$:
                            326 ;	sincoshf.c:66: z=expf(w);
   0153 8A 82               327 	mov	dpl,r2
   0155 8B 83               328 	mov	dph,r3
   0157 8C F0               329 	mov	b,r4
   0159 ED                  330 	mov	a,r5
   015A C0*00               331 	push	bits
   015C 12s00r00            332 	lcall	_expf
   015F AA 82               333 	mov	r2,dpl
   0161 AB 83               334 	mov	r3,dph
   0163 AC F0               335 	mov	r4,b
   0165 FD                  336 	mov	r5,a
   0166 D0*00               337 	pop	bits
   0168 E5*00               338 	mov	a,_bp
   016A 24 05               339 	add	a,#0x05
   016C F8                  340 	mov	r0,a
   016D A6 02               341 	mov	@r0,ar2
   016F 08                  342 	inc	r0
   0170 A6 03               343 	mov	@r0,ar3
   0172 08                  344 	inc	r0
   0173 A6 04               345 	mov	@r0,ar4
   0175 08                  346 	inc	r0
   0176 A6 05               347 	mov	@r0,ar5
                            348 ;	sincoshf.c:67: z+=K3*z;
   0178 C0*00               349 	push	bits
   017A E5*00               350 	mov	a,_bp
   017C 24 05               351 	add	a,#0x05
   017E F8                  352 	mov	r0,a
   017F E6                  353 	mov	a,@r0
   0180 C0 E0               354 	push	acc
   0182 08                  355 	inc	r0
   0183 E6                  356 	mov	a,@r0
   0184 C0 E0               357 	push	acc
   0186 08                  358 	inc	r0
   0187 E6                  359 	mov	a,@r0
   0188 C0 E0               360 	push	acc
   018A 08                  361 	inc	r0
   018B E6                  362 	mov	a,@r0
   018C C0 E0               363 	push	acc
   018E 90 08 97            364 	mov	dptr,#0x0897
   0191 75 F0 68            365 	mov	b,#0x68
   0194 74 37               366 	mov	a,#0x37
   0196 12s00r00            367 	lcall	___fsmul
   0199 AA 82               368 	mov	r2,dpl
   019B AB 83               369 	mov	r3,dph
   019D AC F0               370 	mov	r4,b
   019F FD                  371 	mov	r5,a
   01A0 E5 81               372 	mov	a,sp
   01A2 24 FC               373 	add	a,#0xfc
   01A4 F5 81               374 	mov	sp,a
   01A6 D0*00               375 	pop	bits
   01A8 C0*00               376 	push	bits
   01AA C0 02               377 	push	ar2
   01AC C0 03               378 	push	ar3
   01AE C0 04               379 	push	ar4
   01B0 C0 05               380 	push	ar5
   01B2 E5*00               381 	mov	a,_bp
   01B4 24 05               382 	add	a,#0x05
   01B6 F8                  383 	mov	r0,a
   01B7 86 82               384 	mov	dpl,@r0
   01B9 08                  385 	inc	r0
   01BA 86 83               386 	mov	dph,@r0
   01BC 08                  387 	inc	r0
   01BD 86 F0               388 	mov	b,@r0
   01BF 08                  389 	inc	r0
   01C0 E6                  390 	mov	a,@r0
   01C1 12s00r00            391 	lcall	___fsadd
   01C4 AA 82               392 	mov	r2,dpl
   01C6 AB 83               393 	mov	r3,dph
   01C8 AC F0               394 	mov	r4,b
   01CA FD                  395 	mov	r5,a
   01CB E5 81               396 	mov	a,sp
   01CD 24 FC               397 	add	a,#0xfc
   01CF F5 81               398 	mov	sp,a
   01D1 D0*00               399 	pop	bits
   01D3 E5*00               400 	mov	a,_bp
   01D5 24 05               401 	add	a,#0x05
   01D7 F8                  402 	mov	r0,a
   01D8 A6 02               403 	mov	@r0,ar2
   01DA 08                  404 	inc	r0
   01DB A6 03               405 	mov	@r0,ar3
   01DD 08                  406 	inc	r0
   01DE A6 04               407 	mov	@r0,ar4
   01E0 08                  408 	inc	r0
   01E1 A6 05               409 	mov	@r0,ar5
   01E3 02s02rC1            410 	ljmp	00111$
   01E6                     411 00110$:
                            412 ;	sincoshf.c:72: z=expf(y);
   01E6 8A 82               413 	mov	dpl,r2
   01E8 8B 83               414 	mov	dph,r3
   01EA 8C F0               415 	mov	b,r4
   01EC ED                  416 	mov	a,r5
   01ED C0*00               417 	push	bits
   01EF 12s00r00            418 	lcall	_expf
   01F2 AA 82               419 	mov	r2,dpl
   01F4 AB 83               420 	mov	r3,dph
   01F6 AC F0               421 	mov	r4,b
   01F8 FD                  422 	mov	r5,a
   01F9 D0*00               423 	pop	bits
   01FB E5*00               424 	mov	a,_bp
   01FD 24 05               425 	add	a,#0x05
   01FF F8                  426 	mov	r0,a
   0200 A6 02               427 	mov	@r0,ar2
   0202 08                  428 	inc	r0
   0203 A6 03               429 	mov	@r0,ar3
   0205 08                  430 	inc	r0
   0206 A6 04               431 	mov	@r0,ar4
   0208 08                  432 	inc	r0
   0209 A6 05               433 	mov	@r0,ar5
                            434 ;	sincoshf.c:73: w=1.0/z;
   020B C0*00               435 	push	bits
   020D E5*00               436 	mov	a,_bp
   020F 24 05               437 	add	a,#0x05
   0211 F8                  438 	mov	r0,a
   0212 E6                  439 	mov	a,@r0
   0213 C0 E0               440 	push	acc
   0215 08                  441 	inc	r0
   0216 E6                  442 	mov	a,@r0
   0217 C0 E0               443 	push	acc
   0219 08                  444 	inc	r0
   021A E6                  445 	mov	a,@r0
   021B C0 E0               446 	push	acc
   021D 08                  447 	inc	r0
   021E E6                  448 	mov	a,@r0
   021F C0 E0               449 	push	acc
   0221 90 00 00            450 	mov	dptr,#0x0000
   0224 75 F0 80            451 	mov	b,#0x80
   0227 74 3F               452 	mov	a,#0x3F
   0229 12s00r00            453 	lcall	___fsdiv
   022C C8                  454 	xch	a,r0
   022D E5*00               455 	mov	a,_bp
   022F 24 09               456 	add	a,#0x09
   0231 C8                  457 	xch	a,r0
   0232 A6 82               458 	mov	@r0,dpl
   0234 08                  459 	inc	r0
   0235 A6 83               460 	mov	@r0,dph
   0237 08                  461 	inc	r0
   0238 A6 F0               462 	mov	@r0,b
   023A 08                  463 	inc	r0
   023B F6                  464 	mov	@r0,a
   023C E5 81               465 	mov	a,sp
   023E 24 FC               466 	add	a,#0xfc
   0240 F5 81               467 	mov	sp,a
   0242 D0*00               468 	pop	bits
   0244 E5*00               469 	mov	a,_bp
   0246 24 09               470 	add	a,#0x09
   0248 F8                  471 	mov	r0,a
   0249 86 02               472 	mov	ar2,@r0
   024B 08                  473 	inc	r0
   024C 86 03               474 	mov	ar3,@r0
   024E 08                  475 	inc	r0
   024F 86 04               476 	mov	ar4,@r0
   0251 08                  477 	inc	r0
   0252 86 05               478 	mov	ar5,@r0
                            479 ;	sincoshf.c:74: if(!iscosh) w=-w;
   0254 E5*00               480 	mov	a,_bp
   0256 24 FC               481 	add	a,#0xfc
   0258 F8                  482 	mov	r0,a
   0259 E6                  483 	mov	a,@r0
   025A 08                  484 	inc	r0
   025B 46                  485 	orl	a,@r0
   025C 70 04               486 	jnz	00108$
   025E ED                  487 	mov	a,r5
   025F B2 E7               488 	cpl	acc.7
   0261 FD                  489 	mov	r5,a
   0262                     490 00108$:
                            491 ;	sincoshf.c:75: z=(z+w)*0.5;
   0262 C0*00               492 	push	bits
   0264 C0 02               493 	push	ar2
   0266 C0 03               494 	push	ar3
   0268 C0 04               495 	push	ar4
   026A C0 05               496 	push	ar5
   026C E5*00               497 	mov	a,_bp
   026E 24 05               498 	add	a,#0x05
   0270 F8                  499 	mov	r0,a
   0271 86 82               500 	mov	dpl,@r0
   0273 08                  501 	inc	r0
   0274 86 83               502 	mov	dph,@r0
   0276 08                  503 	inc	r0
   0277 86 F0               504 	mov	b,@r0
   0279 08                  505 	inc	r0
   027A E6                  506 	mov	a,@r0
   027B 12s00r00            507 	lcall	___fsadd
   027E AA 82               508 	mov	r2,dpl
   0280 AB 83               509 	mov	r3,dph
   0282 AC F0               510 	mov	r4,b
   0284 FD                  511 	mov	r5,a
   0285 E5 81               512 	mov	a,sp
   0287 24 FC               513 	add	a,#0xfc
   0289 F5 81               514 	mov	sp,a
   028B D0*00               515 	pop	bits
   028D C0*00               516 	push	bits
   028F C0 02               517 	push	ar2
   0291 C0 03               518 	push	ar3
   0293 C0 04               519 	push	ar4
   0295 C0 05               520 	push	ar5
   0297 90 00 00            521 	mov	dptr,#(0x00&0x00ff)
   029A E4                  522 	clr	a
   029B F5 F0               523 	mov	b,a
   029D 74 3F               524 	mov	a,#0x3F
   029F 12s00r00            525 	lcall	___fsmul
   02A2 AA 82               526 	mov	r2,dpl
   02A4 AB 83               527 	mov	r3,dph
   02A6 AC F0               528 	mov	r4,b
   02A8 FD                  529 	mov	r5,a
   02A9 E5 81               530 	mov	a,sp
   02AB 24 FC               531 	add	a,#0xfc
   02AD F5 81               532 	mov	sp,a
   02AF D0*00               533 	pop	bits
   02B1 E5*00               534 	mov	a,_bp
   02B3 24 05               535 	add	a,#0x05
   02B5 F8                  536 	mov	r0,a
   02B6 A6 02               537 	mov	@r0,ar2
   02B8 08                  538 	inc	r0
   02B9 A6 03               539 	mov	@r0,ar3
   02BB 08                  540 	inc	r0
   02BC A6 04               541 	mov	@r0,ar4
   02BE 08                  542 	inc	r0
   02BF A6 05               543 	mov	@r0,ar5
   02C1                     544 00111$:
                            545 ;	sincoshf.c:77: if(sign) z=-z;
   02C1 20*00 03            546 	jb	b0,00136$
   02C4 02s04r9E            547 	ljmp	00119$
   02C7                     548 00136$:
   02C7 E5*00               549 	mov	a,_bp
   02C9 24 05               550 	add	a,#0x05
   02CB F8                  551 	mov	r0,a
   02CC E6                  552 	mov	a,@r0
   02CD F6                  553 	mov	@r0,a
   02CE 08                  554 	inc	r0
   02CF E6                  555 	mov	a,@r0
   02D0 F6                  556 	mov	@r0,a
   02D1 08                  557 	inc	r0
   02D2 E6                  558 	mov	a,@r0
   02D3 F6                  559 	mov	@r0,a
   02D4 08                  560 	inc	r0
   02D5 E6                  561 	mov	a,@r0
   02D6 B2 E7               562 	cpl	acc.7
   02D8 F6                  563 	mov	@r0,a
   02D9 02s04r9E            564 	ljmp	00119$
   02DC                     565 00118$:
                            566 ;	sincoshf.c:81: if (y<EPS)
   02DC E4                  567 	clr	a
   02DD C0 E0               568 	push	acc
   02DF C0 E0               569 	push	acc
   02E1 74 80               570 	mov	a,#0x80
   02E3 C0 E0               571 	push	acc
   02E5 74 39               572 	mov	a,#0x39
   02E7 C0 E0               573 	push	acc
   02E9 8A 82               574 	mov	dpl,r2
   02EB 8B 83               575 	mov	dph,r3
   02ED 8C F0               576 	mov	b,r4
   02EF ED                  577 	mov	a,r5
   02F0 12s00r00            578 	lcall	___fslt
   02F3 AE 82               579 	mov	r6,dpl
   02F5 E5 81               580 	mov	a,sp
   02F7 24 FC               581 	add	a,#0xfc
   02F9 F5 81               582 	mov	sp,a
   02FB EE                  583 	mov	a,r6
   02FC 60 19               584 	jz	00115$
                            585 ;	sincoshf.c:82: z=x;
   02FE A8*00               586 	mov	r0,_bp
   0300 08                  587 	inc	r0
   0301 E5*00               588 	mov	a,_bp
   0303 24 05               589 	add	a,#0x05
   0305 F9                  590 	mov	r1,a
   0306 E6                  591 	mov	a,@r0
   0307 F7                  592 	mov	@r1,a
   0308 08                  593 	inc	r0
   0309 09                  594 	inc	r1
   030A E6                  595 	mov	a,@r0
   030B F7                  596 	mov	@r1,a
   030C 08                  597 	inc	r0
   030D 09                  598 	inc	r1
   030E E6                  599 	mov	a,@r0
   030F F7                  600 	mov	@r1,a
   0310 08                  601 	inc	r0
   0311 09                  602 	inc	r1
   0312 E6                  603 	mov	a,@r0
   0313 F7                  604 	mov	@r1,a
   0314 02s04r9E            605 	ljmp	00119$
   0317                     606 00115$:
                            607 ;	sincoshf.c:85: z=x*x;
   0317 A8*00               608 	mov	r0,_bp
   0319 08                  609 	inc	r0
   031A E6                  610 	mov	a,@r0
   031B C0 E0               611 	push	acc
   031D 08                  612 	inc	r0
   031E E6                  613 	mov	a,@r0
   031F C0 E0               614 	push	acc
   0321 08                  615 	inc	r0
   0322 E6                  616 	mov	a,@r0
   0323 C0 E0               617 	push	acc
   0325 08                  618 	inc	r0
   0326 E6                  619 	mov	a,@r0
   0327 C0 E0               620 	push	acc
   0329 A8*00               621 	mov	r0,_bp
   032B 08                  622 	inc	r0
   032C 86 82               623 	mov	dpl,@r0
   032E 08                  624 	inc	r0
   032F 86 83               625 	mov	dph,@r0
   0331 08                  626 	inc	r0
   0332 86 F0               627 	mov	b,@r0
   0334 08                  628 	inc	r0
   0335 E6                  629 	mov	a,@r0
   0336 12s00r00            630 	lcall	___fsmul
   0339 AE 82               631 	mov	r6,dpl
   033B AF 83               632 	mov	r7,dph
   033D AA F0               633 	mov	r2,b
   033F FB                  634 	mov	r3,a
   0340 E5 81               635 	mov	a,sp
   0342 24 FC               636 	add	a,#0xfc
   0344 F5 81               637 	mov	sp,a
   0346 E5*00               638 	mov	a,_bp
   0348 24 05               639 	add	a,#0x05
   034A F8                  640 	mov	r0,a
   034B A6 06               641 	mov	@r0,ar6
   034D 08                  642 	inc	r0
   034E A6 07               643 	mov	@r0,ar7
   0350 08                  644 	inc	r0
   0351 A6 02               645 	mov	@r0,ar2
   0353 08                  646 	inc	r0
   0354 A6 03               647 	mov	@r0,ar3
                            648 ;	sincoshf.c:86: z=x+x*z*P(z)/Q(z);
   0356 E5*00               649 	mov	a,_bp
   0358 24 05               650 	add	a,#0x05
   035A F8                  651 	mov	r0,a
   035B E6                  652 	mov	a,@r0
   035C C0 E0               653 	push	acc
   035E 08                  654 	inc	r0
   035F E6                  655 	mov	a,@r0
   0360 C0 E0               656 	push	acc
   0362 08                  657 	inc	r0
   0363 E6                  658 	mov	a,@r0
   0364 C0 E0               659 	push	acc
   0366 08                  660 	inc	r0
   0367 E6                  661 	mov	a,@r0
   0368 C0 E0               662 	push	acc
   036A A8*00               663 	mov	r0,_bp
   036C 08                  664 	inc	r0
   036D 86 82               665 	mov	dpl,@r0
   036F 08                  666 	inc	r0
   0370 86 83               667 	mov	dph,@r0
   0372 08                  668 	inc	r0
   0373 86 F0               669 	mov	b,@r0
   0375 08                  670 	inc	r0
   0376 E6                  671 	mov	a,@r0
   0377 12s00r00            672 	lcall	___fsmul
   037A C8                  673 	xch	a,r0
   037B E5*00               674 	mov	a,_bp
   037D 24 09               675 	add	a,#0x09
   037F C8                  676 	xch	a,r0
   0380 A6 82               677 	mov	@r0,dpl
   0382 08                  678 	inc	r0
   0383 A6 83               679 	mov	@r0,dph
   0385 08                  680 	inc	r0
   0386 A6 F0               681 	mov	@r0,b
   0388 08                  682 	inc	r0
   0389 F6                  683 	mov	@r0,a
   038A E5 81               684 	mov	a,sp
   038C 24 FC               685 	add	a,#0xfc
   038E F5 81               686 	mov	sp,a
   0390 E5*00               687 	mov	a,_bp
   0392 24 05               688 	add	a,#0x05
   0394 F8                  689 	mov	r0,a
   0395 E6                  690 	mov	a,@r0
   0396 C0 E0               691 	push	acc
   0398 08                  692 	inc	r0
   0399 E6                  693 	mov	a,@r0
   039A C0 E0               694 	push	acc
   039C 08                  695 	inc	r0
   039D E6                  696 	mov	a,@r0
   039E C0 E0               697 	push	acc
   03A0 08                  698 	inc	r0
   03A1 E6                  699 	mov	a,@r0
   03A2 C0 E0               700 	push	acc
   03A4 90 E6 EA            701 	mov	dptr,#0xE6EA
   03A7 75 F0 42            702 	mov	b,#0x42
   03AA 74 BE               703 	mov	a,#0xBE
   03AC 12s00r00            704 	lcall	___fsmul
   03AF AE 82               705 	mov	r6,dpl
   03B1 AF 83               706 	mov	r7,dph
   03B3 AA F0               707 	mov	r2,b
   03B5 FB                  708 	mov	r3,a
   03B6 E5 81               709 	mov	a,sp
   03B8 24 FC               710 	add	a,#0xfc
   03BA F5 81               711 	mov	sp,a
   03BC 74 F0               712 	mov	a,#0xF0
   03BE C0 E0               713 	push	acc
   03C0 74 69               714 	mov	a,#0x69
   03C2 C0 E0               715 	push	acc
   03C4 74 E4               716 	mov	a,#0xE4
   03C6 C0 E0               717 	push	acc
   03C8 74 C0               718 	mov	a,#0xC0
   03CA C0 E0               719 	push	acc
   03CC 8E 82               720 	mov	dpl,r6
   03CE 8F 83               721 	mov	dph,r7
   03D0 8A F0               722 	mov	b,r2
   03D2 EB                  723 	mov	a,r3
   03D3 12s00r00            724 	lcall	___fsadd
   03D6 AA 82               725 	mov	r2,dpl
   03D8 AB 83               726 	mov	r3,dph
   03DA AC F0               727 	mov	r4,b
   03DC FD                  728 	mov	r5,a
   03DD E5 81               729 	mov	a,sp
   03DF 24 FC               730 	add	a,#0xfc
   03E1 F5 81               731 	mov	sp,a
   03E3 C0 02               732 	push	ar2
   03E5 C0 03               733 	push	ar3
   03E7 C0 04               734 	push	ar4
   03E9 C0 05               735 	push	ar5
   03EB E5*00               736 	mov	a,_bp
   03ED 24 09               737 	add	a,#0x09
   03EF F8                  738 	mov	r0,a
   03F0 86 82               739 	mov	dpl,@r0
   03F2 08                  740 	inc	r0
   03F3 86 83               741 	mov	dph,@r0
   03F5 08                  742 	inc	r0
   03F6 86 F0               743 	mov	b,@r0
   03F8 08                  744 	inc	r0
   03F9 E6                  745 	mov	a,@r0
   03FA 12s00r00            746 	lcall	___fsmul
   03FD C8                  747 	xch	a,r0
   03FE E5*00               748 	mov	a,_bp
   0400 24 09               749 	add	a,#0x09
   0402 C8                  750 	xch	a,r0
   0403 A6 82               751 	mov	@r0,dpl
   0405 08                  752 	inc	r0
   0406 A6 83               753 	mov	@r0,dph
   0408 08                  754 	inc	r0
   0409 A6 F0               755 	mov	@r0,b
   040B 08                  756 	inc	r0
   040C F6                  757 	mov	@r0,a
   040D E5 81               758 	mov	a,sp
   040F 24 FC               759 	add	a,#0xfc
   0411 F5 81               760 	mov	sp,a
   0413 74 93               761 	mov	a,#0x93
   0415 C0 E0               762 	push	acc
   0417 74 4F               763 	mov	a,#0x4F
   0419 C0 E0               764 	push	acc
   041B 74 2B               765 	mov	a,#0x2B
   041D C0 E0               766 	push	acc
   041F 74 C2               767 	mov	a,#0xC2
   0421 C0 E0               768 	push	acc
   0423 E5*00               769 	mov	a,_bp
   0425 24 05               770 	add	a,#0x05
   0427 F8                  771 	mov	r0,a
   0428 86 82               772 	mov	dpl,@r0
   042A 08                  773 	inc	r0
   042B 86 83               774 	mov	dph,@r0
   042D 08                  775 	inc	r0
   042E 86 F0               776 	mov	b,@r0
   0430 08                  777 	inc	r0
   0431 E6                  778 	mov	a,@r0
   0432 12s00r00            779 	lcall	___fsadd
   0435 AE 82               780 	mov	r6,dpl
   0437 AF 83               781 	mov	r7,dph
   0439 AA F0               782 	mov	r2,b
   043B FB                  783 	mov	r3,a
   043C E5 81               784 	mov	a,sp
   043E 24 FC               785 	add	a,#0xfc
   0440 F5 81               786 	mov	sp,a
   0442 C0 06               787 	push	ar6
   0444 C0 07               788 	push	ar7
   0446 C0 02               789 	push	ar2
   0448 C0 03               790 	push	ar3
   044A E5*00               791 	mov	a,_bp
   044C 24 09               792 	add	a,#0x09
   044E F8                  793 	mov	r0,a
   044F 86 82               794 	mov	dpl,@r0
   0451 08                  795 	inc	r0
   0452 86 83               796 	mov	dph,@r0
   0454 08                  797 	inc	r0
   0455 86 F0               798 	mov	b,@r0
   0457 08                  799 	inc	r0
   0458 E6                  800 	mov	a,@r0
   0459 12s00r00            801 	lcall	___fsdiv
   045C AA 82               802 	mov	r2,dpl
   045E AB 83               803 	mov	r3,dph
   0460 AC F0               804 	mov	r4,b
   0462 FD                  805 	mov	r5,a
   0463 E5 81               806 	mov	a,sp
   0465 24 FC               807 	add	a,#0xfc
   0467 F5 81               808 	mov	sp,a
   0469 C0 02               809 	push	ar2
   046B C0 03               810 	push	ar3
   046D C0 04               811 	push	ar4
   046F C0 05               812 	push	ar5
   0471 A8*00               813 	mov	r0,_bp
   0473 08                  814 	inc	r0
   0474 86 82               815 	mov	dpl,@r0
   0476 08                  816 	inc	r0
   0477 86 83               817 	mov	dph,@r0
   0479 08                  818 	inc	r0
   047A 86 F0               819 	mov	b,@r0
   047C 08                  820 	inc	r0
   047D E6                  821 	mov	a,@r0
   047E 12s00r00            822 	lcall	___fsadd
   0481 AA 82               823 	mov	r2,dpl
   0483 AB 83               824 	mov	r3,dph
   0485 AC F0               825 	mov	r4,b
   0487 FD                  826 	mov	r5,a
   0488 E5 81               827 	mov	a,sp
   048A 24 FC               828 	add	a,#0xfc
   048C F5 81               829 	mov	sp,a
   048E E5*00               830 	mov	a,_bp
   0490 24 05               831 	add	a,#0x05
   0492 F8                  832 	mov	r0,a
   0493 A6 02               833 	mov	@r0,ar2
   0495 08                  834 	inc	r0
   0496 A6 03               835 	mov	@r0,ar3
   0498 08                  836 	inc	r0
   0499 A6 04               837 	mov	@r0,ar4
   049B 08                  838 	inc	r0
   049C A6 05               839 	mov	@r0,ar5
   049E                     840 00119$:
                            841 ;	sincoshf.c:89: return z;
   049E E5*00               842 	mov	a,_bp
   04A0 24 05               843 	add	a,#0x05
   04A2 F8                  844 	mov	r0,a
   04A3 86 82               845 	mov	dpl,@r0
   04A5 08                  846 	inc	r0
   04A6 86 83               847 	mov	dph,@r0
   04A8 08                  848 	inc	r0
   04A9 86 F0               849 	mov	b,@r0
   04AB 08                  850 	inc	r0
   04AC E6                  851 	mov	a,@r0
   04AD 85*00 81            852 	mov	sp,_bp
   04B0 D0*00               853 	pop	_bp
   04B2 22                  854 	ret
                            855 	.area CSEG    (CODE)
                            856 	.area CONST   (CODE)
                            857 	.area XINIT   (CODE)
                            858 	.area CABS    (ABS,CODE)
