                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.4 #5595 (Oct 23 2013) (Mac OS X ppc)
                              4 ; This file was generated Wed Oct 23 12:26:02 2013
                              5 ;--------------------------------------------------------
                              6 	.module _ltoa
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl __ltoa
                             13 	.globl __ultoa
                             14 ;--------------------------------------------------------
                             15 ; special function registers
                             16 ;--------------------------------------------------------
                             17 	.area RSEG    (ABS,DATA)
   0000                      18 	.org 0x0000
                             19 ;--------------------------------------------------------
                             20 ; special function bits
                             21 ;--------------------------------------------------------
                             22 	.area RSEG    (ABS,DATA)
   0000                      23 	.org 0x0000
                             24 ;--------------------------------------------------------
                             25 ; overlayable register banks
                             26 ;--------------------------------------------------------
                             27 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      28 	.ds 8
                             29 ;--------------------------------------------------------
                             30 ; internal ram data
                             31 ;--------------------------------------------------------
                             32 	.area DSEG    (DATA)
                             33 ;--------------------------------------------------------
                             34 ; overlayable items in internal ram 
                             35 ;--------------------------------------------------------
                             36 	.area OSEG    (OVR,DATA)
                             37 ;--------------------------------------------------------
                             38 ; indirectly addressable internal ram data
                             39 ;--------------------------------------------------------
                             40 	.area ISEG    (DATA)
                             41 ;--------------------------------------------------------
                             42 ; absolute internal ram data
                             43 ;--------------------------------------------------------
                             44 	.area IABS    (ABS,DATA)
                             45 	.area IABS    (ABS,DATA)
                             46 ;--------------------------------------------------------
                             47 ; bit data
                             48 ;--------------------------------------------------------
                             49 	.area BSEG    (BIT)
                             50 ;--------------------------------------------------------
                             51 ; paged external ram data
                             52 ;--------------------------------------------------------
                             53 	.area PSEG    (PAG,XDATA)
                             54 ;--------------------------------------------------------
                             55 ; external ram data
                             56 ;--------------------------------------------------------
                             57 	.area XSEG    (XDATA)
                             58 ;--------------------------------------------------------
                             59 ; absolute external ram data
                             60 ;--------------------------------------------------------
                             61 	.area XABS    (ABS,XDATA)
                             62 ;--------------------------------------------------------
                             63 ; external initialized ram data
                             64 ;--------------------------------------------------------
                             65 	.area XISEG   (XDATA)
                             66 	.area HOME    (CODE)
                             67 	.area GSINIT0 (CODE)
                             68 	.area GSINIT1 (CODE)
                             69 	.area GSINIT2 (CODE)
                             70 	.area GSINIT3 (CODE)
                             71 	.area GSINIT4 (CODE)
                             72 	.area GSINIT5 (CODE)
                             73 	.area GSINIT  (CODE)
                             74 	.area GSFINAL (CODE)
                             75 	.area CSEG    (CODE)
                             76 ;--------------------------------------------------------
                             77 ; global & static initialisations
                             78 ;--------------------------------------------------------
                             79 	.area HOME    (CODE)
                             80 	.area GSINIT  (CODE)
                             81 	.area GSFINAL (CODE)
                             82 	.area GSINIT  (CODE)
                             83 ;--------------------------------------------------------
                             84 ; Home
                             85 ;--------------------------------------------------------
                             86 	.area HOME    (CODE)
                             87 	.area HOME    (CODE)
                             88 ;--------------------------------------------------------
                             89 ; code
                             90 ;--------------------------------------------------------
                             91 	.area CSEG    (CODE)
                             92 ;------------------------------------------------------------
                             93 ;Allocation info for local variables in function '_ultoa'
                             94 ;------------------------------------------------------------
                             95 ;string                    Allocated to stack - offset -5
                             96 ;radix                     Allocated to stack - offset -6
                             97 ;value                     Allocated to stack - offset 1
                             98 ;buffer                    Allocated to stack - offset 5
                             99 ;index                     Allocated to registers r5 
                            100 ;c                         Allocated to registers r2 
                            101 ;sloc0                     Allocated to stack - offset 37
                            102 ;------------------------------------------------------------
                            103 ;	_ltoa.c:32: void _ultoa(unsigned long value, char* string, unsigned char radix)
                            104 ;	-----------------------------------------
                            105 ;	 function _ultoa
                            106 ;	-----------------------------------------
   0000                     107 __ultoa:
                    0002    108 	ar2 = 0x02
                    0003    109 	ar3 = 0x03
                    0004    110 	ar4 = 0x04
                    0005    111 	ar5 = 0x05
                    0006    112 	ar6 = 0x06
                    0007    113 	ar7 = 0x07
                    0000    114 	ar0 = 0x00
                    0001    115 	ar1 = 0x01
   0000 C0*00               116 	push	_bp
   0002 85 81*00            117 	mov	_bp,sp
   0005 C0 82               118 	push	dpl
   0007 C0 83               119 	push	dph
   0009 C0 F0               120 	push	b
   000B C0 E0               121 	push	acc
   000D E5 81               122 	mov	a,sp
   000F 24 28               123 	add	a,#0x28
   0011 F5 81               124 	mov	sp,a
                            125 ;	_ltoa.c:37: do {
   0013 E5*00               126 	mov	a,_bp
   0015 24 05               127 	add	a,#0x05
   0017 FE                  128 	mov	r6,a
   0018 7D 20               129 	mov	r5,#0x20
   001A                     130 00103$:
                            131 ;	_ltoa.c:38: unsigned char c = '0' + (value % radix);
   001A C0 06               132 	push	ar6
   001C E5*00               133 	mov	a,_bp
   001E 24 FA               134 	add	a,#0xfa
   0020 F8                  135 	mov	r0,a
   0021 E5*00               136 	mov	a,_bp
   0023 24 25               137 	add	a,#0x25
   0025 F9                  138 	mov	r1,a
   0026 E6                  139 	mov	a,@r0
   0027 F7                  140 	mov	@r1,a
   0028 09                  141 	inc	r1
   0029 77 00               142 	mov	@r1,#0x00
   002B 09                  143 	inc	r1
   002C 77 00               144 	mov	@r1,#0x00
   002E 09                  145 	inc	r1
   002F 77 00               146 	mov	@r1,#0x00
   0031 C0 05               147 	push	ar5
   0033 E5*00               148 	mov	a,_bp
   0035 24 25               149 	add	a,#0x25
   0037 F8                  150 	mov	r0,a
   0038 E6                  151 	mov	a,@r0
   0039 C0 E0               152 	push	acc
   003B 08                  153 	inc	r0
   003C E6                  154 	mov	a,@r0
   003D C0 E0               155 	push	acc
   003F 08                  156 	inc	r0
   0040 E6                  157 	mov	a,@r0
   0041 C0 E0               158 	push	acc
   0043 08                  159 	inc	r0
   0044 E6                  160 	mov	a,@r0
   0045 C0 E0               161 	push	acc
   0047 A8*00               162 	mov	r0,_bp
   0049 08                  163 	inc	r0
   004A 86 82               164 	mov	dpl,@r0
   004C 08                  165 	inc	r0
   004D 86 83               166 	mov	dph,@r0
   004F 08                  167 	inc	r0
   0050 86 F0               168 	mov	b,@r0
   0052 08                  169 	inc	r0
   0053 E6                  170 	mov	a,@r0
   0054 12s00r00            171 	lcall	__modulong
   0057 AE 82               172 	mov	r6,dpl
   0059 AF 83               173 	mov	r7,dph
   005B FB                  174 	mov	r3,a
   005C E5 81               175 	mov	a,sp
   005E 24 FC               176 	add	a,#0xfc
   0060 F5 81               177 	mov	sp,a
   0062 D0 05               178 	pop	ar5
   0064 74 30               179 	mov	a,#0x30
   0066 2E                  180 	add	a,r6
   0067 FA                  181 	mov	r2,a
                            182 ;	_ltoa.c:39: if (c > (unsigned char)'9')
   0068 C3                  183 	clr	c
   0069 74 39               184 	mov	a,#0x39
   006B 9A                  185 	subb	a,r2
   006C D0 06               186 	pop	ar6
   006E 50 04               187 	jnc	00102$
                            188 ;	_ltoa.c:40: c += 'A' - '9' - 1;
   0070 74 07               189 	mov	a,#0x07
   0072 2A                  190 	add	a,r2
   0073 FA                  191 	mov	r2,a
   0074                     192 00102$:
                            193 ;	_ltoa.c:41: buffer[--index] = c;
   0074 1D                  194 	dec	r5
   0075 ED                  195 	mov	a,r5
   0076 2E                  196 	add	a,r6
   0077 F8                  197 	mov	r0,a
   0078 A6 02               198 	mov	@r0,ar2
                            199 ;	_ltoa.c:42: value /= radix;
   007A C0 05               200 	push	ar5
   007C C0 06               201 	push	ar6
   007E E5*00               202 	mov	a,_bp
   0080 24 25               203 	add	a,#0x25
   0082 F8                  204 	mov	r0,a
   0083 E6                  205 	mov	a,@r0
   0084 C0 E0               206 	push	acc
   0086 08                  207 	inc	r0
   0087 E6                  208 	mov	a,@r0
   0088 C0 E0               209 	push	acc
   008A 08                  210 	inc	r0
   008B E6                  211 	mov	a,@r0
   008C C0 E0               212 	push	acc
   008E 08                  213 	inc	r0
   008F E6                  214 	mov	a,@r0
   0090 C0 E0               215 	push	acc
   0092 A8*00               216 	mov	r0,_bp
   0094 08                  217 	inc	r0
   0095 86 82               218 	mov	dpl,@r0
   0097 08                  219 	inc	r0
   0098 86 83               220 	mov	dph,@r0
   009A 08                  221 	inc	r0
   009B 86 F0               222 	mov	b,@r0
   009D 08                  223 	inc	r0
   009E E6                  224 	mov	a,@r0
   009F 12s00r00            225 	lcall	__divulong
   00A2 A8*00               226 	mov	r0,_bp
   00A4 08                  227 	inc	r0
   00A5 A6 82               228 	mov	@r0,dpl
   00A7 08                  229 	inc	r0
   00A8 A6 83               230 	mov	@r0,dph
   00AA 08                  231 	inc	r0
   00AB A6 F0               232 	mov	@r0,b
   00AD 08                  233 	inc	r0
   00AE F6                  234 	mov	@r0,a
   00AF E5 81               235 	mov	a,sp
   00B1 24 FC               236 	add	a,#0xfc
   00B3 F5 81               237 	mov	sp,a
   00B5 D0 06               238 	pop	ar6
   00B7 D0 05               239 	pop	ar5
                            240 ;	_ltoa.c:43: } while (value);
   00B9 A8*00               241 	mov	r0,_bp
   00BB 08                  242 	inc	r0
   00BC E6                  243 	mov	a,@r0
   00BD 08                  244 	inc	r0
   00BE 46                  245 	orl	a,@r0
   00BF 08                  246 	inc	r0
   00C0 46                  247 	orl	a,@r0
   00C1 08                  248 	inc	r0
   00C2 46                  249 	orl	a,@r0
   00C3 60 03               250 	jz	00118$
   00C5 02s00r1A            251 	ljmp	00103$
   00C8                     252 00118$:
                            253 ;	_ltoa.c:45: do {
   00C8 E5*00               254 	mov	a,_bp
   00CA 24 FB               255 	add	a,#0xfb
   00CC F8                  256 	mov	r0,a
   00CD 86 02               257 	mov	ar2,@r0
   00CF 08                  258 	inc	r0
   00D0 86 03               259 	mov	ar3,@r0
   00D2 08                  260 	inc	r0
   00D3 86 04               261 	mov	ar4,@r0
   00D5                     262 00106$:
                            263 ;	_ltoa.c:46: *string++ = buffer[index];
   00D5 ED                  264 	mov	a,r5
   00D6 2E                  265 	add	a,r6
   00D7 F8                  266 	mov	r0,a
   00D8 86 07               267 	mov	ar7,@r0
   00DA 8A 82               268 	mov	dpl,r2
   00DC 8B 83               269 	mov	dph,r3
   00DE 8C F0               270 	mov	b,r4
   00E0 EF                  271 	mov	a,r7
   00E1 12s00r00            272 	lcall	__gptrput
   00E4 A3                  273 	inc	dptr
   00E5 AA 82               274 	mov	r2,dpl
   00E7 AB 83               275 	mov	r3,dph
                            276 ;	_ltoa.c:47: } while ( ++index != NUMBER_OF_DIGITS );
   00E9 0D                  277 	inc	r5
   00EA BD 20 E8            278 	cjne	r5,#0x20,00106$
                            279 ;	_ltoa.c:49: *string = 0;  /* string terminator */
   00ED 8A 82               280 	mov	dpl,r2
   00EF 8B 83               281 	mov	dph,r3
   00F1 8C F0               282 	mov	b,r4
   00F3 E4                  283 	clr	a
   00F4 12s00r00            284 	lcall	__gptrput
   00F7 85*00 81            285 	mov	sp,_bp
   00FA D0*00               286 	pop	_bp
   00FC 22                  287 	ret
                            288 ;------------------------------------------------------------
                            289 ;Allocation info for local variables in function '_ltoa'
                            290 ;------------------------------------------------------------
                            291 ;string                    Allocated to stack - offset -5
                            292 ;radix                     Allocated to stack - offset -6
                            293 ;value                     Allocated to stack - offset 1
                            294 ;------------------------------------------------------------
                            295 ;	_ltoa.c:52: void _ltoa(long value, char* string, unsigned char radix)
                            296 ;	-----------------------------------------
                            297 ;	 function _ltoa
                            298 ;	-----------------------------------------
   00FD                     299 __ltoa:
   00FD C0*00               300 	push	_bp
   00FF 85 81*00            301 	mov	_bp,sp
   0102 C0 82               302 	push	dpl
   0104 C0 83               303 	push	dph
   0106 C0 F0               304 	push	b
   0108 C0 E0               305 	push	acc
                            306 ;	_ltoa.c:54: if (value < 0 && radix == 10) {
   010A A8*00               307 	mov	r0,_bp
   010C 08                  308 	inc	r0
   010D 08                  309 	inc	r0
   010E 08                  310 	inc	r0
   010F 08                  311 	inc	r0
   0110 E6                  312 	mov	a,@r0
   0111 30 E7 43            313 	jnb	acc.7,00102$
   0114 E5*00               314 	mov	a,_bp
   0116 24 FA               315 	add	a,#0xfa
   0118 F8                  316 	mov	r0,a
   0119 B6 0A 3B            317 	cjne	@r0,#0x0A,00102$
                            318 ;	_ltoa.c:55: *string++ = '-';
   011C E5*00               319 	mov	a,_bp
   011E 24 FB               320 	add	a,#0xfb
   0120 F8                  321 	mov	r0,a
   0121 86 06               322 	mov	ar6,@r0
   0123 08                  323 	inc	r0
   0124 86 07               324 	mov	ar7,@r0
   0126 08                  325 	inc	r0
   0127 86 02               326 	mov	ar2,@r0
   0129 8E 82               327 	mov	dpl,r6
   012B 8F 83               328 	mov	dph,r7
   012D 8A F0               329 	mov	b,r2
   012F 74 2D               330 	mov	a,#0x2D
   0131 12s00r00            331 	lcall	__gptrput
   0134 E5*00               332 	mov	a,_bp
   0136 24 FB               333 	add	a,#0xfb
   0138 F8                  334 	mov	r0,a
   0139 74 01               335 	mov	a,#0x01
   013B 2E                  336 	add	a,r6
   013C F6                  337 	mov	@r0,a
   013D E4                  338 	clr	a
   013E 3F                  339 	addc	a,r7
   013F 08                  340 	inc	r0
   0140 F6                  341 	mov	@r0,a
   0141 08                  342 	inc	r0
   0142 A6 02               343 	mov	@r0,ar2
                            344 ;	_ltoa.c:56: value = -value;
   0144 A8*00               345 	mov	r0,_bp
   0146 08                  346 	inc	r0
   0147 C3                  347 	clr	c
   0148 E4                  348 	clr	a
   0149 96                  349 	subb	a,@r0
   014A F6                  350 	mov	@r0,a
   014B 08                  351 	inc	r0
   014C E4                  352 	clr	a
   014D 96                  353 	subb	a,@r0
   014E F6                  354 	mov	@r0,a
   014F 08                  355 	inc	r0
   0150 E4                  356 	clr	a
   0151 96                  357 	subb	a,@r0
   0152 F6                  358 	mov	@r0,a
   0153 08                  359 	inc	r0
   0154 E4                  360 	clr	a
   0155 96                  361 	subb	a,@r0
   0156 F6                  362 	mov	@r0,a
   0157                     363 00102$:
                            364 ;	_ltoa.c:58: _ultoa(value, string, radix);
   0157 E5*00               365 	mov	a,_bp
   0159 24 FA               366 	add	a,#0xfa
   015B F8                  367 	mov	r0,a
   015C E6                  368 	mov	a,@r0
   015D C0 E0               369 	push	acc
   015F E5*00               370 	mov	a,_bp
   0161 24 FB               371 	add	a,#0xfb
   0163 F8                  372 	mov	r0,a
   0164 E6                  373 	mov	a,@r0
   0165 C0 E0               374 	push	acc
   0167 08                  375 	inc	r0
   0168 E6                  376 	mov	a,@r0
   0169 C0 E0               377 	push	acc
   016B 08                  378 	inc	r0
   016C E6                  379 	mov	a,@r0
   016D C0 E0               380 	push	acc
   016F A8*00               381 	mov	r0,_bp
   0171 08                  382 	inc	r0
   0172 86 82               383 	mov	dpl,@r0
   0174 08                  384 	inc	r0
   0175 86 83               385 	mov	dph,@r0
   0177 08                  386 	inc	r0
   0178 86 F0               387 	mov	b,@r0
   017A 08                  388 	inc	r0
   017B E6                  389 	mov	a,@r0
   017C 12s00r00            390 	lcall	__ultoa
   017F E5 81               391 	mov	a,sp
   0181 24 FC               392 	add	a,#0xfc
   0183 F5 81               393 	mov	sp,a
   0185 85*00 81            394 	mov	sp,_bp
   0188 D0*00               395 	pop	_bp
   018A 22                  396 	ret
                            397 	.area CSEG    (CODE)
                            398 	.area CONST   (CODE)
                            399 	.area XINIT   (CODE)
                            400 	.area CABS    (ABS,CODE)
