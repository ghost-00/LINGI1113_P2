                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.4 #5595 (Oct 23 2013) (Mac OS X ppc)
                              4 ; This file was generated Wed Oct 23 12:26:01 2013
                              5 ;--------------------------------------------------------
                              6 	.module printf_large
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl __print_format
                             13 ;--------------------------------------------------------
                             14 ; special function registers
                             15 ;--------------------------------------------------------
                             16 	.area RSEG    (ABS,DATA)
   0000                      17 	.org 0x0000
                             18 ;--------------------------------------------------------
                             19 ; special function bits
                             20 ;--------------------------------------------------------
                             21 	.area RSEG    (ABS,DATA)
   0000                      22 	.org 0x0000
                             23 ;--------------------------------------------------------
                             24 ; overlayable register banks
                             25 ;--------------------------------------------------------
                             26 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                      27 	.ds 8
                             28 ;--------------------------------------------------------
                             29 ; overlayable bit register bank
                             30 ;--------------------------------------------------------
                             31 	.area BIT_BANK	(REL,OVR,DATA)
   0000                      32 bits:
   0000                      33 	.ds 1
                    8000     34 	b0 = bits[0]
                    8100     35 	b1 = bits[1]
                    8200     36 	b2 = bits[2]
                    8300     37 	b3 = bits[3]
                    8400     38 	b4 = bits[4]
                    8500     39 	b5 = bits[5]
                    8600     40 	b6 = bits[6]
                    8700     41 	b7 = bits[7]
                             42 ;--------------------------------------------------------
                             43 ; internal ram data
                             44 ;--------------------------------------------------------
                             45 	.area DSEG    (DATA)
                             46 ;--------------------------------------------------------
                             47 ; overlayable items in internal ram 
                             48 ;--------------------------------------------------------
                             49 	.area OSEG    (OVR,DATA)
                             50 ;--------------------------------------------------------
                             51 ; indirectly addressable internal ram data
                             52 ;--------------------------------------------------------
                             53 	.area ISEG    (DATA)
                             54 ;--------------------------------------------------------
                             55 ; absolute internal ram data
                             56 ;--------------------------------------------------------
                             57 	.area IABS    (ABS,DATA)
                             58 	.area IABS    (ABS,DATA)
                             59 ;--------------------------------------------------------
                             60 ; bit data
                             61 ;--------------------------------------------------------
                             62 	.area BSEG    (BIT)
                             63 ;--------------------------------------------------------
                             64 ; paged external ram data
                             65 ;--------------------------------------------------------
                             66 	.area PSEG    (PAG,XDATA)
                             67 ;--------------------------------------------------------
                             68 ; external ram data
                             69 ;--------------------------------------------------------
                             70 	.area XSEG    (XDATA)
                             71 ;--------------------------------------------------------
                             72 ; absolute external ram data
                             73 ;--------------------------------------------------------
                             74 	.area XABS    (ABS,XDATA)
                             75 ;--------------------------------------------------------
                             76 ; external initialized ram data
                             77 ;--------------------------------------------------------
                             78 	.area XISEG   (XDATA)
                             79 	.area HOME    (CODE)
                             80 	.area GSINIT0 (CODE)
                             81 	.area GSINIT1 (CODE)
                             82 	.area GSINIT2 (CODE)
                             83 	.area GSINIT3 (CODE)
                             84 	.area GSINIT4 (CODE)
                             85 	.area GSINIT5 (CODE)
                             86 	.area GSINIT  (CODE)
                             87 	.area GSFINAL (CODE)
                             88 	.area CSEG    (CODE)
                             89 ;--------------------------------------------------------
                             90 ; global & static initialisations
                             91 ;--------------------------------------------------------
                             92 	.area HOME    (CODE)
                             93 	.area GSINIT  (CODE)
                             94 	.area GSFINAL (CODE)
                             95 	.area GSINIT  (CODE)
                             96 ;--------------------------------------------------------
                             97 ; Home
                             98 ;--------------------------------------------------------
                             99 	.area HOME    (CODE)
                            100 	.area HOME    (CODE)
                            101 ;--------------------------------------------------------
                            102 ; code
                            103 ;--------------------------------------------------------
                            104 	.area CSEG    (CODE)
                            105 ;------------------------------------------------------------
                            106 ;Allocation info for local variables in function 'output_digit'
                            107 ;------------------------------------------------------------
                            108 ;output_char               Allocated to stack - offset -4
                            109 ;p                         Allocated to stack - offset -7
                            110 ;lower_case                Allocated to registers b0 
                            111 ;n                         Allocated to registers r2 
                            112 ;c                         Allocated to registers r2 
                            113 ;------------------------------------------------------------
                            114 ;	printf_large.c:110: static void output_digit( unsigned char n, BOOL lower_case, pfn_outputchar output_char, void* p )
                            115 ;	-----------------------------------------
                            116 ;	 function output_digit
                            117 ;	-----------------------------------------
   0000                     118 _output_digit:
                    0002    119 	ar2 = 0x02
                    0003    120 	ar3 = 0x03
                    0004    121 	ar4 = 0x04
                    0005    122 	ar5 = 0x05
                    0006    123 	ar6 = 0x06
                    0007    124 	ar7 = 0x07
                    0000    125 	ar0 = 0x00
                    0001    126 	ar1 = 0x01
   0000 C0*00               127 	push	_bp
   0002 85 81*00            128 	mov	_bp,sp
   0005 AA 82               129 	mov	r2,dpl
                            130 ;	printf_large.c:112: register unsigned char c = n + (unsigned char)'0';
   0007 74 30               131 	mov	a,#0x30
   0009 2A                  132 	add	a,r2
                            133 ;	printf_large.c:114: if (c > (unsigned char)'9')
   000A FA                  134 	mov  r2,a
   000B 24 C6               135 	add	a,#0xff - 0x39
   000D 50 0B               136 	jnc	00104$
                            137 ;	printf_large.c:116: c += (unsigned char)('A' - '0' - 10);
   000F 74 07               138 	mov	a,#0x07
   0011 2A                  139 	add	a,r2
   0012 FA                  140 	mov	r2,a
                            141 ;	printf_large.c:117: if (lower_case)
   0013 30*00 04            142 	jnb	b0,00104$
                            143 ;	printf_large.c:118: c += (unsigned char)('a' - 'A');
   0016 74 20               144 	mov	a,#0x20
   0018 2A                  145 	add	a,r2
   0019 FA                  146 	mov	r2,a
   001A                     147 00104$:
                            148 ;	printf_large.c:120: output_char( c, p );
   001A E5*00               149 	mov	a,_bp
   001C 24 F9               150 	add	a,#0xf9
   001E F8                  151 	mov	r0,a
   001F E6                  152 	mov	a,@r0
   0020 C0 E0               153 	push	acc
   0022 08                  154 	inc	r0
   0023 E6                  155 	mov	a,@r0
   0024 C0 E0               156 	push	acc
   0026 08                  157 	inc	r0
   0027 E6                  158 	mov	a,@r0
   0028 C0 E0               159 	push	acc
   002A 74r41               160 	mov	a,#00111$
   002C C0 E0               161 	push	acc
   002E 74s00               162 	mov	a,#(00111$ >> 8)
   0030 C0 E0               163 	push	acc
   0032 E5*00               164 	mov	a,_bp
   0034 24 FC               165 	add	a,#0xfc
   0036 F8                  166 	mov	r0,a
   0037 E6                  167 	mov	a,@r0
   0038 C0 E0               168 	push	acc
   003A 08                  169 	inc	r0
   003B E6                  170 	mov	a,@r0
   003C C0 E0               171 	push	acc
   003E 8A 82               172 	mov	dpl,r2
   0040 22                  173 	ret
   0041                     174 00111$:
   0041 15 81               175 	dec	sp
   0043 15 81               176 	dec	sp
   0045 15 81               177 	dec	sp
   0047 D0*00               178 	pop	_bp
   0049 22                  179 	ret
                            180 ;------------------------------------------------------------
                            181 ;Allocation info for local variables in function 'output_2digits'
                            182 ;------------------------------------------------------------
                            183 ;output_char               Allocated to stack - offset -4
                            184 ;p                         Allocated to stack - offset -7
                            185 ;lower_case                Allocated to registers b0 
                            186 ;b                         Allocated to registers r2 
                            187 ;------------------------------------------------------------
                            188 ;	printf_large.c:141: static void output_2digits( unsigned char b, BOOL lower_case, pfn_outputchar output_char, void* p )
                            189 ;	-----------------------------------------
                            190 ;	 function output_2digits
                            191 ;	-----------------------------------------
   004A                     192 _output_2digits:
   004A C0*00               193 	push	_bp
   004C 85 81*00            194 	mov	_bp,sp
                            195 ;	printf_large.c:143: output_digit( b>>4,   lower_case, output_char, p );
   004F E5 82               196 	mov	a,dpl
   0051 FA                  197 	mov	r2,a
   0052 C4                  198 	swap	a
   0053 54 0F               199 	anl	a,#0x0f
   0055 FB                  200 	mov	r3,a
   0056 C0 02               201 	push	ar2
   0058 C0*00               202 	push	bits
   005A E5*00               203 	mov	a,_bp
   005C 24 F9               204 	add	a,#0xf9
   005E F8                  205 	mov	r0,a
   005F E6                  206 	mov	a,@r0
   0060 C0 E0               207 	push	acc
   0062 08                  208 	inc	r0
   0063 E6                  209 	mov	a,@r0
   0064 C0 E0               210 	push	acc
   0066 08                  211 	inc	r0
   0067 E6                  212 	mov	a,@r0
   0068 C0 E0               213 	push	acc
   006A E5*00               214 	mov	a,_bp
   006C 24 FC               215 	add	a,#0xfc
   006E F8                  216 	mov	r0,a
   006F E6                  217 	mov	a,@r0
   0070 C0 E0               218 	push	acc
   0072 08                  219 	inc	r0
   0073 E6                  220 	mov	a,@r0
   0074 C0 E0               221 	push	acc
   0076 A2*00               222 	mov	c,b0
   0078 92 F0               223 	mov	b[0],c
   007A 85 F0*00            224 	mov	bits,b
   007D 8B 82               225 	mov	dpl,r3
   007F 12s00r00            226 	lcall	_output_digit
   0082 E5 81               227 	mov	a,sp
   0084 24 FB               228 	add	a,#0xfb
   0086 F5 81               229 	mov	sp,a
   0088 D0*00               230 	pop	bits
   008A D0 02               231 	pop	ar2
                            232 ;	printf_large.c:144: output_digit( b&0x0F, lower_case, output_char, p );
   008C 53 02 0F            233 	anl	ar2,#0x0F
   008F E5*00               234 	mov	a,_bp
   0091 24 F9               235 	add	a,#0xf9
   0093 F8                  236 	mov	r0,a
   0094 E6                  237 	mov	a,@r0
   0095 C0 E0               238 	push	acc
   0097 08                  239 	inc	r0
   0098 E6                  240 	mov	a,@r0
   0099 C0 E0               241 	push	acc
   009B 08                  242 	inc	r0
   009C E6                  243 	mov	a,@r0
   009D C0 E0               244 	push	acc
   009F E5*00               245 	mov	a,_bp
   00A1 24 FC               246 	add	a,#0xfc
   00A3 F8                  247 	mov	r0,a
   00A4 E6                  248 	mov	a,@r0
   00A5 C0 E0               249 	push	acc
   00A7 08                  250 	inc	r0
   00A8 E6                  251 	mov	a,@r0
   00A9 C0 E0               252 	push	acc
   00AB A2*00               253 	mov	c,b0
   00AD 92 F0               254 	mov	b[0],c
   00AF 85 F0*00            255 	mov	bits,b
   00B2 8A 82               256 	mov	dpl,r2
   00B4 12s00r00            257 	lcall	_output_digit
   00B7 E5 81               258 	mov	a,sp
   00B9 24 FB               259 	add	a,#0xfb
   00BB F5 81               260 	mov	sp,a
   00BD D0*00               261 	pop	_bp
   00BF 22                  262 	ret
                            263 ;------------------------------------------------------------
                            264 ;Allocation info for local variables in function 'calculate_digit'
                            265 ;------------------------------------------------------------
                            266 ;radix                     Allocated to stack - offset -3
                            267 ;value                     Allocated to registers r0 
                            268 ;ul                        Allocated to registers r2 r3 r4 r5 
                            269 ;pb4                       Allocated to registers r1 
                            270 ;i                         Allocated to stack - offset 1
                            271 ;sloc0                     Allocated to stack - offset 8
                            272 ;------------------------------------------------------------
                            273 ;	printf_large.c:158: static void calculate_digit( value_t _AUTOMEM * value, unsigned char radix )
                            274 ;	-----------------------------------------
                            275 ;	 function calculate_digit
                            276 ;	-----------------------------------------
   00C0                     277 _calculate_digit:
   00C0 C0*00               278 	push	_bp
   00C2 85 81*00            279 	mov	_bp,sp
   00C5 05 81               280 	inc	sp
   00C7 A8 82               281 	mov	r0,dpl
                            282 ;	printf_large.c:160: unsigned long ul = value->ul;
   00C9 86 02               283 	mov	ar2,@r0
   00CB 08                  284 	inc	r0
   00CC 86 03               285 	mov	ar3,@r0
   00CE 08                  286 	inc	r0
   00CF 86 04               287 	mov	ar4,@r0
   00D1 08                  288 	inc	r0
   00D2 86 05               289 	mov	ar5,@r0
   00D4 18                  290 	dec	r0
   00D5 18                  291 	dec	r0
   00D6 18                  292 	dec	r0
                            293 ;	printf_large.c:161: unsigned char _AUTOMEM * pb4 = &value->byte[4];
   00D7 74 04               294 	mov	a,#0x04
   00D9 28                  295 	add	a,r0
   00DA F9                  296 	mov	r1,a
                            297 ;	printf_large.c:164: do
   00DB C0 00               298 	push	ar0
   00DD A8*00               299 	mov	r0,_bp
   00DF 08                  300 	inc	r0
   00E0 76 20               301 	mov	@r0,#0x20
   00E2 D0 00               302 	pop	ar0
   00E4                     303 00103$:
                            304 ;	printf_large.c:166: *pb4 = (*pb4 << 1) | ((ul >> 31) & 0x01);
   00E4 C0 00               305 	push	ar0
   00E6 E7                  306 	mov	a,@r1
   00E7 27                  307 	add	a,@r1
   00E8 FF                  308 	mov	r7,a
   00E9 ED                  309 	mov	a,r5
   00EA 23                  310 	rl	a
   00EB 54 01               311 	anl	a,#0x01
   00ED 42 07               312 	orl	ar7,a
   00EF A7 07               313 	mov	@r1,ar7
                            314 ;	printf_large.c:167: ul <<= 1;
   00F1 EA                  315 	mov	a,r2
   00F2 2A                  316 	add	a,r2
   00F3 FA                  317 	mov	r2,a
   00F4 EB                  318 	mov	a,r3
   00F5 33                  319 	rlc	a
   00F6 FB                  320 	mov	r3,a
   00F7 EC                  321 	mov	a,r4
   00F8 33                  322 	rlc	a
   00F9 FC                  323 	mov	r4,a
   00FA ED                  324 	mov	a,r5
   00FB 33                  325 	rlc	a
   00FC FD                  326 	mov	r5,a
                            327 ;	printf_large.c:169: if (radix <= *pb4 )
   00FD 87 06               328 	mov	ar6,@r1
   00FF C0 00               329 	push	ar0
   0101 E5*00               330 	mov	a,_bp
   0103 24 FD               331 	add	a,#0xfd
   0105 F8                  332 	mov	r0,a
   0106 C3                  333 	clr	c
   0107 EE                  334 	mov	a,r6
   0108 96                  335 	subb	a,@r0
   0109 D0 00               336 	pop	ar0
   010B D0 00               337 	pop	ar0
   010D 40 12               338 	jc	00104$
                            339 ;	printf_large.c:171: *pb4 -= radix;
   010F C0 00               340 	push	ar0
   0111 E5*00               341 	mov	a,_bp
   0113 24 FD               342 	add	a,#0xfd
   0115 F8                  343 	mov	r0,a
   0116 EE                  344 	mov	a,r6
   0117 C3                  345 	clr	c
   0118 96                  346 	subb	a,@r0
   0119 FE                  347 	mov	r6,a
   011A D0 00               348 	pop	ar0
   011C A7 06               349 	mov	@r1,ar6
                            350 ;	printf_large.c:172: ul |= 1;
   011E 43 02 01            351 	orl	ar2,#0x01
   0121                     352 00104$:
                            353 ;	printf_large.c:174: } while (--i);
   0121 C0 00               354 	push	ar0
   0123 A8*00               355 	mov	r0,_bp
   0125 08                  356 	inc	r0
   0126 16                  357 	dec	@r0
   0127 E6                  358 	mov	a,@r0
   0128 D0 00               359 	pop	ar0
   012A 60 02               360 	jz	00114$
   012C 80 B6               361 	sjmp	00103$
   012E                     362 00114$:
                            363 ;	printf_large.c:175: value->ul = ul;
   012E A6 02               364 	mov	@r0,ar2
   0130 08                  365 	inc	r0
   0131 A6 03               366 	mov	@r0,ar3
   0133 08                  367 	inc	r0
   0134 A6 04               368 	mov	@r0,ar4
   0136 08                  369 	inc	r0
   0137 A6 05               370 	mov	@r0,ar5
   0139 85*00 81            371 	mov	sp,_bp
   013C D0*00               372 	pop	_bp
   013E 22                  373 	ret
                            374 ;------------------------------------------------------------
                            375 ;Allocation info for local variables in function '_print_format'
                            376 ;------------------------------------------------------------
                            377 ;pvoid                     Allocated to stack - offset -5
                            378 ;format                    Allocated to stack - offset -8
                            379 ;ap                        Allocated to stack - offset -9
                            380 ;pfn                       Allocated to stack - offset 1
                            381 ;left_justify              Allocated to registers b0 
                            382 ;zero_padding              Allocated to registers b1 
                            383 ;prefix_sign               Allocated to registers b2 
                            384 ;prefix_space              Allocated to registers b3 
                            385 ;signed_argument           Allocated to registers b4 
                            386 ;char_argument             Allocated to registers b5 
                            387 ;long_argument             Allocated to registers b6 
                            388 ;float_argument            Allocated to registers b7 
                            389 ;lower_case                Allocated to stack - offset 3
                            390 ;value                     Allocated to stack - offset 4
                            391 ;charsOutputted            Allocated to stack - offset 27
                            392 ;lsd                       Allocated to registers b5 
                            393 ;radix                     Allocated to stack - offset 9
                            394 ;width                     Allocated to stack - offset 10
                            395 ;decimals                  Allocated to registers r5 
                            396 ;length                    Allocated to stack - offset 17
                            397 ;c                         Allocated to registers r4 
                            398 ;memtype                   Allocated to registers r2 
                            399 ;store                     Allocated to stack - offset 11
                            400 ;pstore                    Allocated to registers r2 
                            401 ;sloc0                     Allocated to stack - offset 17
                            402 ;sloc1                     Allocated to stack - offset 20
                            403 ;sloc2                     Allocated to stack - offset 21
                            404 ;sloc3                     Allocated to stack - offset 38
                            405 ;sloc4                     Allocated to stack - offset 22
                            406 ;sloc5                     Allocated to stack - offset 24
                            407 ;sloc6                     Allocated to stack - offset 25
                            408 ;sloc7                     Allocated to stack - offset 44
                            409 ;sloc8                     Allocated to stack - offset 27
                            410 ;------------------------------------------------------------
                            411 ;	printf_large.c:402: int _print_format (pfn_outputchar pfn, void* pvoid, const char *format, va_list ap)
                            412 ;	-----------------------------------------
                            413 ;	 function _print_format
                            414 ;	-----------------------------------------
   013F                     415 __print_format:
   013F C0*00               416 	push	_bp
   0141 85 81*00            417 	mov	_bp,sp
   0144 C0 82               418 	push	dpl
   0146 C0 83               419 	push	dph
   0148 E5 81               420 	mov	a,sp
   014A 24 1C               421 	add	a,#0x1c
   014C F5 81               422 	mov	sp,a
                            423 ;	printf_large.c:434: charsOutputted = 0;
   014E E5*00               424 	mov	a,_bp
   0150 24 1B               425 	add	a,#0x1b
   0152 F8                  426 	mov	r0,a
   0153 E4                  427 	clr	a
   0154 F6                  428 	mov	@r0,a
   0155 08                  429 	inc	r0
   0156 F6                  430 	mov	@r0,a
                            431 ;	printf_large.c:442: while( c=*format++ )
   0157 E5*00               432 	mov	a,_bp
   0159 24 15               433 	add	a,#0x15
   015B F8                  434 	mov	r0,a
   015C E5*00               435 	mov	a,_bp
   015E 24 04               436 	add	a,#0x04
   0160 F6                  437 	mov	@r0,a
   0161 E5*00               438 	mov	a,_bp
   0163 24 0B               439 	add	a,#0x0b
   0165 C8                  440 	xch	a,r0
   0166 E5*00               441 	mov	a,_bp
   0168 24 14               442 	add	a,#0x14
   016A C8                  443 	xch	a,r0
   016B 24 05               444 	add	a,#0x05
   016D F6                  445 	mov	@r0,a
   016E E5*00               446 	mov	a,_bp
   0170 24 18               447 	add	a,#0x18
   0172 F8                  448 	mov	r0,a
   0173 E5*00               449 	mov	a,_bp
   0175 24 04               450 	add	a,#0x04
   0177 F6                  451 	mov	@r0,a
   0178                     452 00239$:
   0178 E5*00               453 	mov	a,_bp
   017A 24 F8               454 	add	a,#0xf8
   017C F8                  455 	mov	r0,a
   017D 86 07               456 	mov	ar7,@r0
   017F 08                  457 	inc	r0
   0180 86 06               458 	mov	ar6,@r0
   0182 08                  459 	inc	r0
   0183 86 02               460 	mov	ar2,@r0
   0185 8F 82               461 	mov	dpl,r7
   0187 8E 83               462 	mov	dph,r6
   0189 8A F0               463 	mov	b,r2
   018B 12s00r00            464 	lcall	__gptrget
   018E FB                  465 	mov	r3,a
   018F E5*00               466 	mov	a,_bp
   0191 24 F8               467 	add	a,#0xf8
   0193 F8                  468 	mov	r0,a
   0194 74 01               469 	mov	a,#0x01
   0196 2F                  470 	add	a,r7
   0197 F6                  471 	mov	@r0,a
   0198 E4                  472 	clr	a
   0199 3E                  473 	addc	a,r6
   019A 08                  474 	inc	r0
   019B F6                  475 	mov	@r0,a
   019C 08                  476 	inc	r0
   019D A6 02               477 	mov	@r0,ar2
   019F EB                  478 	mov	a,r3
   01A0 FC                  479 	mov	r4,a
   01A1 70 03               480 	jnz	00328$
   01A3 02s0Er5A            481 	ljmp	00241$
   01A6                     482 00328$:
                            483 ;	printf_large.c:444: if ( c=='%' )
   01A6 BC 25 02            484 	cjne	r4,#0x25,00329$
   01A9 80 03               485 	sjmp	00330$
   01AB                     486 00329$:
   01AB 02s0Er21            487 	ljmp	00237$
   01AE                     488 00330$:
                            489 ;	printf_large.c:446: left_justify    = 0;
   01AE C2*00               490 	clr	b0
                            491 ;	printf_large.c:447: zero_padding    = 0;
   01B0 C2*00               492 	clr	b1
                            493 ;	printf_large.c:448: prefix_sign     = 0;
   01B2 C2*00               494 	clr	b2
                            495 ;	printf_large.c:449: prefix_space    = 0;
   01B4 C2*00               496 	clr	b3
                            497 ;	printf_large.c:450: signed_argument = 0;
   01B6 C2*00               498 	clr	b4
                            499 ;	printf_large.c:451: char_argument   = 0;
   01B8 C2*00               500 	clr	b5
                            501 ;	printf_large.c:452: long_argument   = 0;
   01BA C2*00               502 	clr	b6
                            503 ;	printf_large.c:453: float_argument  = 0;
   01BC C2*00               504 	clr	b7
                            505 ;	printf_large.c:454: radix           = 0;
   01BE E5*00               506 	mov	a,_bp
   01C0 24 09               507 	add	a,#0x09
   01C2 F8                  508 	mov	r0,a
   01C3 76 00               509 	mov	@r0,#0x00
                            510 ;	printf_large.c:455: width           = 0;
   01C5 E5*00               511 	mov	a,_bp
   01C7 24 0A               512 	add	a,#0x0a
   01C9 F8                  513 	mov	r0,a
   01CA 76 00               514 	mov	@r0,#0x00
                            515 ;	printf_large.c:456: decimals        = -1;
   01CC 7D FF               516 	mov	r5,#0xFF
                            517 ;	printf_large.c:458: get_conversion_spec:
   01CE E5*00               518 	mov	a,_bp
   01D0 24 F8               519 	add	a,#0xf8
   01D2 F8                  520 	mov	r0,a
   01D3 86 02               521 	mov	ar2,@r0
   01D5 08                  522 	inc	r0
   01D6 86 03               523 	mov	ar3,@r0
   01D8 08                  524 	inc	r0
   01D9 86 07               525 	mov	ar7,@r0
   01DB                     526 00101$:
                            527 ;	printf_large.c:460: c = *format++;
   01DB 8A 82               528 	mov	dpl,r2
   01DD 8B 83               529 	mov	dph,r3
   01DF 8F F0               530 	mov	b,r7
   01E1 12s00r00            531 	lcall	__gptrget
   01E4 FE                  532 	mov	r6,a
   01E5 A3                  533 	inc	dptr
   01E6 AA 82               534 	mov	r2,dpl
   01E8 AB 83               535 	mov	r3,dph
   01EA E5*00               536 	mov	a,_bp
   01EC 24 F8               537 	add	a,#0xf8
   01EE F8                  538 	mov	r0,a
   01EF A6 02               539 	mov	@r0,ar2
   01F1 08                  540 	inc	r0
   01F2 A6 03               541 	mov	@r0,ar3
   01F4 08                  542 	inc	r0
   01F5 A6 07               543 	mov	@r0,ar7
   01F7 8E 04               544 	mov	ar4,r6
                            545 ;	printf_large.c:462: if (c=='%') {
   01F9 BC 25 39            546 	cjne	r4,#0x25,00103$
                            547 ;	printf_large.c:463: OUTPUT_CHAR(c, p);
   01FC E5*00               548 	mov	a,_bp
   01FE 24 FB               549 	add	a,#0xfb
   0200 F8                  550 	mov	r0,a
   0201 E6                  551 	mov	a,@r0
   0202 C0 E0               552 	push	acc
   0204 08                  553 	inc	r0
   0205 E6                  554 	mov	a,@r0
   0206 C0 E0               555 	push	acc
   0208 08                  556 	inc	r0
   0209 E6                  557 	mov	a,@r0
   020A C0 E0               558 	push	acc
   020C 74r21               559 	mov	a,#00333$
   020E C0 E0               560 	push	acc
   0210 74s02               561 	mov	a,#(00333$ >> 8)
   0212 C0 E0               562 	push	acc
   0214 A8*00               563 	mov	r0,_bp
   0216 08                  564 	inc	r0
   0217 E6                  565 	mov	a,@r0
   0218 C0 E0               566 	push	acc
   021A 08                  567 	inc	r0
   021B E6                  568 	mov	a,@r0
   021C C0 E0               569 	push	acc
   021E 8C 82               570 	mov	dpl,r4
   0220 22                  571 	ret
   0221                     572 00333$:
   0221 15 81               573 	dec	sp
   0223 15 81               574 	dec	sp
   0225 15 81               575 	dec	sp
   0227 E5*00               576 	mov	a,_bp
   0229 24 1B               577 	add	a,#0x1b
   022B F8                  578 	mov	r0,a
   022C 06                  579 	inc	@r0
   022D B6 00 02            580 	cjne	@r0,#0x00,00334$
   0230 08                  581 	inc	r0
   0231 06                  582 	inc	@r0
   0232                     583 00334$:
                            584 ;	printf_large.c:464: continue;
   0232 02s01r78            585 	ljmp	00239$
   0235                     586 00103$:
                            587 ;	printf_large.c:467: if (isdigit(c)) {
   0235 8C 06               588 	mov	ar6,r4
   0237 BE 30 00            589 	cjne	r6,#0x30,00335$
   023A                     590 00335$:
   023A 40 40               591 	jc	00110$
   023C 8C 06               592 	mov	ar6,r4
   023E EE                  593 	mov	a,r6
   023F 24 C6               594 	add	a,#0xff - 0x39
   0241 40 39               595 	jc	00110$
                            596 ;	printf_large.c:468: if (decimals==-1) {
   0243 BD FF 27            597 	cjne	r5,#0xFF,00107$
                            598 ;	printf_large.c:469: width = 10*width + (c - '0');
   0246 E5*00               599 	mov	a,_bp
   0248 24 0A               600 	add	a,#0x0a
   024A F8                  601 	mov	r0,a
   024B E6                  602 	mov	a,@r0
   024C 75 F0 0A            603 	mov	b,#0x0A
   024F A4                  604 	mul	ab
   0250 FE                  605 	mov	r6,a
   0251 EC                  606 	mov	a,r4
   0252 24 D0               607 	add	a,#0xd0
   0254 2E                  608 	add	a,r6
   0255 FE                  609 	mov	r6,a
   0256 E5*00               610 	mov	a,_bp
   0258 24 0A               611 	add	a,#0x0a
   025A F8                  612 	mov	r0,a
   025B A6 06               613 	mov	@r0,ar6
                            614 ;	printf_large.c:470: if (width == 0) {
   025D E5*00               615 	mov	a,_bp
   025F 24 0A               616 	add	a,#0x0a
   0261 F8                  617 	mov	r0,a
   0262 E6                  618 	mov	a,@r0
   0263 60 03               619 	jz	00340$
   0265 02s01rDB            620 	ljmp	00101$
   0268                     621 00340$:
                            622 ;	printf_large.c:472: zero_padding = 1;
   0268 D2*00               623 	setb	b1
   026A 02s01rDB            624 	ljmp	00101$
   026D                     625 00107$:
                            626 ;	printf_large.c:475: decimals = 10*decimals + (c-'0');
   026D ED                  627 	mov	a,r5
   026E 75 F0 0A            628 	mov	b,#0x0A
   0271 A4                  629 	mul	ab
   0272 FE                  630 	mov	r6,a
   0273 EC                  631 	mov	a,r4
   0274 24 D0               632 	add	a,#0xd0
   0276 2E                  633 	add	a,r6
   0277 FE                  634 	mov	r6,a
   0278 FD                  635 	mov	r5,a
                            636 ;	printf_large.c:477: goto get_conversion_spec;
   0279 02s01rDB            637 	ljmp	00101$
   027C                     638 00110$:
                            639 ;	printf_large.c:480: if (c=='.') {
   027C BC 2E 0D            640 	cjne	r4,#0x2E,00115$
                            641 ;	printf_large.c:481: if (decimals==-1) decimals=0;
   027F BD FF 02            642 	cjne	r5,#0xFF,00343$
   0282 80 03               643 	sjmp	00344$
   0284                     644 00343$:
   0284 02s01rDB            645 	ljmp	00101$
   0287                     646 00344$:
   0287 7D 00               647 	mov	r5,#0x00
                            648 ;	printf_large.c:484: goto get_conversion_spec;
   0289 02s01rDB            649 	ljmp	00101$
   028C                     650 00115$:
                            651 ;	printf_large.c:487: if (islower(c))
   028C 8C 06               652 	mov	ar6,r4
   028E BE 61 00            653 	cjne	r6,#0x61,00345$
   0291                     654 00345$:
   0291 40 13               655 	jc	00117$
   0293 8C 06               656 	mov	ar6,r4
   0295 EE                  657 	mov	a,r6
   0296 24 85               658 	add	a,#0xff - 0x7A
   0298 40 0C               659 	jc	00117$
                            660 ;	printf_large.c:489: c = toupper(c);
   029A 53 04 DF            661 	anl	ar4,#0xDF
                            662 ;	printf_large.c:490: lower_case = 1;
   029D E5*00               663 	mov	a,_bp
   029F 24 03               664 	add	a,#0x03
   02A1 F8                  665 	mov	r0,a
   02A2 76 01               666 	mov	@r0,#0x01
   02A4 80 07               667 	sjmp	00118$
   02A6                     668 00117$:
                            669 ;	printf_large.c:493: lower_case = 0;
   02A6 E5*00               670 	mov	a,_bp
   02A8 24 03               671 	add	a,#0x03
   02AA F8                  672 	mov	r0,a
   02AB 76 00               673 	mov	@r0,#0x00
   02AD                     674 00118$:
                            675 ;	printf_large.c:495: switch( c )
   02AD BC 20 02            676 	cjne	r4,#0x20,00348$
   02B0 80 56               677 	sjmp	00122$
   02B2                     678 00348$:
   02B2 BC 2B 02            679 	cjne	r4,#0x2B,00349$
   02B5 80 4C               680 	sjmp	00121$
   02B7                     681 00349$:
   02B7 BC 2D 02            682 	cjne	r4,#0x2D,00350$
   02BA 80 42               683 	sjmp	00120$
   02BC                     684 00350$:
   02BC BC 42 02            685 	cjne	r4,#0x42,00351$
   02BF 80 4C               686 	sjmp	00123$
   02C1                     687 00351$:
   02C1 BC 43 02            688 	cjne	r4,#0x43,00352$
   02C4 80 51               689 	sjmp	00125$
   02C6                     690 00352$:
   02C6 BC 44 03            691 	cjne	r4,#0x44,00353$
   02C9 02s07rBC            692 	ljmp	00162$
   02CC                     693 00353$:
   02CC BC 46 03            694 	cjne	r4,#0x46,00354$
   02CF 02s07rE2            695 	ljmp	00166$
   02D2                     696 00354$:
   02D2 BC 49 03            697 	cjne	r4,#0x49,00355$
   02D5 02s07rBC            698 	ljmp	00162$
   02D8                     699 00355$:
   02D8 BC 4C 02            700 	cjne	r4,#0x4C,00356$
   02DB 80 35               701 	sjmp	00124$
   02DD                     702 00356$:
   02DD BC 4F 03            703 	cjne	r4,#0x4F,00357$
   02E0 02s07rC7            704 	ljmp	00163$
   02E3                     705 00357$:
   02E3 BC 50 03            706 	cjne	r4,#0x50,00358$
   02E6 02s05rCF            707 	ljmp	00148$
   02E9                     708 00358$:
   02E9 BC 53 03            709 	cjne	r4,#0x53,00359$
   02EC 02s03r87            710 	ljmp	00129$
   02EF                     711 00359$:
   02EF BC 55 03            712 	cjne	r4,#0x55,00360$
   02F2 02s07rD0            713 	ljmp	00164$
   02F5                     714 00360$:
   02F5 BC 58 03            715 	cjne	r4,#0x58,00361$
   02F8 02s07rD9            716 	ljmp	00165$
   02FB                     717 00361$:
   02FB 02s07rE6            718 	ljmp	00167$
                            719 ;	printf_large.c:497: case '-':
   02FE                     720 00120$:
                            721 ;	printf_large.c:498: left_justify = 1;
   02FE D2*00               722 	setb	b0
                            723 ;	printf_large.c:499: goto get_conversion_spec;
   0300 02s01rDB            724 	ljmp	00101$
                            725 ;	printf_large.c:500: case '+':
   0303                     726 00121$:
                            727 ;	printf_large.c:501: prefix_sign = 1;
   0303 D2*00               728 	setb	b2
                            729 ;	printf_large.c:502: goto get_conversion_spec;
   0305 02s01rDB            730 	ljmp	00101$
                            731 ;	printf_large.c:503: case ' ':
   0308                     732 00122$:
                            733 ;	printf_large.c:504: prefix_space = 1;
   0308 D2*00               734 	setb	b3
                            735 ;	printf_large.c:505: goto get_conversion_spec;
   030A 02s01rDB            736 	ljmp	00101$
                            737 ;	printf_large.c:506: case 'B':
   030D                     738 00123$:
                            739 ;	printf_large.c:507: char_argument = 1;
   030D D2*00               740 	setb	b5
                            741 ;	printf_large.c:508: goto get_conversion_spec;
   030F 02s01rDB            742 	ljmp	00101$
                            743 ;	printf_large.c:509: case 'L':
   0312                     744 00124$:
                            745 ;	printf_large.c:510: long_argument = 1;
   0312 D2*00               746 	setb	b6
                            747 ;	printf_large.c:511: goto get_conversion_spec;
   0314 02s01rDB            748 	ljmp	00101$
                            749 ;	printf_large.c:513: case 'C':
   0317                     750 00125$:
                            751 ;	printf_large.c:514: if( char_argument )
   0317 30*00 17            752 	jnb	b5,00127$
                            753 ;	printf_large.c:515: c = va_arg(ap,char);
   031A E5*00               754 	mov	a,_bp
   031C 24 F7               755 	add	a,#0xf7
   031E F8                  756 	mov	r0,a
   031F E6                  757 	mov	a,@r0
   0320 14                  758 	dec	a
   0321 FE                  759 	mov	r6,a
   0322 E5*00               760 	mov	a,_bp
   0324 24 F7               761 	add	a,#0xf7
   0326 F8                  762 	mov	r0,a
   0327 A6 06               763 	mov	@r0,ar6
   0329 A8 06               764 	mov	r0,ar6
   032B 86 06               765 	mov	ar6,@r0
   032D 8E 04               766 	mov	ar4,r6
   032F 80 19               767 	sjmp	00128$
   0331                     768 00127$:
                            769 ;	printf_large.c:517: c = va_arg(ap,int);
   0331 E5*00               770 	mov	a,_bp
   0333 24 F7               771 	add	a,#0xf7
   0335 F8                  772 	mov	r0,a
   0336 E6                  773 	mov	a,@r0
   0337 24 FE               774 	add	a,#0xfe
   0339 FE                  775 	mov	r6,a
   033A E5*00               776 	mov	a,_bp
   033C 24 F7               777 	add	a,#0xf7
   033E F8                  778 	mov	r0,a
   033F A6 06               779 	mov	@r0,ar6
   0341 A8 06               780 	mov	r0,ar6
   0343 86 06               781 	mov	ar6,@r0
   0345 08                  782 	inc	r0
   0346 86 02               783 	mov	ar2,@r0
   0348 8E 04               784 	mov	ar4,r6
                            785 ;	printf_large.c:816: return charsOutputted;
                            786 ;	printf_large.c:517: c = va_arg(ap,int);
   034A                     787 00128$:
                            788 ;	printf_large.c:518: OUTPUT_CHAR( c, p );
   034A C0*00               789 	push	bits
   034C E5*00               790 	mov	a,_bp
   034E 24 FB               791 	add	a,#0xfb
   0350 F8                  792 	mov	r0,a
   0351 E6                  793 	mov	a,@r0
   0352 C0 E0               794 	push	acc
   0354 08                  795 	inc	r0
   0355 E6                  796 	mov	a,@r0
   0356 C0 E0               797 	push	acc
   0358 08                  798 	inc	r0
   0359 E6                  799 	mov	a,@r0
   035A C0 E0               800 	push	acc
   035C 74r71               801 	mov	a,#00363$
   035E C0 E0               802 	push	acc
   0360 74s03               803 	mov	a,#(00363$ >> 8)
   0362 C0 E0               804 	push	acc
   0364 A8*00               805 	mov	r0,_bp
   0366 08                  806 	inc	r0
   0367 E6                  807 	mov	a,@r0
   0368 C0 E0               808 	push	acc
   036A 08                  809 	inc	r0
   036B E6                  810 	mov	a,@r0
   036C C0 E0               811 	push	acc
   036E 8C 82               812 	mov	dpl,r4
   0370 22                  813 	ret
   0371                     814 00363$:
   0371 15 81               815 	dec	sp
   0373 15 81               816 	dec	sp
   0375 15 81               817 	dec	sp
   0377 D0*00               818 	pop	bits
   0379 E5*00               819 	mov	a,_bp
   037B 24 1B               820 	add	a,#0x1b
   037D F8                  821 	mov	r0,a
   037E 06                  822 	inc	@r0
   037F B6 00 02            823 	cjne	@r0,#0x00,00364$
   0382 08                  824 	inc	r0
   0383 06                  825 	inc	@r0
   0384                     826 00364$:
                            827 ;	printf_large.c:519: break;
   0384 02s08r33            828 	ljmp	00168$
                            829 ;	printf_large.c:521: case 'S':
   0387                     830 00129$:
                            831 ;	printf_large.c:522: PTR = va_arg(ap,ptr_t);
   0387 E5*00               832 	mov	a,_bp
   0389 24 04               833 	add	a,#0x04
   038B FA                  834 	mov	r2,a
   038C E5*00               835 	mov	a,_bp
   038E 24 F7               836 	add	a,#0xf7
   0390 F8                  837 	mov	r0,a
   0391 E6                  838 	mov	a,@r0
   0392 24 FD               839 	add	a,#0xfd
   0394 FE                  840 	mov	r6,a
   0395 E5*00               841 	mov	a,_bp
   0397 24 F7               842 	add	a,#0xf7
   0399 F8                  843 	mov	r0,a
   039A A6 06               844 	mov	@r0,ar6
   039C A8 06               845 	mov	r0,ar6
   039E 86 06               846 	mov	ar6,@r0
   03A0 08                  847 	inc	r0
   03A1 86 03               848 	mov	ar3,@r0
   03A3 08                  849 	inc	r0
   03A4 86 07               850 	mov	ar7,@r0
   03A6 A8 02               851 	mov	r0,ar2
   03A8 A6 06               852 	mov	@r0,ar6
   03AA 08                  853 	inc	r0
   03AB A6 03               854 	mov	@r0,ar3
   03AD 08                  855 	inc	r0
   03AE A6 07               856 	mov	@r0,ar7
                            857 ;	printf_large.c:532: length = strlen(PTR);
   03B0 8E 82               858 	mov	dpl,r6
   03B2 8B 83               859 	mov	dph,r3
   03B4 8F F0               860 	mov	b,r7
   03B6 C0 05               861 	push	ar5
   03B8 C0*00               862 	push	bits
   03BA 12s00r00            863 	lcall	_strlen
   03BD AA 82               864 	mov	r2,dpl
   03BF AB 83               865 	mov	r3,dph
   03C1 D0*00               866 	pop	bits
   03C3 D0 05               867 	pop	ar5
   03C5 E5*00               868 	mov	a,_bp
   03C7 24 11               869 	add	a,#0x11
   03C9 F8                  870 	mov	r0,a
   03CA A6 02               871 	mov	@r0,ar2
                            872 ;	printf_large.c:534: if ( decimals == -1 )
   03CC BD FF 07            873 	cjne	r5,#0xFF,00131$
                            874 ;	printf_large.c:536: decimals = length;
   03CF E5*00               875 	mov	a,_bp
   03D1 24 11               876 	add	a,#0x11
   03D3 F8                  877 	mov	r0,a
   03D4 86 05               878 	mov	ar5,@r0
   03D6                     879 00131$:
                            880 ;	printf_large.c:538: if ( ( !left_justify ) && (length < width) )
   03D6 30*00 03            881 	jnb	b0,00367$
   03D9 02s04r7C            882 	ljmp	00281$
   03DC                     883 00367$:
   03DC E5*00               884 	mov	a,_bp
   03DE 24 11               885 	add	a,#0x11
   03E0 F8                  886 	mov	r0,a
   03E1 E5*00               887 	mov	a,_bp
   03E3 24 0A               888 	add	a,#0x0a
   03E5 F9                  889 	mov	r1,a
   03E6 C3                  890 	clr	c
   03E7 E6                  891 	mov	a,@r0
   03E8 97                  892 	subb	a,@r1
   03E9 40 03               893 	jc	00368$
   03EB 02s04r7C            894 	ljmp	00281$
   03EE                     895 00368$:
                            896 ;	printf_large.c:540: width -= length;
   03EE E5*00               897 	mov	a,_bp
   03F0 24 0A               898 	add	a,#0x0a
   03F2 F8                  899 	mov	r0,a
   03F3 E5*00               900 	mov	a,_bp
   03F5 24 11               901 	add	a,#0x11
   03F7 F9                  902 	mov	r1,a
   03F8 E6                  903 	mov	a,@r0
   03F9 C3                  904 	clr	c
   03FA 97                  905 	subb	a,@r1
   03FB F6                  906 	mov	@r0,a
                            907 ;	printf_large.c:541: while( width-- != 0 )
   03FC E5*00               908 	mov	a,_bp
   03FE 24 1B               909 	add	a,#0x1b
   0400 F8                  910 	mov	r0,a
   0401 86 02               911 	mov	ar2,@r0
   0403 08                  912 	inc	r0
   0404 86 03               913 	mov	ar3,@r0
   0406 E5*00               914 	mov	a,_bp
   0408 24 0A               915 	add	a,#0x0a
   040A F8                  916 	mov	r0,a
   040B 86 07               917 	mov	ar7,@r0
   040D                     918 00132$:
   040D 8F 06               919 	mov	ar6,r7
   040F 1F                  920 	dec	r7
   0410 E5*00               921 	mov	a,_bp
   0412 24 0A               922 	add	a,#0x0a
   0414 F8                  923 	mov	r0,a
   0415 A6 07               924 	mov	@r0,ar7
   0417 EE                  925 	mov	a,r6
   0418 60 51               926 	jz	00321$
                            927 ;	printf_large.c:543: OUTPUT_CHAR( ' ', p );
   041A C0 02               928 	push	ar2
   041C C0 03               929 	push	ar3
   041E C0 05               930 	push	ar5
   0420 C0 07               931 	push	ar7
   0422 C0*00               932 	push	bits
   0424 E5*00               933 	mov	a,_bp
   0426 24 FB               934 	add	a,#0xfb
   0428 F8                  935 	mov	r0,a
   0429 E6                  936 	mov	a,@r0
   042A C0 E0               937 	push	acc
   042C 08                  938 	inc	r0
   042D E6                  939 	mov	a,@r0
   042E C0 E0               940 	push	acc
   0430 08                  941 	inc	r0
   0431 E6                  942 	mov	a,@r0
   0432 C0 E0               943 	push	acc
   0434 74r4A               944 	mov	a,#00370$
   0436 C0 E0               945 	push	acc
   0438 74s04               946 	mov	a,#(00370$ >> 8)
   043A C0 E0               947 	push	acc
   043C A8*00               948 	mov	r0,_bp
   043E 08                  949 	inc	r0
   043F E6                  950 	mov	a,@r0
   0440 C0 E0               951 	push	acc
   0442 08                  952 	inc	r0
   0443 E6                  953 	mov	a,@r0
   0444 C0 E0               954 	push	acc
   0446 75 82 20            955 	mov	dpl,#0x20
   0449 22                  956 	ret
   044A                     957 00370$:
   044A 15 81               958 	dec	sp
   044C 15 81               959 	dec	sp
   044E 15 81               960 	dec	sp
   0450 D0*00               961 	pop	bits
   0452 D0 07               962 	pop	ar7
   0454 D0 05               963 	pop	ar5
   0456 D0 03               964 	pop	ar3
   0458 D0 02               965 	pop	ar2
   045A 0A                  966 	inc	r2
   045B BA 00 01            967 	cjne	r2,#0x00,00371$
   045E 0B                  968 	inc	r3
   045F                     969 00371$:
   045F E5*00               970 	mov	a,_bp
   0461 24 1B               971 	add	a,#0x1b
   0463 F8                  972 	mov	r0,a
   0464 A6 02               973 	mov	@r0,ar2
   0466 08                  974 	inc	r0
   0467 A6 03               975 	mov	@r0,ar3
                            976 ;	printf_large.c:547: while ( (c = *PTR)  && (decimals-- > 0))
   0469 80 A2               977 	sjmp	00132$
   046B                     978 00321$:
   046B E5*00               979 	mov	a,_bp
   046D 24 1B               980 	add	a,#0x1b
   046F F8                  981 	mov	r0,a
   0470 A6 02               982 	mov	@r0,ar2
   0472 08                  983 	inc	r0
   0473 A6 03               984 	mov	@r0,ar3
   0475 E5*00               985 	mov	a,_bp
   0477 24 0A               986 	add	a,#0x0a
   0479 F8                  987 	mov	r0,a
   047A A6 07               988 	mov	@r0,ar7
   047C                     989 00281$:
   047C E5*00               990 	mov	a,_bp
   047E 24 1B               991 	add	a,#0x1b
   0480 F8                  992 	mov	r0,a
   0481 E5*00               993 	mov	a,_bp
   0483 24 16               994 	add	a,#0x16
   0485 F9                  995 	mov	r1,a
   0486 E6                  996 	mov	a,@r0
   0487 F7                  997 	mov	@r1,a
   0488 08                  998 	inc	r0
   0489 09                  999 	inc	r1
   048A E6                 1000 	mov	a,@r0
   048B F7                 1001 	mov	@r1,a
   048C                    1002 00139$:
   048C E5*00              1003 	mov	a,_bp
   048E 24 15              1004 	add	a,#0x15
   0490 F8                 1005 	mov	r0,a
   0491 86 00              1006 	mov	ar0,@r0
   0493 86 07              1007 	mov	ar7,@r0
   0495 08                 1008 	inc	r0
   0496 86 02              1009 	mov	ar2,@r0
   0498 08                 1010 	inc	r0
   0499 86 03              1011 	mov	ar3,@r0
   049B 18                 1012 	dec	r0
   049C 18                 1013 	dec	r0
   049D 8F 82              1014 	mov	dpl,r7
   049F 8A 83              1015 	mov	dph,r2
   04A1 8B F0              1016 	mov	b,r3
   04A3 12s00r00           1017 	lcall	__gptrget
   04A6 FF                 1018 	mov	r7,a
   04A7 FC                 1019 	mov	r4,a
   04A8 70 03              1020 	jnz	00372$
   04AA 02s05r2B           1021 	ljmp	00322$
   04AD                    1022 00372$:
   04AD 8D 02              1023 	mov	ar2,r5
   04AF 1D                 1024 	dec	r5
   04B0 C3                 1025 	clr	c
   04B1 74 80              1026 	mov	a,#(0x00 ^ 0x80)
   04B3 8A F0              1027 	mov	b,r2
   04B5 63 F0 80           1028 	xrl	b,#0x80
   04B8 95 F0              1029 	subb	a,b
   04BA 50 6F              1030 	jnc	00322$
                           1031 ;	printf_large.c:549: OUTPUT_CHAR( c, p );
   04BC C0 05              1032 	push	ar5
   04BE C0*00              1033 	push	bits
   04C0 E5*00              1034 	mov	a,_bp
   04C2 24 FB              1035 	add	a,#0xfb
   04C4 F8                 1036 	mov	r0,a
   04C5 E6                 1037 	mov	a,@r0
   04C6 C0 E0              1038 	push	acc
   04C8 08                 1039 	inc	r0
   04C9 E6                 1040 	mov	a,@r0
   04CA C0 E0              1041 	push	acc
   04CC 08                 1042 	inc	r0
   04CD E6                 1043 	mov	a,@r0
   04CE C0 E0              1044 	push	acc
   04D0 74rE5              1045 	mov	a,#00374$
   04D2 C0 E0              1046 	push	acc
   04D4 74s04              1047 	mov	a,#(00374$ >> 8)
   04D6 C0 E0              1048 	push	acc
   04D8 A8*00              1049 	mov	r0,_bp
   04DA 08                 1050 	inc	r0
   04DB E6                 1051 	mov	a,@r0
   04DC C0 E0              1052 	push	acc
   04DE 08                 1053 	inc	r0
   04DF E6                 1054 	mov	a,@r0
   04E0 C0 E0              1055 	push	acc
   04E2 8C 82              1056 	mov	dpl,r4
   04E4 22                 1057 	ret
   04E5                    1058 00374$:
   04E5 15 81              1059 	dec	sp
   04E7 15 81              1060 	dec	sp
   04E9 15 81              1061 	dec	sp
   04EB D0*00              1062 	pop	bits
   04ED D0 05              1063 	pop	ar5
   04EF E5*00              1064 	mov	a,_bp
   04F1 24 16              1065 	add	a,#0x16
   04F3 F8                 1066 	mov	r0,a
   04F4 06                 1067 	inc	@r0
   04F5 B6 00 02           1068 	cjne	@r0,#0x00,00375$
   04F8 08                 1069 	inc	r0
   04F9 06                 1070 	inc	@r0
   04FA                    1071 00375$:
   04FA E5*00              1072 	mov	a,_bp
   04FC 24 16              1073 	add	a,#0x16
   04FE F8                 1074 	mov	r0,a
   04FF E5*00              1075 	mov	a,_bp
   0501 24 1B              1076 	add	a,#0x1b
   0503 F9                 1077 	mov	r1,a
   0504 E6                 1078 	mov	a,@r0
   0505 F7                 1079 	mov	@r1,a
   0506 08                 1080 	inc	r0
   0507 09                 1081 	inc	r1
   0508 E6                 1082 	mov	a,@r0
   0509 F7                 1083 	mov	@r1,a
                           1084 ;	printf_large.c:550: PTR++;
   050A E5*00              1085 	mov	a,_bp
   050C 24 04              1086 	add	a,#0x04
   050E F8                 1087 	mov	r0,a
   050F 86 02              1088 	mov	ar2,@r0
   0511 08                 1089 	inc	r0
   0512 86 03              1090 	mov	ar3,@r0
   0514 08                 1091 	inc	r0
   0515 86 06              1092 	mov	ar6,@r0
   0517 18                 1093 	dec	r0
   0518 18                 1094 	dec	r0
   0519 0A                 1095 	inc	r2
   051A BA 00 01           1096 	cjne	r2,#0x00,00376$
   051D 0B                 1097 	inc	r3
   051E                    1098 00376$:
   051E A6 02              1099 	mov	@r0,ar2
   0520 08                 1100 	inc	r0
   0521 A6 03              1101 	mov	@r0,ar3
   0523 08                 1102 	inc	r0
   0524 A6 06              1103 	mov	@r0,ar6
   0526 18                 1104 	dec	r0
   0527 18                 1105 	dec	r0
   0528 02s04r8C           1106 	ljmp	00139$
   052B                    1107 00322$:
   052B E5*00              1108 	mov	a,_bp
   052D 24 16              1109 	add	a,#0x16
   052F F8                 1110 	mov	r0,a
   0530 E5*00              1111 	mov	a,_bp
   0532 24 1B              1112 	add	a,#0x1b
   0534 F9                 1113 	mov	r1,a
   0535 E6                 1114 	mov	a,@r0
   0536 F7                 1115 	mov	@r1,a
   0537 08                 1116 	inc	r0
   0538 09                 1117 	inc	r1
   0539 E6                 1118 	mov	a,@r0
   053A F7                 1119 	mov	@r1,a
                           1120 ;	printf_large.c:553: if ( left_justify && (length < width))
   053B 20*00 03           1121 	jb	b0,00377$
   053E 02s08r33           1122 	ljmp	00168$
   0541                    1123 00377$:
   0541 E5*00              1124 	mov	a,_bp
   0543 24 11              1125 	add	a,#0x11
   0545 F8                 1126 	mov	r0,a
   0546 E5*00              1127 	mov	a,_bp
   0548 24 0A              1128 	add	a,#0x0a
   054A F9                 1129 	mov	r1,a
   054B C3                 1130 	clr	c
   054C E6                 1131 	mov	a,@r0
   054D 97                 1132 	subb	a,@r1
   054E 40 03              1133 	jc	00378$
   0550 02s08r33           1134 	ljmp	00168$
   0553                    1135 00378$:
                           1136 ;	printf_large.c:555: width -= length;
   0553 E5*00              1137 	mov	a,_bp
   0555 24 0A              1138 	add	a,#0x0a
   0557 F8                 1139 	mov	r0,a
   0558 E5*00              1140 	mov	a,_bp
   055A 24 11              1141 	add	a,#0x11
   055C F9                 1142 	mov	r1,a
   055D E6                 1143 	mov	a,@r0
   055E C3                 1144 	clr	c
   055F 97                 1145 	subb	a,@r1
   0560 F6                 1146 	mov	@r0,a
                           1147 ;	printf_large.c:556: while( width-- != 0 )
   0561 E5*00              1148 	mov	a,_bp
   0563 24 16              1149 	add	a,#0x16
   0565 F8                 1150 	mov	r0,a
   0566 86 02              1151 	mov	ar2,@r0
   0568 08                 1152 	inc	r0
   0569 86 03              1153 	mov	ar3,@r0
   056B E5*00              1154 	mov	a,_bp
   056D 24 0A              1155 	add	a,#0x0a
   056F F8                 1156 	mov	r0,a
   0570 86 06              1157 	mov	ar6,@r0
   0572                    1158 00142$:
   0572 8E 07              1159 	mov	ar7,r6
   0574 1E                 1160 	dec	r6
   0575 E5*00              1161 	mov	a,_bp
   0577 24 0A              1162 	add	a,#0x0a
   0579 F8                 1163 	mov	r0,a
   057A A6 06              1164 	mov	@r0,ar6
   057C EF                 1165 	mov	a,r7
   057D 70 03              1166 	jnz	00379$
   057F 02s08r22           1167 	ljmp	00323$
   0582                    1168 00379$:
                           1169 ;	printf_large.c:558: OUTPUT_CHAR( ' ', p );
   0582 C0 02              1170 	push	ar2
   0584 C0 03              1171 	push	ar3
   0586 C0 06              1172 	push	ar6
   0588 C0*00              1173 	push	bits
   058A E5*00              1174 	mov	a,_bp
   058C 24 FB              1175 	add	a,#0xfb
   058E F8                 1176 	mov	r0,a
   058F E6                 1177 	mov	a,@r0
   0590 C0 E0              1178 	push	acc
   0592 08                 1179 	inc	r0
   0593 E6                 1180 	mov	a,@r0
   0594 C0 E0              1181 	push	acc
   0596 08                 1182 	inc	r0
   0597 E6                 1183 	mov	a,@r0
   0598 C0 E0              1184 	push	acc
   059A 74rB0              1185 	mov	a,#00380$
   059C C0 E0              1186 	push	acc
   059E 74s05              1187 	mov	a,#(00380$ >> 8)
   05A0 C0 E0              1188 	push	acc
   05A2 A8*00              1189 	mov	r0,_bp
   05A4 08                 1190 	inc	r0
   05A5 E6                 1191 	mov	a,@r0
   05A6 C0 E0              1192 	push	acc
   05A8 08                 1193 	inc	r0
   05A9 E6                 1194 	mov	a,@r0
   05AA C0 E0              1195 	push	acc
   05AC 75 82 20           1196 	mov	dpl,#0x20
   05AF 22                 1197 	ret
   05B0                    1198 00380$:
   05B0 15 81              1199 	dec	sp
   05B2 15 81              1200 	dec	sp
   05B4 15 81              1201 	dec	sp
   05B6 D0*00              1202 	pop	bits
   05B8 D0 06              1203 	pop	ar6
   05BA D0 03              1204 	pop	ar3
   05BC D0 02              1205 	pop	ar2
   05BE 0A                 1206 	inc	r2
   05BF BA 00 01           1207 	cjne	r2,#0x00,00381$
   05C2 0B                 1208 	inc	r3
   05C3                    1209 00381$:
   05C3 E5*00              1210 	mov	a,_bp
   05C5 24 1B              1211 	add	a,#0x1b
   05C7 F8                 1212 	mov	r0,a
   05C8 A6 02              1213 	mov	@r0,ar2
   05CA 08                 1214 	inc	r0
   05CB A6 03              1215 	mov	@r0,ar3
                           1216 ;	printf_large.c:563: case 'P':
   05CD 80 A3              1217 	sjmp	00142$
   05CF                    1218 00148$:
                           1219 ;	printf_large.c:564: PTR = va_arg(ap,ptr_t);
   05CF E5*00              1220 	mov	a,_bp
   05D1 24 04              1221 	add	a,#0x04
   05D3 F8                 1222 	mov	r0,a
   05D4 E5*00              1223 	mov	a,_bp
   05D6 24 F7              1224 	add	a,#0xf7
   05D8 F9                 1225 	mov	r1,a
   05D9 E7                 1226 	mov	a,@r1
   05DA 24 FD              1227 	add	a,#0xfd
   05DC FF                 1228 	mov	r7,a
   05DD E5*00              1229 	mov	a,_bp
   05DF 24 F7              1230 	add	a,#0xf7
   05E1 F9                 1231 	mov	r1,a
   05E2 A7 07              1232 	mov	@r1,ar7
   05E4 A9 07              1233 	mov	r1,ar7
   05E6 87 07              1234 	mov	ar7,@r1
   05E8 09                 1235 	inc	r1
   05E9 87 04              1236 	mov	ar4,@r1
   05EB 09                 1237 	inc	r1
   05EC 87 05              1238 	mov	ar5,@r1
   05EE A6 07              1239 	mov	@r0,ar7
   05F0 08                 1240 	inc	r0
   05F1 A6 04              1241 	mov	@r0,ar4
   05F3 08                 1242 	inc	r0
   05F4 A6 05              1243 	mov	@r0,ar5
   05F6 18                 1244 	dec	r0
   05F7 18                 1245 	dec	r0
                           1246 ;	printf_large.c:587: unsigned char memtype = value.byte[2];
   05F8 E5*00              1247 	mov	a,_bp
   05FA 24 04              1248 	add	a,#0x04
   05FC 24 02              1249 	add	a,#0x02
   05FE F8                 1250 	mov	r0,a
   05FF 86 04              1251 	mov	ar4,@r0
   0601 8C 02              1252 	mov	ar2,r4
                           1253 ;	printf_large.c:588: if (memtype >= 0x80)
   0603 BA 80 00           1254 	cjne	r2,#0x80,00382$
   0606                    1255 00382$:
   0606 40 04              1256 	jc	00156$
                           1257 ;	printf_large.c:589: c = 'C';
   0608 7C 43              1258 	mov	r4,#0x43
   060A 80 14              1259 	sjmp	00157$
   060C                    1260 00156$:
                           1261 ;	printf_large.c:590: else if (memtype >= 0x60)
   060C BA 60 00           1262 	cjne	r2,#0x60,00384$
   060F                    1263 00384$:
   060F 40 04              1264 	jc	00153$
                           1265 ;	printf_large.c:591: c = 'P';
   0611 7C 50              1266 	mov	r4,#0x50
   0613 80 0B              1267 	sjmp	00157$
   0615                    1268 00153$:
                           1269 ;	printf_large.c:592: else if (memtype >= 0x40)
   0615 BA 40 00           1270 	cjne	r2,#0x40,00386$
   0618                    1271 00386$:
   0618 40 04              1272 	jc	00150$
                           1273 ;	printf_large.c:593: c = 'I';
   061A 7C 49              1274 	mov	r4,#0x49
   061C 80 02              1275 	sjmp	00157$
   061E                    1276 00150$:
                           1277 ;	printf_large.c:595: c = 'X';
   061E 7C 58              1278 	mov	r4,#0x58
   0620                    1279 00157$:
                           1280 ;	printf_large.c:597: OUTPUT_CHAR(c, p);
   0620 C0 04              1281 	push	ar4
   0622 C0*00              1282 	push	bits
   0624 E5*00              1283 	mov	a,_bp
   0626 24 FB              1284 	add	a,#0xfb
   0628 F8                 1285 	mov	r0,a
   0629 E6                 1286 	mov	a,@r0
   062A C0 E0              1287 	push	acc
   062C 08                 1288 	inc	r0
   062D E6                 1289 	mov	a,@r0
   062E C0 E0              1290 	push	acc
   0630 08                 1291 	inc	r0
   0631 E6                 1292 	mov	a,@r0
   0632 C0 E0              1293 	push	acc
   0634 74r49              1294 	mov	a,#00388$
   0636 C0 E0              1295 	push	acc
   0638 74s06              1296 	mov	a,#(00388$ >> 8)
   063A C0 E0              1297 	push	acc
   063C A8*00              1298 	mov	r0,_bp
   063E 08                 1299 	inc	r0
   063F E6                 1300 	mov	a,@r0
   0640 C0 E0              1301 	push	acc
   0642 08                 1302 	inc	r0
   0643 E6                 1303 	mov	a,@r0
   0644 C0 E0              1304 	push	acc
   0646 8C 82              1305 	mov	dpl,r4
   0648 22                 1306 	ret
   0649                    1307 00388$:
   0649 15 81              1308 	dec	sp
   064B 15 81              1309 	dec	sp
   064D 15 81              1310 	dec	sp
   064F D0*00              1311 	pop	bits
   0651 D0 04              1312 	pop	ar4
   0653 E5*00              1313 	mov	a,_bp
   0655 24 1B              1314 	add	a,#0x1b
   0657 F8                 1315 	mov	r0,a
   0658 06                 1316 	inc	@r0
   0659 B6 00 02           1317 	cjne	@r0,#0x00,00389$
   065C 08                 1318 	inc	r0
   065D 06                 1319 	inc	@r0
   065E                    1320 00389$:
                           1321 ;	printf_large.c:598: OUTPUT_CHAR(':', p);
   065E C0 04              1322 	push	ar4
   0660 C0*00              1323 	push	bits
   0662 E5*00              1324 	mov	a,_bp
   0664 24 FB              1325 	add	a,#0xfb
   0666 F8                 1326 	mov	r0,a
   0667 E6                 1327 	mov	a,@r0
   0668 C0 E0              1328 	push	acc
   066A 08                 1329 	inc	r0
   066B E6                 1330 	mov	a,@r0
   066C C0 E0              1331 	push	acc
   066E 08                 1332 	inc	r0
   066F E6                 1333 	mov	a,@r0
   0670 C0 E0              1334 	push	acc
   0672 74r88              1335 	mov	a,#00390$
   0674 C0 E0              1336 	push	acc
   0676 74s06              1337 	mov	a,#(00390$ >> 8)
   0678 C0 E0              1338 	push	acc
   067A A8*00              1339 	mov	r0,_bp
   067C 08                 1340 	inc	r0
   067D E6                 1341 	mov	a,@r0
   067E C0 E0              1342 	push	acc
   0680 08                 1343 	inc	r0
   0681 E6                 1344 	mov	a,@r0
   0682 C0 E0              1345 	push	acc
   0684 75 82 3A           1346 	mov	dpl,#0x3A
   0687 22                 1347 	ret
   0688                    1348 00390$:
   0688 15 81              1349 	dec	sp
   068A 15 81              1350 	dec	sp
   068C 15 81              1351 	dec	sp
   068E D0*00              1352 	pop	bits
   0690 D0 04              1353 	pop	ar4
   0692 E5*00              1354 	mov	a,_bp
   0694 24 1B              1355 	add	a,#0x1b
   0696 F8                 1356 	mov	r0,a
   0697 06                 1357 	inc	@r0
   0698 B6 00 02           1358 	cjne	@r0,#0x00,00391$
   069B 08                 1359 	inc	r0
   069C 06                 1360 	inc	@r0
   069D                    1361 00391$:
                           1362 ;	printf_large.c:599: OUTPUT_CHAR('0', p);
   069D C0 04              1363 	push	ar4
   069F C0*00              1364 	push	bits
   06A1 E5*00              1365 	mov	a,_bp
   06A3 24 FB              1366 	add	a,#0xfb
   06A5 F8                 1367 	mov	r0,a
   06A6 E6                 1368 	mov	a,@r0
   06A7 C0 E0              1369 	push	acc
   06A9 08                 1370 	inc	r0
   06AA E6                 1371 	mov	a,@r0
   06AB C0 E0              1372 	push	acc
   06AD 08                 1373 	inc	r0
   06AE E6                 1374 	mov	a,@r0
   06AF C0 E0              1375 	push	acc
   06B1 74rC7              1376 	mov	a,#00392$
   06B3 C0 E0              1377 	push	acc
   06B5 74s06              1378 	mov	a,#(00392$ >> 8)
   06B7 C0 E0              1379 	push	acc
   06B9 A8*00              1380 	mov	r0,_bp
   06BB 08                 1381 	inc	r0
   06BC E6                 1382 	mov	a,@r0
   06BD C0 E0              1383 	push	acc
   06BF 08                 1384 	inc	r0
   06C0 E6                 1385 	mov	a,@r0
   06C1 C0 E0              1386 	push	acc
   06C3 75 82 30           1387 	mov	dpl,#0x30
   06C6 22                 1388 	ret
   06C7                    1389 00392$:
   06C7 15 81              1390 	dec	sp
   06C9 15 81              1391 	dec	sp
   06CB 15 81              1392 	dec	sp
   06CD D0*00              1393 	pop	bits
   06CF D0 04              1394 	pop	ar4
   06D1 E5*00              1395 	mov	a,_bp
   06D3 24 1B              1396 	add	a,#0x1b
   06D5 F8                 1397 	mov	r0,a
   06D6 06                 1398 	inc	@r0
   06D7 B6 00 02           1399 	cjne	@r0,#0x00,00393$
   06DA 08                 1400 	inc	r0
   06DB 06                 1401 	inc	@r0
   06DC                    1402 00393$:
                           1403 ;	printf_large.c:600: OUTPUT_CHAR('x', p);
   06DC C0 04              1404 	push	ar4
   06DE C0*00              1405 	push	bits
   06E0 E5*00              1406 	mov	a,_bp
   06E2 24 FB              1407 	add	a,#0xfb
   06E4 F8                 1408 	mov	r0,a
   06E5 E6                 1409 	mov	a,@r0
   06E6 C0 E0              1410 	push	acc
   06E8 08                 1411 	inc	r0
   06E9 E6                 1412 	mov	a,@r0
   06EA C0 E0              1413 	push	acc
   06EC 08                 1414 	inc	r0
   06ED E6                 1415 	mov	a,@r0
   06EE C0 E0              1416 	push	acc
   06F0 74r06              1417 	mov	a,#00394$
   06F2 C0 E0              1418 	push	acc
   06F4 74s07              1419 	mov	a,#(00394$ >> 8)
   06F6 C0 E0              1420 	push	acc
   06F8 A8*00              1421 	mov	r0,_bp
   06FA 08                 1422 	inc	r0
   06FB E6                 1423 	mov	a,@r0
   06FC C0 E0              1424 	push	acc
   06FE 08                 1425 	inc	r0
   06FF E6                 1426 	mov	a,@r0
   0700 C0 E0              1427 	push	acc
   0702 75 82 78           1428 	mov	dpl,#0x78
   0705 22                 1429 	ret
   0706                    1430 00394$:
   0706 15 81              1431 	dec	sp
   0708 15 81              1432 	dec	sp
   070A 15 81              1433 	dec	sp
   070C D0*00              1434 	pop	bits
   070E D0 04              1435 	pop	ar4
   0710 E5*00              1436 	mov	a,_bp
   0712 24 1B              1437 	add	a,#0x1b
   0714 F8                 1438 	mov	r0,a
   0715 06                 1439 	inc	@r0
   0716 B6 00 02           1440 	cjne	@r0,#0x00,00395$
   0719 08                 1441 	inc	r0
   071A 06                 1442 	inc	@r0
   071B                    1443 00395$:
                           1444 ;	printf_large.c:601: if ((c != 'I' /* idata */) &&
   071B BC 49 02           1445 	cjne	r4,#0x49,00396$
   071E 80 50              1446 	sjmp	00159$
   0720                    1447 00396$:
                           1448 ;	printf_large.c:602: (c != 'P' /* pdata */))
   0720 BC 50 02           1449 	cjne	r4,#0x50,00397$
   0723 80 4B              1450 	sjmp	00159$
   0725                    1451 00397$:
                           1452 ;	printf_large.c:604: OUTPUT_2DIGITS( value.byte[1] );
   0725 E5*00              1453 	mov	a,_bp
   0727 24 04              1454 	add	a,#0x04
   0729 04                 1455 	inc	a
   072A F8                 1456 	mov	r0,a
   072B 86 07              1457 	mov	ar7,@r0
   072D C0*00              1458 	push	bits
   072F E5*00              1459 	mov	a,_bp
   0731 24 FB              1460 	add	a,#0xfb
   0733 F8                 1461 	mov	r0,a
   0734 E6                 1462 	mov	a,@r0
   0735 C0 E0              1463 	push	acc
   0737 08                 1464 	inc	r0
   0738 E6                 1465 	mov	a,@r0
   0739 C0 E0              1466 	push	acc
   073B 08                 1467 	inc	r0
   073C E6                 1468 	mov	a,@r0
   073D C0 E0              1469 	push	acc
   073F A8*00              1470 	mov	r0,_bp
   0741 08                 1471 	inc	r0
   0742 E6                 1472 	mov	a,@r0
   0743 C0 E0              1473 	push	acc
   0745 08                 1474 	inc	r0
   0746 E6                 1475 	mov	a,@r0
   0747 C0 E0              1476 	push	acc
   0749 E5*00              1477 	mov	a,_bp
   074B 24 03              1478 	add	a,#0x03
   074D F8                 1479 	mov	r0,a
   074E E6                 1480 	mov	a,@r0
   074F 24 FF              1481 	add	a,#0xff
   0751 92 F0              1482 	mov	b[0],c
   0753 85 F0*00           1483 	mov	bits,b
   0756 8F 82              1484 	mov	dpl,r7
   0758 12s00r4A           1485 	lcall	_output_2digits
   075B E5 81              1486 	mov	a,sp
   075D 24 FB              1487 	add	a,#0xfb
   075F F5 81              1488 	mov	sp,a
   0761 D0*00              1489 	pop	bits
   0763 E5*00              1490 	mov	a,_bp
   0765 24 1B              1491 	add	a,#0x1b
   0767 F8                 1492 	mov	r0,a
   0768 74 02              1493 	mov	a,#0x02
   076A 26                 1494 	add	a,@r0
   076B F6                 1495 	mov	@r0,a
   076C E4                 1496 	clr	a
   076D 08                 1497 	inc	r0
   076E 36                 1498 	addc	a,@r0
   076F F6                 1499 	mov	@r0,a
   0770                    1500 00159$:
                           1501 ;	printf_large.c:606: OUTPUT_2DIGITS( value.byte[0] );
   0770 E5*00              1502 	mov	a,_bp
   0772 24 04              1503 	add	a,#0x04
   0774 F8                 1504 	mov	r0,a
   0775 86 07              1505 	mov	ar7,@r0
   0777 C0*00              1506 	push	bits
   0779 E5*00              1507 	mov	a,_bp
   077B 24 FB              1508 	add	a,#0xfb
   077D F8                 1509 	mov	r0,a
   077E E6                 1510 	mov	a,@r0
   077F C0 E0              1511 	push	acc
   0781 08                 1512 	inc	r0
   0782 E6                 1513 	mov	a,@r0
   0783 C0 E0              1514 	push	acc
   0785 08                 1515 	inc	r0
   0786 E6                 1516 	mov	a,@r0
   0787 C0 E0              1517 	push	acc
   0789 A8*00              1518 	mov	r0,_bp
   078B 08                 1519 	inc	r0
   078C E6                 1520 	mov	a,@r0
   078D C0 E0              1521 	push	acc
   078F 08                 1522 	inc	r0
   0790 E6                 1523 	mov	a,@r0
   0791 C0 E0              1524 	push	acc
   0793 E5*00              1525 	mov	a,_bp
   0795 24 03              1526 	add	a,#0x03
   0797 F8                 1527 	mov	r0,a
   0798 E6                 1528 	mov	a,@r0
   0799 24 FF              1529 	add	a,#0xff
   079B 92 F0              1530 	mov	b[0],c
   079D 85 F0*00           1531 	mov	bits,b
   07A0 8F 82              1532 	mov	dpl,r7
   07A2 12s00r4A           1533 	lcall	_output_2digits
   07A5 E5 81              1534 	mov	a,sp
   07A7 24 FB              1535 	add	a,#0xfb
   07A9 F5 81              1536 	mov	sp,a
   07AB D0*00              1537 	pop	bits
   07AD E5*00              1538 	mov	a,_bp
   07AF 24 1B              1539 	add	a,#0x1b
   07B1 F8                 1540 	mov	r0,a
   07B2 74 02              1541 	mov	a,#0x02
   07B4 26                 1542 	add	a,@r0
   07B5 F6                 1543 	mov	@r0,a
   07B6 E4                 1544 	clr	a
   07B7 08                 1545 	inc	r0
   07B8 36                 1546 	addc	a,@r0
   07B9 F6                 1547 	mov	@r0,a
                           1548 ;	printf_large.c:613: break;
                           1549 ;	printf_large.c:616: case 'I':
   07BA 80 77              1550 	sjmp	00168$
   07BC                    1551 00162$:
                           1552 ;	printf_large.c:617: signed_argument = 1;
   07BC D2*00              1553 	setb	b4
                           1554 ;	printf_large.c:618: radix = 10;
   07BE E5*00              1555 	mov	a,_bp
   07C0 24 09              1556 	add	a,#0x09
   07C2 F8                 1557 	mov	r0,a
   07C3 76 0A              1558 	mov	@r0,#0x0A
                           1559 ;	printf_large.c:619: break;
                           1560 ;	printf_large.c:621: case 'O':
   07C5 80 6C              1561 	sjmp	00168$
   07C7                    1562 00163$:
                           1563 ;	printf_large.c:622: radix = 8;
   07C7 E5*00              1564 	mov	a,_bp
   07C9 24 09              1565 	add	a,#0x09
   07CB F8                 1566 	mov	r0,a
   07CC 76 08              1567 	mov	@r0,#0x08
                           1568 ;	printf_large.c:623: break;
                           1569 ;	printf_large.c:625: case 'U':
   07CE 80 63              1570 	sjmp	00168$
   07D0                    1571 00164$:
                           1572 ;	printf_large.c:626: radix = 10;
   07D0 E5*00              1573 	mov	a,_bp
   07D2 24 09              1574 	add	a,#0x09
   07D4 F8                 1575 	mov	r0,a
   07D5 76 0A              1576 	mov	@r0,#0x0A
                           1577 ;	printf_large.c:627: break;
                           1578 ;	printf_large.c:629: case 'X':
   07D7 80 5A              1579 	sjmp	00168$
   07D9                    1580 00165$:
                           1581 ;	printf_large.c:630: radix = 16;
   07D9 E5*00              1582 	mov	a,_bp
   07DB 24 09              1583 	add	a,#0x09
   07DD F8                 1584 	mov	r0,a
   07DE 76 10              1585 	mov	@r0,#0x10
                           1586 ;	printf_large.c:631: break;
                           1587 ;	printf_large.c:633: case 'F':
   07E0 80 51              1588 	sjmp	00168$
   07E2                    1589 00166$:
                           1590 ;	printf_large.c:634: float_argument=1;
   07E2 D2*00              1591 	setb	b7
                           1592 ;	printf_large.c:635: break;
                           1593 ;	printf_large.c:637: default:
   07E4 80 4D              1594 	sjmp	00168$
   07E6                    1595 00167$:
                           1596 ;	printf_large.c:639: OUTPUT_CHAR( c, p );
   07E6 C0*00              1597 	push	bits
   07E8 E5*00              1598 	mov	a,_bp
   07EA 24 FB              1599 	add	a,#0xfb
   07EC F8                 1600 	mov	r0,a
   07ED E6                 1601 	mov	a,@r0
   07EE C0 E0              1602 	push	acc
   07F0 08                 1603 	inc	r0
   07F1 E6                 1604 	mov	a,@r0
   07F2 C0 E0              1605 	push	acc
   07F4 08                 1606 	inc	r0
   07F5 E6                 1607 	mov	a,@r0
   07F6 C0 E0              1608 	push	acc
   07F8 74r0D              1609 	mov	a,#00398$
   07FA C0 E0              1610 	push	acc
   07FC 74s08              1611 	mov	a,#(00398$ >> 8)
   07FE C0 E0              1612 	push	acc
   0800 A8*00              1613 	mov	r0,_bp
   0802 08                 1614 	inc	r0
   0803 E6                 1615 	mov	a,@r0
   0804 C0 E0              1616 	push	acc
   0806 08                 1617 	inc	r0
   0807 E6                 1618 	mov	a,@r0
   0808 C0 E0              1619 	push	acc
   080A 8C 82              1620 	mov	dpl,r4
   080C 22                 1621 	ret
   080D                    1622 00398$:
   080D 15 81              1623 	dec	sp
   080F 15 81              1624 	dec	sp
   0811 15 81              1625 	dec	sp
   0813 D0*00              1626 	pop	bits
   0815 E5*00              1627 	mov	a,_bp
   0817 24 1B              1628 	add	a,#0x1b
   0819 F8                 1629 	mov	r0,a
   081A 06                 1630 	inc	@r0
   081B B6 00 02           1631 	cjne	@r0,#0x00,00399$
   081E 08                 1632 	inc	r0
   081F 06                 1633 	inc	@r0
   0820                    1634 00399$:
                           1635 ;	printf_large.c:816: return charsOutputted;
                           1636 ;	printf_large.c:641: }
   0820 80 11              1637 	sjmp	00168$
   0822                    1638 00323$:
   0822 E5*00              1639 	mov	a,_bp
   0824 24 1B              1640 	add	a,#0x1b
   0826 F8                 1641 	mov	r0,a
   0827 A6 02              1642 	mov	@r0,ar2
   0829 08                 1643 	inc	r0
   082A A6 03              1644 	mov	@r0,ar3
   082C E5*00              1645 	mov	a,_bp
   082E 24 0A              1646 	add	a,#0x0a
   0830 F8                 1647 	mov	r0,a
   0831 A6 06              1648 	mov	@r0,ar6
   0833                    1649 00168$:
                           1650 ;	printf_large.c:643: if (float_argument) {
   0833 20*00 03           1651 	jb	b7,00400$
   0836 02s09r02           1652 	ljmp	00234$
   0839                    1653 00400$:
                           1654 ;	printf_large.c:644: value.f=va_arg(ap,float);
   0839 E5*00              1655 	mov	a,_bp
   083B 24 04              1656 	add	a,#0x04
   083D F8                 1657 	mov	r0,a
   083E E5*00              1658 	mov	a,_bp
   0840 24 F7              1659 	add	a,#0xf7
   0842 F9                 1660 	mov	r1,a
   0843 E7                 1661 	mov	a,@r1
   0844 24 FC              1662 	add	a,#0xfc
   0846 FA                 1663 	mov	r2,a
   0847 E5*00              1664 	mov	a,_bp
   0849 24 F7              1665 	add	a,#0xf7
   084B F9                 1666 	mov	r1,a
   084C A7 02              1667 	mov	@r1,ar2
   084E A9 02              1668 	mov	r1,ar2
   0850 87 02              1669 	mov	ar2,@r1
   0852 09                 1670 	inc	r1
   0853 87 03              1671 	mov	ar3,@r1
   0855 09                 1672 	inc	r1
   0856 87 06              1673 	mov	ar6,@r1
   0858 09                 1674 	inc	r1
   0859 87 07              1675 	mov	ar7,@r1
   085B A6 02              1676 	mov	@r0,ar2
   085D 08                 1677 	inc	r0
   085E A6 03              1678 	mov	@r0,ar3
   0860 08                 1679 	inc	r0
   0861 A6 06              1680 	mov	@r0,ar6
   0863 08                 1681 	inc	r0
   0864 A6 07              1682 	mov	@r0,ar7
   0866 18                 1683 	dec	r0
   0867 18                 1684 	dec	r0
   0868 18                 1685 	dec	r0
                           1686 ;	printf_large.c:646: PTR="<NO FLOAT>";
   0869 E5*00              1687 	mov	a,_bp
   086B 24 04              1688 	add	a,#0x04
   086D F8                 1689 	mov	r0,a
   086E 76r00              1690 	mov	@r0,#__str_0
   0870 08                 1691 	inc	r0
   0871 76s00              1692 	mov	@r0,#(__str_0 >> 8)
   0873 08                 1693 	inc	r0
   0874 76 80              1694 	mov	@r0,#0x80
   0876 18                 1695 	dec	r0
   0877 18                 1696 	dec	r0
                           1697 ;	printf_large.c:647: while (c=*PTR++)
   0878 E5*00              1698 	mov	a,_bp
   087A 24 1B              1699 	add	a,#0x1b
   087C F8                 1700 	mov	r0,a
   087D E5*00              1701 	mov	a,_bp
   087F 24 19              1702 	add	a,#0x19
   0881 F9                 1703 	mov	r1,a
   0882 E6                 1704 	mov	a,@r0
   0883 F7                 1705 	mov	@r1,a
   0884 08                 1706 	inc	r0
   0885 09                 1707 	inc	r1
   0886 E6                 1708 	mov	a,@r0
   0887 F7                 1709 	mov	@r1,a
   0888                    1710 00169$:
   0888 E5*00              1711 	mov	a,_bp
   088A 24 04              1712 	add	a,#0x04
   088C F8                 1713 	mov	r0,a
   088D 86 06              1714 	mov	ar6,@r0
   088F 08                 1715 	inc	r0
   0890 86 07              1716 	mov	ar7,@r0
   0892 08                 1717 	inc	r0
   0893 86 04              1718 	mov	ar4,@r0
   0895 18                 1719 	dec	r0
   0896 18                 1720 	dec	r0
   0897 74 01              1721 	mov	a,#0x01
   0899 2E                 1722 	add	a,r6
   089A FD                 1723 	mov	r5,a
   089B E4                 1724 	clr	a
   089C 3F                 1725 	addc	a,r7
   089D FA                 1726 	mov	r2,a
   089E 8C 03              1727 	mov	ar3,r4
   08A0 A6 05              1728 	mov	@r0,ar5
   08A2 08                 1729 	inc	r0
   08A3 A6 02              1730 	mov	@r0,ar2
   08A5 08                 1731 	inc	r0
   08A6 A6 03              1732 	mov	@r0,ar3
   08A8 18                 1733 	dec	r0
   08A9 18                 1734 	dec	r0
   08AA 8E 82              1735 	mov	dpl,r6
   08AC 8F 83              1736 	mov	dph,r7
   08AE 8C F0              1737 	mov	b,r4
   08B0 12s00r00           1738 	lcall	__gptrget
   08B3 FE                 1739 	mov	r6,a
   08B4 FC                 1740 	mov	r4,a
   08B5 70 03              1741 	jnz	00401$
   08B7 02s01r78           1742 	ljmp	00239$
   08BA                    1743 00401$:
                           1744 ;	printf_large.c:649: OUTPUT_CHAR (c, p);
   08BA E5*00              1745 	mov	a,_bp
   08BC 24 FB              1746 	add	a,#0xfb
   08BE F8                 1747 	mov	r0,a
   08BF E6                 1748 	mov	a,@r0
   08C0 C0 E0              1749 	push	acc
   08C2 08                 1750 	inc	r0
   08C3 E6                 1751 	mov	a,@r0
   08C4 C0 E0              1752 	push	acc
   08C6 08                 1753 	inc	r0
   08C7 E6                 1754 	mov	a,@r0
   08C8 C0 E0              1755 	push	acc
   08CA 74rDF              1756 	mov	a,#00402$
   08CC C0 E0              1757 	push	acc
   08CE 74s08              1758 	mov	a,#(00402$ >> 8)
   08D0 C0 E0              1759 	push	acc
   08D2 A8*00              1760 	mov	r0,_bp
   08D4 08                 1761 	inc	r0
   08D5 E6                 1762 	mov	a,@r0
   08D6 C0 E0              1763 	push	acc
   08D8 08                 1764 	inc	r0
   08D9 E6                 1765 	mov	a,@r0
   08DA C0 E0              1766 	push	acc
   08DC 8C 82              1767 	mov	dpl,r4
   08DE 22                 1768 	ret
   08DF                    1769 00402$:
   08DF 15 81              1770 	dec	sp
   08E1 15 81              1771 	dec	sp
   08E3 15 81              1772 	dec	sp
   08E5 E5*00              1773 	mov	a,_bp
   08E7 24 19              1774 	add	a,#0x19
   08E9 F8                 1775 	mov	r0,a
   08EA 06                 1776 	inc	@r0
   08EB B6 00 02           1777 	cjne	@r0,#0x00,00403$
   08EE 08                 1778 	inc	r0
   08EF 06                 1779 	inc	@r0
   08F0                    1780 00403$:
   08F0 E5*00              1781 	mov	a,_bp
   08F2 24 19              1782 	add	a,#0x19
   08F4 F8                 1783 	mov	r0,a
   08F5 E5*00              1784 	mov	a,_bp
   08F7 24 1B              1785 	add	a,#0x1b
   08F9 F9                 1786 	mov	r1,a
   08FA E6                 1787 	mov	a,@r0
   08FB F7                 1788 	mov	@r1,a
   08FC 08                 1789 	inc	r0
   08FD 09                 1790 	inc	r1
   08FE E6                 1791 	mov	a,@r0
   08FF F7                 1792 	mov	@r1,a
   0900 80 86              1793 	sjmp	00169$
   0902                    1794 00234$:
                           1795 ;	printf_large.c:666: } else if (radix != 0)
   0902 E5*00              1796 	mov	a,_bp
   0904 24 09              1797 	add	a,#0x09
   0906 F8                 1798 	mov	r0,a
   0907 E6                 1799 	mov	a,@r0
   0908 70 03              1800 	jnz	00404$
   090A 02s01r78           1801 	ljmp	00239$
   090D                    1802 00404$:
                           1803 ;	printf_large.c:671: unsigned char MEM_SPACE_BUF_PP *pstore = &store[5];
   090D E5*00              1804 	mov	a,_bp
   090F 24 14              1805 	add	a,#0x14
   0911 F8                 1806 	mov	r0,a
   0912 86 02              1807 	mov	ar2,@r0
                           1808 ;	printf_large.c:674: if (char_argument)
   0914 30*00 61           1809 	jnb	b5,00180$
                           1810 ;	printf_large.c:676: value.l = va_arg(ap,char);
   0917 C0 02              1811 	push	ar2
   0919 E5*00              1812 	mov	a,_bp
   091B 24 04              1813 	add	a,#0x04
   091D F8                 1814 	mov	r0,a
   091E C0 00              1815 	push	ar0
   0920 E5*00              1816 	mov	a,_bp
   0922 24 F7              1817 	add	a,#0xf7
   0924 F8                 1818 	mov	r0,a
   0925 E6                 1819 	mov	a,@r0
   0926 14                 1820 	dec	a
   0927 F9                 1821 	mov	r1,a
   0928 E5*00              1822 	mov	a,_bp
   092A 24 F7              1823 	add	a,#0xf7
   092C F8                 1824 	mov	r0,a
   092D A6 01              1825 	mov	@r0,ar1
   092F D0 00              1826 	pop	ar0
   0931 E7                 1827 	mov	a,@r1
   0932 FB                 1828 	mov	r3,a
   0933 33                 1829 	rlc	a
   0934 95 E0              1830 	subb	a,acc
   0936 FE                 1831 	mov	r6,a
   0937 FF                 1832 	mov	r7,a
   0938 FA                 1833 	mov	r2,a
   0939 A6 03              1834 	mov	@r0,ar3
   093B 08                 1835 	inc	r0
   093C A6 06              1836 	mov	@r0,ar6
   093E 08                 1837 	inc	r0
   093F A6 07              1838 	mov	@r0,ar7
   0941 08                 1839 	inc	r0
   0942 A6 02              1840 	mov	@r0,ar2
   0944 18                 1841 	dec	r0
   0945 18                 1842 	dec	r0
   0946 18                 1843 	dec	r0
                           1844 ;	printf_large.c:677: if (!signed_argument)
   0947 D0 02              1845 	pop	ar2
   0949 30*00 03           1846 	jnb	b4,00406$
   094C 02s0Ar14           1847 	ljmp	00181$
   094F                    1848 00406$:
                           1849 ;	printf_large.c:679: value.l &= 0xFF;
   094F C0 02              1850 	push	ar2
   0951 86 03              1851 	mov	ar3,@r0
   0953 08                 1852 	inc	r0
   0954 86 06              1853 	mov	ar6,@r0
   0956 08                 1854 	inc	r0
   0957 86 07              1855 	mov	ar7,@r0
   0959 08                 1856 	inc	r0
   095A 86 02              1857 	mov	ar2,@r0
   095C 18                 1858 	dec	r0
   095D 18                 1859 	dec	r0
   095E 18                 1860 	dec	r0
   095F 7E 00              1861 	mov	r6,#0x00
   0961 7F 00              1862 	mov	r7,#0x00
   0963 7A 00              1863 	mov	r2,#0x00
   0965 A6 03              1864 	mov	@r0,ar3
   0967 08                 1865 	inc	r0
   0968 A6 06              1866 	mov	@r0,ar6
   096A 08                 1867 	inc	r0
   096B A6 07              1868 	mov	@r0,ar7
   096D 08                 1869 	inc	r0
   096E A6 02              1870 	mov	@r0,ar2
   0970 18                 1871 	dec	r0
   0971 18                 1872 	dec	r0
   0972 18                 1873 	dec	r0
   0973 D0 02              1874 	pop	ar2
   0975 02s0Ar14           1875 	ljmp	00181$
   0978                    1876 00180$:
                           1877 ;	printf_large.c:682: else if (long_argument)
   0978 30*00 3B           1878 	jnb	b6,00177$
                           1879 ;	printf_large.c:684: value.l = va_arg(ap,long);
   097B C0 02              1880 	push	ar2
   097D E5*00              1881 	mov	a,_bp
   097F 24 04              1882 	add	a,#0x04
   0981 F8                 1883 	mov	r0,a
   0982 C0 00              1884 	push	ar0
   0984 E5*00              1885 	mov	a,_bp
   0986 24 F7              1886 	add	a,#0xf7
   0988 F8                 1887 	mov	r0,a
   0989 E6                 1888 	mov	a,@r0
   098A 24 FC              1889 	add	a,#0xfc
   098C F9                 1890 	mov	r1,a
   098D E5*00              1891 	mov	a,_bp
   098F 24 F7              1892 	add	a,#0xf7
   0991 F8                 1893 	mov	r0,a
   0992 A6 01              1894 	mov	@r0,ar1
   0994 D0 00              1895 	pop	ar0
   0996 87 03              1896 	mov	ar3,@r1
   0998 09                 1897 	inc	r1
   0999 87 06              1898 	mov	ar6,@r1
   099B 09                 1899 	inc	r1
   099C 87 07              1900 	mov	ar7,@r1
   099E 09                 1901 	inc	r1
   099F 87 02              1902 	mov	ar2,@r1
   09A1 19                 1903 	dec	r1
   09A2 19                 1904 	dec	r1
   09A3 19                 1905 	dec	r1
   09A4 A6 03              1906 	mov	@r0,ar3
   09A6 08                 1907 	inc	r0
   09A7 A6 06              1908 	mov	@r0,ar6
   09A9 08                 1909 	inc	r0
   09AA A6 07              1910 	mov	@r0,ar7
   09AC 08                 1911 	inc	r0
   09AD A6 02              1912 	mov	@r0,ar2
   09AF 18                 1913 	dec	r0
   09B0 18                 1914 	dec	r0
   09B1 18                 1915 	dec	r0
   09B2 D0 02              1916 	pop	ar2
   09B4 80 5E              1917 	sjmp	00181$
   09B6                    1918 00177$:
                           1919 ;	printf_large.c:688: value.l = va_arg(ap,int);
   09B6 C0 02              1920 	push	ar2
   09B8 E5*00              1921 	mov	a,_bp
   09BA 24 04              1922 	add	a,#0x04
   09BC F8                 1923 	mov	r0,a
   09BD C0 00              1924 	push	ar0
   09BF E5*00              1925 	mov	a,_bp
   09C1 24 F7              1926 	add	a,#0xf7
   09C3 F8                 1927 	mov	r0,a
   09C4 E6                 1928 	mov	a,@r0
   09C5 24 FE              1929 	add	a,#0xfe
   09C7 F9                 1930 	mov	r1,a
   09C8 E5*00              1931 	mov	a,_bp
   09CA 24 F7              1932 	add	a,#0xf7
   09CC F8                 1933 	mov	r0,a
   09CD A6 01              1934 	mov	@r0,ar1
   09CF D0 00              1935 	pop	ar0
   09D1 87 03              1936 	mov	ar3,@r1
   09D3 09                 1937 	inc	r1
   09D4 87 06              1938 	mov	ar6,@r1
   09D6 19                 1939 	dec	r1
   09D7 EE                 1940 	mov	a,r6
   09D8 33                 1941 	rlc	a
   09D9 95 E0              1942 	subb	a,acc
   09DB FF                 1943 	mov	r7,a
   09DC FA                 1944 	mov	r2,a
   09DD A6 03              1945 	mov	@r0,ar3
   09DF 08                 1946 	inc	r0
   09E0 A6 06              1947 	mov	@r0,ar6
   09E2 08                 1948 	inc	r0
   09E3 A6 07              1949 	mov	@r0,ar7
   09E5 08                 1950 	inc	r0
   09E6 A6 02              1951 	mov	@r0,ar2
   09E8 18                 1952 	dec	r0
   09E9 18                 1953 	dec	r0
   09EA 18                 1954 	dec	r0
                           1955 ;	printf_large.c:689: if (!signed_argument)
   09EB D0 02              1956 	pop	ar2
   09ED 20*00 24           1957 	jb	b4,00181$
                           1958 ;	printf_large.c:691: value.l &= 0xFFFF;
   09F0 C0 02              1959 	push	ar2
   09F2 86 03              1960 	mov	ar3,@r0
   09F4 08                 1961 	inc	r0
   09F5 86 06              1962 	mov	ar6,@r0
   09F7 08                 1963 	inc	r0
   09F8 86 07              1964 	mov	ar7,@r0
   09FA 08                 1965 	inc	r0
   09FB 86 02              1966 	mov	ar2,@r0
   09FD 18                 1967 	dec	r0
   09FE 18                 1968 	dec	r0
   09FF 18                 1969 	dec	r0
   0A00 7F 00              1970 	mov	r7,#0x00
   0A02 7A 00              1971 	mov	r2,#0x00
   0A04 A6 03              1972 	mov	@r0,ar3
   0A06 08                 1973 	inc	r0
   0A07 A6 06              1974 	mov	@r0,ar6
   0A09 08                 1975 	inc	r0
   0A0A A6 07              1976 	mov	@r0,ar7
   0A0C 08                 1977 	inc	r0
   0A0D A6 02              1978 	mov	@r0,ar2
   0A0F 18                 1979 	dec	r0
   0A10 18                 1980 	dec	r0
   0A11 18                 1981 	dec	r0
                           1982 ;	printf_large.c:816: return charsOutputted;
   0A12 D0 02              1983 	pop	ar2
                           1984 ;	printf_large.c:691: value.l &= 0xFFFF;
   0A14                    1985 00181$:
                           1986 ;	printf_large.c:695: if ( signed_argument )
   0A14 30*00 3A           1987 	jnb	b4,00186$
                           1988 ;	printf_large.c:697: if (value.l < 0)
   0A17 E5*00              1989 	mov	a,_bp
   0A19 24 04              1990 	add	a,#0x04
   0A1B F8                 1991 	mov	r0,a
   0A1C 86 03              1992 	mov	ar3,@r0
   0A1E 08                 1993 	inc	r0
   0A1F 86 06              1994 	mov	ar6,@r0
   0A21 08                 1995 	inc	r0
   0A22 86 05              1996 	mov	ar5,@r0
   0A24 08                 1997 	inc	r0
   0A25 86 04              1998 	mov	ar4,@r0
   0A27 18                 1999 	dec	r0
   0A28 18                 2000 	dec	r0
   0A29 18                 2001 	dec	r0
   0A2A EC                 2002 	mov	a,r4
   0A2B 30 E7 21           2003 	jnb	acc.7,00183$
                           2004 ;	printf_large.c:698: value.l = -value.l;
   0A2E C0 02              2005 	push	ar2
   0A30 C3                 2006 	clr	c
   0A31 E4                 2007 	clr	a
   0A32 9B                 2008 	subb	a,r3
   0A33 FB                 2009 	mov	r3,a
   0A34 E4                 2010 	clr	a
   0A35 9E                 2011 	subb	a,r6
   0A36 FE                 2012 	mov	r6,a
   0A37 E4                 2013 	clr	a
   0A38 9D                 2014 	subb	a,r5
   0A39 FF                 2015 	mov	r7,a
   0A3A E4                 2016 	clr	a
   0A3B 9C                 2017 	subb	a,r4
   0A3C FA                 2018 	mov	r2,a
   0A3D A6 03              2019 	mov	@r0,ar3
   0A3F 08                 2020 	inc	r0
   0A40 A6 06              2021 	mov	@r0,ar6
   0A42 08                 2022 	inc	r0
   0A43 A6 07              2023 	mov	@r0,ar7
   0A45 08                 2024 	inc	r0
   0A46 A6 02              2025 	mov	@r0,ar2
   0A48 18                 2026 	dec	r0
   0A49 18                 2027 	dec	r0
   0A4A 18                 2028 	dec	r0
   0A4B D0 02              2029 	pop	ar2
   0A4D 80 02              2030 	sjmp	00186$
   0A4F                    2031 00183$:
                           2032 ;	printf_large.c:700: signed_argument = 0;
   0A4F C2*00              2033 	clr	b4
   0A51                    2034 00186$:
                           2035 ;	printf_large.c:704: lsd = 1;
   0A51 D2*00              2036 	setb	b5
                           2037 ;	printf_large.c:706: do {
   0A53 8A 00              2038 	mov	ar0,r2
   0A55 7D 00              2039 	mov	r5,#0x00
   0A57                    2040 00190$:
                           2041 ;	printf_large.c:707: value.byte[4] = 0;
   0A57 E5*00              2042 	mov	a,_bp
   0A59 24 04              2043 	add	a,#0x04
   0A5B 24 04              2044 	add	a,#0x04
   0A5D F9                 2045 	mov	r1,a
   0A5E 77 00              2046 	mov	@r1,#0x00
                           2047 ;	printf_large.c:709: calculate_digit(&value, radix);
   0A60 E5*00              2048 	mov	a,_bp
   0A62 24 04              2049 	add	a,#0x04
   0A64 FE                 2050 	mov	r6,a
   0A65 C0 05              2051 	push	ar5
   0A67 C0 00              2052 	push	ar0
   0A69 C0*00              2053 	push	bits
   0A6B E5*00              2054 	mov	a,_bp
   0A6D 24 09              2055 	add	a,#0x09
   0A6F F9                 2056 	mov	r1,a
   0A70 E7                 2057 	mov	a,@r1
   0A71 C0 E0              2058 	push	acc
   0A73 8E 82              2059 	mov	dpl,r6
   0A75 12s00rC0           2060 	lcall	_calculate_digit
   0A78 15 81              2061 	dec	sp
   0A7A D0*00              2062 	pop	bits
   0A7C D0 00              2063 	pop	ar0
   0A7E D0 05              2064 	pop	ar5
                           2065 ;	printf_large.c:713: if (!lsd)
   0A80 20*00 15           2066 	jb	b5,00188$
                           2067 ;	printf_large.c:715: *pstore = (value.byte[4] << 4) | (value.byte[4] >> 4) | *pstore;
   0A83 E5*00              2068 	mov	a,_bp
   0A85 24 04              2069 	add	a,#0x04
   0A87 24 04              2070 	add	a,#0x04
   0A89 F9                 2071 	mov	r1,a
   0A8A E7                 2072 	mov	a,@r1
   0A8B C4                 2073 	swap	a
   0A8C FE                 2074 	mov	r6,a
   0A8D E6                 2075 	mov	a,@r0
   0A8E FF                 2076 	mov	r7,a
   0A8F 42 06              2077 	orl	ar6,a
   0A91 A6 06              2078 	mov	@r0,ar6
                           2079 ;	printf_large.c:716: pstore--;
   0A93 18                 2080 	dec	r0
   0A94 88 02              2081 	mov	ar2,r0
   0A96 80 0B              2082 	sjmp	00189$
   0A98                    2083 00188$:
                           2084 ;	printf_large.c:720: *pstore = value.byte[4];
   0A98 E5*00              2085 	mov	a,_bp
   0A9A 24 04              2086 	add	a,#0x04
   0A9C 24 04              2087 	add	a,#0x04
   0A9E F9                 2088 	mov	r1,a
   0A9F 87 06              2089 	mov	ar6,@r1
   0AA1 A6 06              2090 	mov	@r0,ar6
   0AA3                    2091 00189$:
                           2092 ;	printf_large.c:722: length++;
   0AA3 0D                 2093 	inc	r5
   0AA4 E5*00              2094 	mov	a,_bp
   0AA6 24 11              2095 	add	a,#0x11
   0AA8 F9                 2096 	mov	r1,a
   0AA9 A7 05              2097 	mov	@r1,ar5
                           2098 ;	printf_large.c:723: lsd = !lsd;
   0AAB B2*00              2099 	cpl	b5
                           2100 ;	printf_large.c:724: } while( value.ul );
   0AAD E5*00              2101 	mov	a,_bp
   0AAF 24 18              2102 	add	a,#0x18
   0AB1 F9                 2103 	mov	r1,a
   0AB2 87 01              2104 	mov	ar1,@r1
   0AB4 87 06              2105 	mov	ar6,@r1
   0AB6 09                 2106 	inc	r1
   0AB7 87 07              2107 	mov	ar7,@r1
   0AB9 09                 2108 	inc	r1
   0ABA 87 03              2109 	mov	ar3,@r1
   0ABC 09                 2110 	inc	r1
   0ABD 87 04              2111 	mov	ar4,@r1
   0ABF 19                 2112 	dec	r1
   0AC0 19                 2113 	dec	r1
   0AC1 19                 2114 	dec	r1
   0AC2 EE                 2115 	mov	a,r6
   0AC3 4F                 2116 	orl	a,r7
   0AC4 4B                 2117 	orl	a,r3
   0AC5 4C                 2118 	orl	a,r4
   0AC6 70 8F              2119 	jnz	00190$
                           2120 ;	printf_large.c:726: if (width == 0)
   0AC8 88 02              2121 	mov	ar2,r0
   0ACA E5*00              2122 	mov	a,_bp
   0ACC 24 11              2123 	add	a,#0x11
   0ACE F8                 2124 	mov	r0,a
   0ACF A6 05              2125 	mov	@r0,ar5
   0AD1 E5*00              2126 	mov	a,_bp
   0AD3 24 0A              2127 	add	a,#0x0a
   0AD5 F8                 2128 	mov	r0,a
   0AD6 E6                 2129 	mov	a,@r0
   0AD7 70 07              2130 	jnz	00194$
                           2131 ;	printf_large.c:731: width=1;
   0AD9 E5*00              2132 	mov	a,_bp
   0ADB 24 0A              2133 	add	a,#0x0a
   0ADD F8                 2134 	mov	r0,a
   0ADE 76 01              2135 	mov	@r0,#0x01
   0AE0                    2136 00194$:
                           2137 ;	printf_large.c:735: if (!zero_padding && !left_justify)
   0AE0 30*00 03           2138 	jnb	b1,00414$
   0AE3 02s0Br71           2139 	ljmp	00199$
   0AE6                    2140 00414$:
   0AE6 30*00 03           2141 	jnb	b0,00415$
   0AE9 02s0Br71           2142 	ljmp	00199$
   0AEC                    2143 00415$:
                           2144 ;	printf_large.c:737: while ( width > (unsigned char) (length+1) )
   0AEC E5*00              2145 	mov	a,_bp
   0AEE 24 11              2146 	add	a,#0x11
   0AF0 F8                 2147 	mov	r0,a
   0AF1 E6                 2148 	mov	a,@r0
   0AF2 04                 2149 	inc	a
   0AF3 FB                 2150 	mov	r3,a
   0AF4 E5*00              2151 	mov	a,_bp
   0AF6 24 1B              2152 	add	a,#0x1b
   0AF8 F8                 2153 	mov	r0,a
   0AF9 86 04              2154 	mov	ar4,@r0
   0AFB 08                 2155 	inc	r0
   0AFC 86 05              2156 	mov	ar5,@r0
   0AFE E5*00              2157 	mov	a,_bp
   0B00 24 0A              2158 	add	a,#0x0a
   0B02 F8                 2159 	mov	r0,a
   0B03 86 06              2160 	mov	ar6,@r0
   0B05                    2161 00195$:
   0B05 C3                 2162 	clr	c
   0B06 EB                 2163 	mov	a,r3
   0B07 9E                 2164 	subb	a,r6
   0B08 50 56              2165 	jnc	00325$
                           2166 ;	printf_large.c:739: OUTPUT_CHAR( ' ', p );
   0B0A C0 02              2167 	push	ar2
   0B0C C0 03              2168 	push	ar3
   0B0E C0 04              2169 	push	ar4
   0B10 C0 05              2170 	push	ar5
   0B12 C0 06              2171 	push	ar6
   0B14 C0*00              2172 	push	bits
   0B16 E5*00              2173 	mov	a,_bp
   0B18 24 FB              2174 	add	a,#0xfb
   0B1A F8                 2175 	mov	r0,a
   0B1B E6                 2176 	mov	a,@r0
   0B1C C0 E0              2177 	push	acc
   0B1E 08                 2178 	inc	r0
   0B1F E6                 2179 	mov	a,@r0
   0B20 C0 E0              2180 	push	acc
   0B22 08                 2181 	inc	r0
   0B23 E6                 2182 	mov	a,@r0
   0B24 C0 E0              2183 	push	acc
   0B26 74r3C              2184 	mov	a,#00417$
   0B28 C0 E0              2185 	push	acc
   0B2A 74s0B              2186 	mov	a,#(00417$ >> 8)
   0B2C C0 E0              2187 	push	acc
   0B2E A8*00              2188 	mov	r0,_bp
   0B30 08                 2189 	inc	r0
   0B31 E6                 2190 	mov	a,@r0
   0B32 C0 E0              2191 	push	acc
   0B34 08                 2192 	inc	r0
   0B35 E6                 2193 	mov	a,@r0
   0B36 C0 E0              2194 	push	acc
   0B38 75 82 20           2195 	mov	dpl,#0x20
   0B3B 22                 2196 	ret
   0B3C                    2197 00417$:
   0B3C 15 81              2198 	dec	sp
   0B3E 15 81              2199 	dec	sp
   0B40 15 81              2200 	dec	sp
   0B42 D0*00              2201 	pop	bits
   0B44 D0 06              2202 	pop	ar6
   0B46 D0 05              2203 	pop	ar5
   0B48 D0 04              2204 	pop	ar4
   0B4A D0 03              2205 	pop	ar3
   0B4C D0 02              2206 	pop	ar2
   0B4E 0C                 2207 	inc	r4
   0B4F BC 00 01           2208 	cjne	r4,#0x00,00418$
   0B52 0D                 2209 	inc	r5
   0B53                    2210 00418$:
   0B53 E5*00              2211 	mov	a,_bp
   0B55 24 1B              2212 	add	a,#0x1b
   0B57 F8                 2213 	mov	r0,a
   0B58 A6 04              2214 	mov	@r0,ar4
   0B5A 08                 2215 	inc	r0
   0B5B A6 05              2216 	mov	@r0,ar5
                           2217 ;	printf_large.c:740: width--;
   0B5D 1E                 2218 	dec	r6
   0B5E 80 A5              2219 	sjmp	00195$
   0B60                    2220 00325$:
   0B60 E5*00              2221 	mov	a,_bp
   0B62 24 1B              2222 	add	a,#0x1b
   0B64 F8                 2223 	mov	r0,a
   0B65 A6 04              2224 	mov	@r0,ar4
   0B67 08                 2225 	inc	r0
   0B68 A6 05              2226 	mov	@r0,ar5
   0B6A E5*00              2227 	mov	a,_bp
   0B6C 24 0A              2228 	add	a,#0x0a
   0B6E F8                 2229 	mov	r0,a
   0B6F A6 06              2230 	mov	@r0,ar6
   0B71                    2231 00199$:
                           2232 ;	printf_large.c:744: if (signed_argument) // this now means the original value was negative
   0B71 30*00 48           2233 	jnb	b4,00209$
                           2234 ;	printf_large.c:746: OUTPUT_CHAR( '-', p );
   0B74 C0 02              2235 	push	ar2
   0B76 C0*00              2236 	push	bits
   0B78 E5*00              2237 	mov	a,_bp
   0B7A 24 FB              2238 	add	a,#0xfb
   0B7C F8                 2239 	mov	r0,a
   0B7D E6                 2240 	mov	a,@r0
   0B7E C0 E0              2241 	push	acc
   0B80 08                 2242 	inc	r0
   0B81 E6                 2243 	mov	a,@r0
   0B82 C0 E0              2244 	push	acc
   0B84 08                 2245 	inc	r0
   0B85 E6                 2246 	mov	a,@r0
   0B86 C0 E0              2247 	push	acc
   0B88 74r9E              2248 	mov	a,#00420$
   0B8A C0 E0              2249 	push	acc
   0B8C 74s0B              2250 	mov	a,#(00420$ >> 8)
   0B8E C0 E0              2251 	push	acc
   0B90 A8*00              2252 	mov	r0,_bp
   0B92 08                 2253 	inc	r0
   0B93 E6                 2254 	mov	a,@r0
   0B94 C0 E0              2255 	push	acc
   0B96 08                 2256 	inc	r0
   0B97 E6                 2257 	mov	a,@r0
   0B98 C0 E0              2258 	push	acc
   0B9A 75 82 2D           2259 	mov	dpl,#0x2D
   0B9D 22                 2260 	ret
   0B9E                    2261 00420$:
   0B9E 15 81              2262 	dec	sp
   0BA0 15 81              2263 	dec	sp
   0BA2 15 81              2264 	dec	sp
   0BA4 D0*00              2265 	pop	bits
   0BA6 D0 02              2266 	pop	ar2
   0BA8 E5*00              2267 	mov	a,_bp
   0BAA 24 1B              2268 	add	a,#0x1b
   0BAC F8                 2269 	mov	r0,a
   0BAD 06                 2270 	inc	@r0
   0BAE B6 00 02           2271 	cjne	@r0,#0x00,00421$
   0BB1 08                 2272 	inc	r0
   0BB2 06                 2273 	inc	@r0
   0BB3                    2274 00421$:
                           2275 ;	printf_large.c:748: width--;
   0BB3 E5*00              2276 	mov	a,_bp
   0BB5 24 0A              2277 	add	a,#0x0a
   0BB7 F8                 2278 	mov	r0,a
   0BB8 16                 2279 	dec	@r0
   0BB9 02s0Cr59           2280 	ljmp	00210$
   0BBC                    2281 00209$:
                           2282 ;	printf_large.c:750: else if (length != 0)
   0BBC E5*00              2283 	mov	a,_bp
   0BBE 24 11              2284 	add	a,#0x11
   0BC0 F8                 2285 	mov	r0,a
   0BC1 E6                 2286 	mov	a,@r0
   0BC2 70 03              2287 	jnz	00422$
   0BC4 02s0Cr59           2288 	ljmp	00210$
   0BC7                    2289 00422$:
                           2290 ;	printf_large.c:753: if (prefix_sign)
   0BC7 30*00 47           2291 	jnb	b2,00204$
                           2292 ;	printf_large.c:755: OUTPUT_CHAR( '+', p );
   0BCA C0 02              2293 	push	ar2
   0BCC C0*00              2294 	push	bits
   0BCE E5*00              2295 	mov	a,_bp
   0BD0 24 FB              2296 	add	a,#0xfb
   0BD2 F8                 2297 	mov	r0,a
   0BD3 E6                 2298 	mov	a,@r0
   0BD4 C0 E0              2299 	push	acc
   0BD6 08                 2300 	inc	r0
   0BD7 E6                 2301 	mov	a,@r0
   0BD8 C0 E0              2302 	push	acc
   0BDA 08                 2303 	inc	r0
   0BDB E6                 2304 	mov	a,@r0
   0BDC C0 E0              2305 	push	acc
   0BDE 74rF4              2306 	mov	a,#00424$
   0BE0 C0 E0              2307 	push	acc
   0BE2 74s0B              2308 	mov	a,#(00424$ >> 8)
   0BE4 C0 E0              2309 	push	acc
   0BE6 A8*00              2310 	mov	r0,_bp
   0BE8 08                 2311 	inc	r0
   0BE9 E6                 2312 	mov	a,@r0
   0BEA C0 E0              2313 	push	acc
   0BEC 08                 2314 	inc	r0
   0BED E6                 2315 	mov	a,@r0
   0BEE C0 E0              2316 	push	acc
   0BF0 75 82 2B           2317 	mov	dpl,#0x2B
   0BF3 22                 2318 	ret
   0BF4                    2319 00424$:
   0BF4 15 81              2320 	dec	sp
   0BF6 15 81              2321 	dec	sp
   0BF8 15 81              2322 	dec	sp
   0BFA D0*00              2323 	pop	bits
   0BFC D0 02              2324 	pop	ar2
   0BFE E5*00              2325 	mov	a,_bp
   0C00 24 1B              2326 	add	a,#0x1b
   0C02 F8                 2327 	mov	r0,a
   0C03 06                 2328 	inc	@r0
   0C04 B6 00 02           2329 	cjne	@r0,#0x00,00425$
   0C07 08                 2330 	inc	r0
   0C08 06                 2331 	inc	@r0
   0C09                    2332 00425$:
                           2333 ;	printf_large.c:757: width--;
   0C09 E5*00              2334 	mov	a,_bp
   0C0B 24 0A              2335 	add	a,#0x0a
   0C0D F8                 2336 	mov	r0,a
   0C0E 16                 2337 	dec	@r0
   0C0F 80 48              2338 	sjmp	00210$
   0C11                    2339 00204$:
                           2340 ;	printf_large.c:759: else if (prefix_space)
   0C11 30*00 45           2341 	jnb	b3,00210$
                           2342 ;	printf_large.c:761: OUTPUT_CHAR( ' ', p );
   0C14 C0 02              2343 	push	ar2
   0C16 C0*00              2344 	push	bits
   0C18 E5*00              2345 	mov	a,_bp
   0C1A 24 FB              2346 	add	a,#0xfb
   0C1C F8                 2347 	mov	r0,a
   0C1D E6                 2348 	mov	a,@r0
   0C1E C0 E0              2349 	push	acc
   0C20 08                 2350 	inc	r0
   0C21 E6                 2351 	mov	a,@r0
   0C22 C0 E0              2352 	push	acc
   0C24 08                 2353 	inc	r0
   0C25 E6                 2354 	mov	a,@r0
   0C26 C0 E0              2355 	push	acc
   0C28 74r3E              2356 	mov	a,#00427$
   0C2A C0 E0              2357 	push	acc
   0C2C 74s0C              2358 	mov	a,#(00427$ >> 8)
   0C2E C0 E0              2359 	push	acc
   0C30 A8*00              2360 	mov	r0,_bp
   0C32 08                 2361 	inc	r0
   0C33 E6                 2362 	mov	a,@r0
   0C34 C0 E0              2363 	push	acc
   0C36 08                 2364 	inc	r0
   0C37 E6                 2365 	mov	a,@r0
   0C38 C0 E0              2366 	push	acc
   0C3A 75 82 20           2367 	mov	dpl,#0x20
   0C3D 22                 2368 	ret
   0C3E                    2369 00427$:
   0C3E 15 81              2370 	dec	sp
   0C40 15 81              2371 	dec	sp
   0C42 15 81              2372 	dec	sp
   0C44 D0*00              2373 	pop	bits
   0C46 D0 02              2374 	pop	ar2
   0C48 E5*00              2375 	mov	a,_bp
   0C4A 24 1B              2376 	add	a,#0x1b
   0C4C F8                 2377 	mov	r0,a
   0C4D 06                 2378 	inc	@r0
   0C4E B6 00 02           2379 	cjne	@r0,#0x00,00428$
   0C51 08                 2380 	inc	r0
   0C52 06                 2381 	inc	@r0
   0C53                    2382 00428$:
                           2383 ;	printf_large.c:763: width--;
   0C53 E5*00              2384 	mov	a,_bp
   0C55 24 0A              2385 	add	a,#0x0a
   0C57 F8                 2386 	mov	r0,a
   0C58 16                 2387 	dec	@r0
   0C59                    2388 00210$:
                           2389 ;	printf_large.c:768: if (!left_justify)
   0C59 30*00 03           2390 	jnb	b0,00429$
   0C5C 02s0CrE0           2391 	ljmp	00218$
   0C5F                    2392 00429$:
                           2393 ;	printf_large.c:769: while ( width-- > length )
   0C5F E5*00              2394 	mov	a,_bp
   0C61 24 1B              2395 	add	a,#0x1b
   0C63 F8                 2396 	mov	r0,a
   0C64 86 03              2397 	mov	ar3,@r0
   0C66 08                 2398 	inc	r0
   0C67 86 04              2399 	mov	ar4,@r0
   0C69 E5*00              2400 	mov	a,_bp
   0C6B 24 0A              2401 	add	a,#0x0a
   0C6D F8                 2402 	mov	r0,a
   0C6E 86 05              2403 	mov	ar5,@r0
   0C70                    2404 00211$:
   0C70 8D 06              2405 	mov	ar6,r5
   0C72 1D                 2406 	dec	r5
   0C73 E5*00              2407 	mov	a,_bp
   0C75 24 0A              2408 	add	a,#0x0a
   0C77 F8                 2409 	mov	r0,a
   0C78 A6 05              2410 	mov	@r0,ar5
   0C7A E5*00              2411 	mov	a,_bp
   0C7C 24 11              2412 	add	a,#0x11
   0C7E F8                 2413 	mov	r0,a
   0C7F C3                 2414 	clr	c
   0C80 E6                 2415 	mov	a,@r0
   0C81 9E                 2416 	subb	a,r6
   0C82 40 03              2417 	jc	00430$
   0C84 02s0Dr08           2418 	ljmp	00326$
   0C87                    2419 00430$:
                           2420 ;	printf_large.c:771: OUTPUT_CHAR( zero_padding ? '0' : ' ', p );
   0C87 30*00 04           2421 	jnb	b1,00244$
   0C8A 7E 30              2422 	mov	r6,#0x30
   0C8C 80 02              2423 	sjmp	00245$
   0C8E                    2424 00244$:
   0C8E 7E 20              2425 	mov	r6,#0x20
   0C90                    2426 00245$:
   0C90 C0 02              2427 	push	ar2
   0C92 C0 03              2428 	push	ar3
   0C94 C0 04              2429 	push	ar4
   0C96 C0 05              2430 	push	ar5
   0C98 C0*00              2431 	push	bits
   0C9A E5*00              2432 	mov	a,_bp
   0C9C 24 FB              2433 	add	a,#0xfb
   0C9E F8                 2434 	mov	r0,a
   0C9F E6                 2435 	mov	a,@r0
   0CA0 C0 E0              2436 	push	acc
   0CA2 08                 2437 	inc	r0
   0CA3 E6                 2438 	mov	a,@r0
   0CA4 C0 E0              2439 	push	acc
   0CA6 08                 2440 	inc	r0
   0CA7 E6                 2441 	mov	a,@r0
   0CA8 C0 E0              2442 	push	acc
   0CAA 74rBF              2443 	mov	a,#00432$
   0CAC C0 E0              2444 	push	acc
   0CAE 74s0C              2445 	mov	a,#(00432$ >> 8)
   0CB0 C0 E0              2446 	push	acc
   0CB2 A8*00              2447 	mov	r0,_bp
   0CB4 08                 2448 	inc	r0
   0CB5 E6                 2449 	mov	a,@r0
   0CB6 C0 E0              2450 	push	acc
   0CB8 08                 2451 	inc	r0
   0CB9 E6                 2452 	mov	a,@r0
   0CBA C0 E0              2453 	push	acc
   0CBC 8E 82              2454 	mov	dpl,r6
   0CBE 22                 2455 	ret
   0CBF                    2456 00432$:
   0CBF 15 81              2457 	dec	sp
   0CC1 15 81              2458 	dec	sp
   0CC3 15 81              2459 	dec	sp
   0CC5 D0*00              2460 	pop	bits
   0CC7 D0 05              2461 	pop	ar5
   0CC9 D0 04              2462 	pop	ar4
   0CCB D0 03              2463 	pop	ar3
   0CCD D0 02              2464 	pop	ar2
   0CCF 0B                 2465 	inc	r3
   0CD0 BB 00 01           2466 	cjne	r3,#0x00,00433$
   0CD3 0C                 2467 	inc	r4
   0CD4                    2468 00433$:
   0CD4 E5*00              2469 	mov	a,_bp
   0CD6 24 1B              2470 	add	a,#0x1b
   0CD8 F8                 2471 	mov	r0,a
   0CD9 A6 03              2472 	mov	@r0,ar3
   0CDB 08                 2473 	inc	r0
   0CDC A6 04              2474 	mov	@r0,ar4
   0CDE 80 90              2475 	sjmp	00211$
   0CE0                    2476 00218$:
                           2477 ;	printf_large.c:776: if (width > length)
   0CE0 E5*00              2478 	mov	a,_bp
   0CE2 24 0A              2479 	add	a,#0x0a
   0CE4 F8                 2480 	mov	r0,a
   0CE5 E5*00              2481 	mov	a,_bp
   0CE7 24 11              2482 	add	a,#0x11
   0CE9 F9                 2483 	mov	r1,a
   0CEA C3                 2484 	clr	c
   0CEB E7                 2485 	mov	a,@r1
   0CEC 96                 2486 	subb	a,@r0
   0CED 50 10              2487 	jnc	00215$
                           2488 ;	printf_large.c:777: width -= length;
   0CEF E5*00              2489 	mov	a,_bp
   0CF1 24 0A              2490 	add	a,#0x0a
   0CF3 F8                 2491 	mov	r0,a
   0CF4 E5*00              2492 	mov	a,_bp
   0CF6 24 11              2493 	add	a,#0x11
   0CF8 F9                 2494 	mov	r1,a
   0CF9 E6                 2495 	mov	a,@r0
   0CFA C3                 2496 	clr	c
   0CFB 97                 2497 	subb	a,@r1
   0CFC F6                 2498 	mov	@r0,a
   0CFD 80 1A              2499 	sjmp	00318$
   0CFF                    2500 00215$:
                           2501 ;	printf_large.c:779: width = 0;
   0CFF E5*00              2502 	mov	a,_bp
   0D01 24 0A              2503 	add	a,#0x0a
   0D03 F8                 2504 	mov	r0,a
   0D04 76 00              2505 	mov	@r0,#0x00
                           2506 ;	printf_large.c:816: return charsOutputted;
                           2507 ;	printf_large.c:783: while( length-- )
   0D06 80 11              2508 	sjmp	00318$
   0D08                    2509 00326$:
   0D08 E5*00              2510 	mov	a,_bp
   0D0A 24 1B              2511 	add	a,#0x1b
   0D0C F8                 2512 	mov	r0,a
   0D0D A6 03              2513 	mov	@r0,ar3
   0D0F 08                 2514 	inc	r0
   0D10 A6 04              2515 	mov	@r0,ar4
   0D12 E5*00              2516 	mov	a,_bp
   0D14 24 0A              2517 	add	a,#0x0a
   0D16 F8                 2518 	mov	r0,a
   0D17 A6 05              2519 	mov	@r0,ar5
   0D19                    2520 00318$:
   0D19 8A 00              2521 	mov	ar0,r2
   0D1B E5*00              2522 	mov	a,_bp
   0D1D 24 1B              2523 	add	a,#0x1b
   0D1F F9                 2524 	mov	r1,a
   0D20 87 02              2525 	mov	ar2,@r1
   0D22 09                 2526 	inc	r1
   0D23 87 03              2527 	mov	ar3,@r1
   0D25 E5*00              2528 	mov	a,_bp
   0D27 24 11              2529 	add	a,#0x11
   0D29 F9                 2530 	mov	r1,a
   0D2A 87 04              2531 	mov	ar4,@r1
   0D2C                    2532 00223$:
   0D2C 8C 05              2533 	mov	ar5,r4
   0D2E 1C                 2534 	dec	r4
   0D2F ED                 2535 	mov	a,r5
   0D30 70 03              2536 	jnz	00435$
   0D32 02s0DrB8           2537 	ljmp	00327$
   0D35                    2538 00435$:
                           2539 ;	printf_large.c:785: lsd = !lsd;
   0D35 B2*00              2540 	cpl	b5
                           2541 ;	printf_large.c:786: if (!lsd)
   0D37 20*00 10           2542 	jb	b5,00221$
                           2543 ;	printf_large.c:788: pstore++;
   0D3A 08                 2544 	inc	r0
                           2545 ;	printf_large.c:789: value.byte[4] = *pstore >> 4;
   0D3B E5*00              2546 	mov	a,_bp
   0D3D 24 04              2547 	add	a,#0x04
   0D3F 24 04              2548 	add	a,#0x04
   0D41 F9                 2549 	mov	r1,a
   0D42 E6                 2550 	mov	a,@r0
   0D43 C4                 2551 	swap	a
   0D44 54 0F              2552 	anl	a,#0x0f
   0D46 FD                 2553 	mov	r5,a
   0D47 F7                 2554 	mov	@r1,a
   0D48 80 0D              2555 	sjmp	00222$
   0D4A                    2556 00221$:
                           2557 ;	printf_large.c:793: value.byte[4] = *pstore & 0x0F;
   0D4A E5*00              2558 	mov	a,_bp
   0D4C 24 04              2559 	add	a,#0x04
   0D4E 24 04              2560 	add	a,#0x04
   0D50 F9                 2561 	mov	r1,a
   0D51 86 05              2562 	mov	ar5,@r0
   0D53 74 0F              2563 	mov	a,#0x0F
   0D55 5D                 2564 	anl	a,r5
   0D56 F7                 2565 	mov	@r1,a
   0D57                    2566 00222$:
                           2567 ;	printf_large.c:796: output_digit( value.byte[4], lower_case, output_char, p );
   0D57 E5*00              2568 	mov	a,_bp
   0D59 24 04              2569 	add	a,#0x04
   0D5B 24 04              2570 	add	a,#0x04
   0D5D F9                 2571 	mov	r1,a
   0D5E 87 05              2572 	mov	ar5,@r1
   0D60 C0 02              2573 	push	ar2
   0D62 C0 03              2574 	push	ar3
   0D64 C0 04              2575 	push	ar4
   0D66 C0 00              2576 	push	ar0
   0D68 C0*00              2577 	push	bits
   0D6A E5*00              2578 	mov	a,_bp
   0D6C 24 FB              2579 	add	a,#0xfb
   0D6E F9                 2580 	mov	r1,a
   0D6F E7                 2581 	mov	a,@r1
   0D70 C0 E0              2582 	push	acc
   0D72 09                 2583 	inc	r1
   0D73 E7                 2584 	mov	a,@r1
   0D74 C0 E0              2585 	push	acc
   0D76 09                 2586 	inc	r1
   0D77 E7                 2587 	mov	a,@r1
   0D78 C0 E0              2588 	push	acc
   0D7A A9*00              2589 	mov	r1,_bp
   0D7C 09                 2590 	inc	r1
   0D7D E7                 2591 	mov	a,@r1
   0D7E C0 E0              2592 	push	acc
   0D80 09                 2593 	inc	r1
   0D81 E7                 2594 	mov	a,@r1
   0D82 C0 E0              2595 	push	acc
   0D84 E5*00              2596 	mov	a,_bp
   0D86 24 03              2597 	add	a,#0x03
   0D88 F9                 2598 	mov	r1,a
   0D89 E7                 2599 	mov	a,@r1
   0D8A 24 FF              2600 	add	a,#0xff
   0D8C 92 F0              2601 	mov	b[0],c
   0D8E 85 F0*00           2602 	mov	bits,b
   0D91 8D 82              2603 	mov	dpl,r5
   0D93 12s00r00           2604 	lcall	_output_digit
   0D96 E5 81              2605 	mov	a,sp
   0D98 24 FB              2606 	add	a,#0xfb
   0D9A F5 81              2607 	mov	sp,a
   0D9C D0*00              2608 	pop	bits
   0D9E D0 00              2609 	pop	ar0
   0DA0 D0 04              2610 	pop	ar4
   0DA2 D0 03              2611 	pop	ar3
   0DA4 D0 02              2612 	pop	ar2
                           2613 ;	printf_large.c:797: charsOutputted++;
   0DA6 0A                 2614 	inc	r2
   0DA7 BA 00 01           2615 	cjne	r2,#0x00,00437$
   0DAA 0B                 2616 	inc	r3
   0DAB                    2617 00437$:
   0DAB E5*00              2618 	mov	a,_bp
   0DAD 24 1B              2619 	add	a,#0x1b
   0DAF F9                 2620 	mov	r1,a
   0DB0 A7 02              2621 	mov	@r1,ar2
   0DB2 09                 2622 	inc	r1
   0DB3 A7 03              2623 	mov	@r1,ar3
   0DB5 02s0Dr2C           2624 	ljmp	00223$
   0DB8                    2625 00327$:
   0DB8 E5*00              2626 	mov	a,_bp
   0DBA 24 1B              2627 	add	a,#0x1b
   0DBC F8                 2628 	mov	r0,a
   0DBD A6 02              2629 	mov	@r0,ar2
   0DBF 08                 2630 	inc	r0
   0DC0 A6 03              2631 	mov	@r0,ar3
                           2632 ;	printf_large.c:802: if (left_justify)
   0DC2 20*00 03           2633 	jb	b0,00438$
   0DC5 02s01r78           2634 	ljmp	00239$
   0DC8                    2635 00438$:
                           2636 ;	printf_large.c:803: while (width-- > 0)
   0DC8 E5*00              2637 	mov	a,_bp
   0DCA 24 0A              2638 	add	a,#0x0a
   0DCC F8                 2639 	mov	r0,a
   0DCD 86 04              2640 	mov	ar4,@r0
   0DCF                    2641 00226$:
   0DCF 8C 05              2642 	mov	ar5,r4
   0DD1 1C                 2643 	dec	r4
   0DD2 ED                 2644 	mov	a,r5
   0DD3 70 03              2645 	jnz	00439$
   0DD5 02s01r78           2646 	ljmp	00239$
   0DD8                    2647 00439$:
                           2648 ;	printf_large.c:805: OUTPUT_CHAR(' ', p);
   0DD8 C0 02              2649 	push	ar2
   0DDA C0 03              2650 	push	ar3
   0DDC C0 04              2651 	push	ar4
   0DDE E5*00              2652 	mov	a,_bp
   0DE0 24 FB              2653 	add	a,#0xfb
   0DE2 F8                 2654 	mov	r0,a
   0DE3 E6                 2655 	mov	a,@r0
   0DE4 C0 E0              2656 	push	acc
   0DE6 08                 2657 	inc	r0
   0DE7 E6                 2658 	mov	a,@r0
   0DE8 C0 E0              2659 	push	acc
   0DEA 08                 2660 	inc	r0
   0DEB E6                 2661 	mov	a,@r0
   0DEC C0 E0              2662 	push	acc
   0DEE 74r04              2663 	mov	a,#00440$
   0DF0 C0 E0              2664 	push	acc
   0DF2 74s0E              2665 	mov	a,#(00440$ >> 8)
   0DF4 C0 E0              2666 	push	acc
   0DF6 A8*00              2667 	mov	r0,_bp
   0DF8 08                 2668 	inc	r0
   0DF9 E6                 2669 	mov	a,@r0
   0DFA C0 E0              2670 	push	acc
   0DFC 08                 2671 	inc	r0
   0DFD E6                 2672 	mov	a,@r0
   0DFE C0 E0              2673 	push	acc
   0E00 75 82 20           2674 	mov	dpl,#0x20
   0E03 22                 2675 	ret
   0E04                    2676 00440$:
   0E04 15 81              2677 	dec	sp
   0E06 15 81              2678 	dec	sp
   0E08 15 81              2679 	dec	sp
   0E0A D0 04              2680 	pop	ar4
   0E0C D0 03              2681 	pop	ar3
   0E0E D0 02              2682 	pop	ar2
   0E10 0A                 2683 	inc	r2
   0E11 BA 00 01           2684 	cjne	r2,#0x00,00441$
   0E14 0B                 2685 	inc	r3
   0E15                    2686 00441$:
   0E15 E5*00              2687 	mov	a,_bp
   0E17 24 1B              2688 	add	a,#0x1b
   0E19 F8                 2689 	mov	r0,a
   0E1A A6 02              2690 	mov	@r0,ar2
   0E1C 08                 2691 	inc	r0
   0E1D A6 03              2692 	mov	@r0,ar3
   0E1F 80 AE              2693 	sjmp	00226$
   0E21                    2694 00237$:
                           2695 ;	printf_large.c:812: OUTPUT_CHAR( c, p );
   0E21 E5*00              2696 	mov	a,_bp
   0E23 24 FB              2697 	add	a,#0xfb
   0E25 F8                 2698 	mov	r0,a
   0E26 E6                 2699 	mov	a,@r0
   0E27 C0 E0              2700 	push	acc
   0E29 08                 2701 	inc	r0
   0E2A E6                 2702 	mov	a,@r0
   0E2B C0 E0              2703 	push	acc
   0E2D 08                 2704 	inc	r0
   0E2E E6                 2705 	mov	a,@r0
   0E2F C0 E0              2706 	push	acc
   0E31 74r46              2707 	mov	a,#00442$
   0E33 C0 E0              2708 	push	acc
   0E35 74s0E              2709 	mov	a,#(00442$ >> 8)
   0E37 C0 E0              2710 	push	acc
   0E39 A8*00              2711 	mov	r0,_bp
   0E3B 08                 2712 	inc	r0
   0E3C E6                 2713 	mov	a,@r0
   0E3D C0 E0              2714 	push	acc
   0E3F 08                 2715 	inc	r0
   0E40 E6                 2716 	mov	a,@r0
   0E41 C0 E0              2717 	push	acc
   0E43 8C 82              2718 	mov	dpl,r4
   0E45 22                 2719 	ret
   0E46                    2720 00442$:
   0E46 15 81              2721 	dec	sp
   0E48 15 81              2722 	dec	sp
   0E4A 15 81              2723 	dec	sp
   0E4C E5*00              2724 	mov	a,_bp
   0E4E 24 1B              2725 	add	a,#0x1b
   0E50 F8                 2726 	mov	r0,a
   0E51 06                 2727 	inc	@r0
   0E52 B6 00 02           2728 	cjne	@r0,#0x00,00443$
   0E55 08                 2729 	inc	r0
   0E56 06                 2730 	inc	@r0
   0E57                    2731 00443$:
   0E57 02s01r78           2732 	ljmp	00239$
   0E5A                    2733 00241$:
                           2734 ;	printf_large.c:816: return charsOutputted;
   0E5A E5*00              2735 	mov	a,_bp
   0E5C 24 1B              2736 	add	a,#0x1b
   0E5E F8                 2737 	mov	r0,a
   0E5F 86 82              2738 	mov	dpl,@r0
   0E61 08                 2739 	inc	r0
   0E62 86 83              2740 	mov	dph,@r0
   0E64 85*00 81           2741 	mov	sp,_bp
   0E67 D0*00              2742 	pop	_bp
   0E69 22                 2743 	ret
                           2744 	.area CSEG    (CODE)
                           2745 	.area CONST   (CODE)
   0000                    2746 __str_0:
   0000 3C 4E 4F 20 46 4C  2747 	.ascii "<NO FLOAT>"
        4F 41 54 3E
   000A 00                 2748 	.db 0x00
                           2749 	.area XINIT   (CODE)
                           2750 	.area CABS    (ABS,CODE)
